
  int iter = 1;
  size_t st_idx = 0, end_idx = size - 1;
  while(st_idx != end_idx) {
    auto cur_size = (end_idx - st_idx + 1);
    if (cur_size < PARTITION_SORT_VLEN * PARTITION_SORT_MIN_EACH_LEN) {
      partition_sort_normal(kptr + st_idx,
                            vptr + st_idx,
                            cur_size, k - st_idx,
                            comp_t, copy_t);
      break;
    }

    auto tsize = cur_size - 1; // excluding pivot
    auto each = tsize / PARTITION_SORT_VLEN; // maybe zero
    if(each % 2 == 0 && each > 1) each--;
    auto piv_key = kptr[st_idx];
    auto piv_val = vptr[st_idx];
#ifdef PARTITION_SORT_DEBUG
    std::cout << "iter: " << iter++
              << "; st_idx: " << st_idx 
              << "; end_idx: " << end_idx 
              << "; each: " << each 
              << "; piv_key: " << piv_key
              << "; piv_val: " << piv_val << std::endl;
#endif

    for(size_t i = 0; i < PARTITION_SORT_VLEN; ++i) {
      stp[i] = lowp[i] = st_idx + (i * each) + 1;
      endp[i] = highp[i] = st_idx + (i + 1) * each;
    }

#ifdef PARTITION_SORT_DEBUG
    for(size_t i = 0; i < PARTITION_SORT_VLEN; ++i) {
      std::cout << "[" << i << "] st_idx: " << stp[i] 
                << "; end_idx: " << endp[i] << std::endl;
    }
#endif

    comp_t.lap_start();
    for(size_t j = 0; j < each; ++j) {
#pragma _NEC ivdep
      for(size_t i = 0; i < PARTITION_SORT_VLEN; ++i) {
        auto loaded_key = kptr[stp[i] + j];
        auto loaded_val = vptr[stp[i] + j];
        if (loaded_key < piv_key) {
          work_kptr[lowp[i]] = loaded_key;
          work_vptr[lowp[i]] = loaded_val;
          lowp[i]++;
        }
        else {
          work_kptr[highp[i]] = loaded_key;
          work_vptr[highp[i]] = loaded_val;
          highp[i]--;
        }
      }
    }

#ifdef PARTITION_SORT_DEBUG
    for(size_t i = 0; i < PARTITION_SORT_VLEN; ++i) {
      std::cout << "[" << i << "] low: " << lowp[i] 
                << "; high: " << highp[i] << std::endl;
    }
#endif

    // --- for remaining part ---
    auto rem_size = end_idx - (st_idx + each * PARTITION_SORT_VLEN);
    auto rem_st_idx = st_idx + PARTITION_SORT_VLEN * each + 1;
    auto rem_end_idx = end_idx;
    auto rem_low = rem_st_idx;
    auto rem_high = rem_end_idx;
#ifdef PARTITION_SORT_DEBUG
    if(rem_size) std::cout << "[rem] rem_st_idx: " << rem_st_idx
                           << "; rem_end_idx: " << rem_end_idx << std::endl;
#endif
#pragma _NEC ivdep
    for(size_t i = 0; i < rem_size; ++i) {
      auto loaded_key = kptr[rem_st_idx + i];
      auto loaded_val = vptr[rem_st_idx + i];
      if (loaded_key < piv_key) {
        work_kptr[rem_low] = loaded_key;
        work_vptr[rem_low] = loaded_val;
        rem_low++;
      }
      else {
        work_kptr[rem_high] = loaded_key;
        work_vptr[rem_high] = loaded_val;
        rem_high--;
      }
    }
#ifdef PARTITION_SORT_DEBUG
    if(rem_size) std::cout << "[rem] rem_low: " << rem_low
                           << "; rem_high: " << rem_high << std::endl;
#endif
    comp_t.lap_stop();

    // --- start of merge ---
    copy_t.lap_start();
    auto low = st_idx, high = end_idx;
    for(size_t i = 0; i < PARTITION_SORT_VLEN; ++i) {
#ifdef PARTITION_SORT_DEBUG
      std::cout << "[" << i << "] low: " << low 
                << "; high: " << high << std::endl;
#endif
#pragma _NEC ivdep
      for(size_t j = stp[i]; j < lowp[i]; ++j) {
        kptr[low] = work_kptr[j];
        vptr[low] = work_vptr[j];
        low++;
      }
      for(size_t j = lowp[i]; j <= endp[i]; ++j) {
#pragma _NEC ivdep
        kptr[high] = work_kptr[j];
        vptr[high] = work_vptr[j];
        high--;
      }
    }
    if(rem_size) {
#ifdef PARTITION_SORT_DEBUG
      std::cout << "[rem] low: " << low << "; high: " << high << std::endl;
#endif
#pragma _NEC ivdep 
      for(size_t j = rem_st_idx; j < rem_low; ++j) {
        kptr[low] = work_kptr[j];
        vptr[low] = work_vptr[j];
        low++;
      }
#pragma _NEC ivdep
      for(size_t j = rem_low; j <= rem_end_idx; ++j) {
        kptr[high] = work_kptr[j];
        vptr[high] = work_vptr[j];
        high--;
      }
    }
    copy_t.lap_stop();

    // low == high, at this point
#ifdef PARTITION_SORT_DEBUG
    std::cout << "low: " << low << "; high: " << high << std::endl;
#endif
    checkAssumption(low == high);
    kptr[low] = piv_key;
    vptr[low] = piv_val;

    // adjustment 
    if (low > kidx) end_idx = low - 1;
    else if (low < kidx) st_idx = low + 1;
    else st_idx = end_idx = kidx; // DONE: equal case
  } // end of while
 
