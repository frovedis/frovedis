.\" Automatically generated by Pandoc 2.17.1.1
.\"
.\" Define V font for inline verbatim, using C font in formats
.\" that render this, and otherwise B font.
.ie "\f[CB]x\f[]"x" \{\
. ftr V B
. ftr VI BI
. ftr VB B
. ftr VBI BI
.\}
.el \{\
. ftr V CR
. ftr VI CI
. ftr VB CB
. ftr VBI CBI
.\}
.TH "Timeseries analysis using ARIMA" "" "" "" ""
.hy
.SH NAME
.PP
ARIMA - Autoregressive Integrated Moving Average model is a time series
model that is used to forecast data based on the dataset of past to
predict/forecast the future.
.SH SYNOPSIS
.PP
\f[V]#include <frovedis/ml/tsa/arima.hpp>\f[R]
.SS Constructors
.PP
Arima(const node_local<std::vector>& sample_data_l,
.PD 0
.P
.PD
size_t ar_lag_l = 1,
.PD 0
.P
.PD
size_t diff_order_l = 0,
.PD 0
.P
.PD
size_t ma_lag_l = 0,
.PD 0
.P
.PD
size_t seasonal_l = 0,
.PD 0
.P
.PD
bool auto_arima_l = false,
.PD 0
.P
.PD
std::string solver_l = \[lq]lapack\[rq])
.SS Public Member Functions
.PP
void fit()
.PP
std::vector
.PD 0
.P
.PD
predict(size_t start_step, size_t stop_step)
.PP
std::vector
.PD 0
.P
.PD
forecast(size_t steps = 1)
.SH DESCRIPTION
.PP
Frovedis provides a timeseries model in order to predict the future
values based on the past values.
.PD 0
.P
.PD
Each component in ARIMA functions as a parameter with a standard
notation.
For ARIMA models, a standard notation would be ARIMA with p(AR), d(I),
and q(MA) which indicate the type of ARIMA model to be used.
A \f[V]0\f[R] value can be used as a parameter and would mean that the
particular component should not be used in the model.
This way, the ARIMA model can be constructed to perform the function of
an ARMA model, or even simple AR (1,0,0), I(0,1,0), or MA(0,0,1) models.
\f[B]However, the current implementaion cannot be used to construct a
pure MA model.\f[R]
.PP
Frovedis ARIMA is comparatively faster than statsmodel ARIMA for large
timeseries dataset as it is light weighted and having accuracy as good
as statsmodel.
Also, it provides the feature of auto ARIMA which can fit the best lag
for AR and MA.
This is a useful feature for the users who do not have knowledge about
data analytics and those who do not want to use ACF, PACF and ADfuller
tests in order to judge the data first before calling ARIMA.
.PP
Unlike statsmodel ARIMA, it does not use MLE (Maximum Likelihood
Estimation), rather it uses OLS (Ordinary Least Squares).
.PD 0
.P
.PD
\f[B]Note:-\f[R] Also, rather than converging around the mean after some
number of predictions, it tends to follow the trend i.e it diverges
towards increasing or decreasing trend.
.SS Detailed Description
.SS 1. Arima()
.PP
\f[B]Parameters\f[R]
.PD 0
.P
.PD
\f[B]\f[BI]sample_data_l\f[B]\f[R]: A
\f[V]node_local<std::vector<T>>\f[R] containing the timeseries data.
.PD 0
.P
.PD
\f[B]\f[BI]ar_lag_l\f[B]\f[R]: A \f[V]size_t\f[R] parameter which
specifies the order (lags used) of the Auto-Regressive Model.
Currently, this parameter must be greater than or equal to 1.
.PD 0
.P
.PD
\f[B]\f[BI]diff_order_l\f[B]\f[R]: A \f[V]size_t\f[R] parameter which
specifies the order of differencing.
It must be a positive parameter.
.PD 0
.P
.PD
\f[B]\f[BI]ma_lag_l\f[B]\f[R]: A \f[V]size_t\f[R] parameter which
specifies the order (lags used) of the Moving-Average Model.
It must be a positive parameter.
.PD 0
.P
.PD
\f[B]\f[BI]seasonal\f[B]\f[R]: A \f[V]size_t\f[R] parameter which
specifies the interval of seasonal differencing.
In case the data has some seasonality , then it can handle it .
It must be a positive parameter.
This is an optional parameter.
.PD 0
.P
.PD
\f[B]\f[BI]auto_arima\f[B]\f[R]: A \f[V]bool\f[R] parameter which
specifies whether to use auto (brute) ARIMA.
If set to \f[V]true\f[R], it treats the ar_lag_l and ma_lag_l parameter
as the highest limit for its iteration and auto fits the lags with the
best RMSE score.
This is an optional parameter.
.PD 0
.P
.PD
\f[B]\f[BI]solver\f[B]\f[R]: A \f[V]string\f[R] parameter which
specifies the solver to be used for linear regression.
By default, \f[V]lapack\f[R] solver will be used.
It supports \f[V]lapack\f[R], \f[V]scalapack\f[R], \f[V]lbfgs\f[R] and
\f[V]sgd\f[R] solver.
When specified, e.g \f[V]lbfgs\f[R], then it uses lbfgs solver for
linear regression.
.PD 0
.P
.PD
\f[B]Note:-\f[R] To get the best performance and accuracy from ARIMA,
use solver=`lapack'.
.PP
\f[B]Purpose\f[R]
.PD 0
.P
.PD
It initializes the Arima instance with the given parameters.
.PP
Currently, the number of samples in the timeseries data must be greater
than sum of ARIMA order (ar_lag_l, diff_order_l, ma_lag_l, seasonal).
.IP
.nf
\f[C]
\[ga]N_samples >= (ar_lag_l + diff_order_l + ma_lag_l + seasonal)\[ga]
\f[R]
.fi
.PP
\f[B]Return Value\f[R]
.PD 0
.P
.PD
It simply returns the instance of Arima class.
.SS 2. void fit()
.PP
\f[B]Purpose\f[R]
.PD 0
.P
.PD
It is used to fit the model parameters on the basis of given parameters
and data provided in Arima constructor.
.PP
\f[B]Return Value\f[R]
.PD 0
.P
.PD
void
.SS 3. std::vector predict(size_t start_step, size_t stop_step)
.PP
\f[B]Parameters\f[R] \f[B]\f[BI]start_step\f[B]\f[R]: A \f[V]size_t\f[R]
parameter which specifies the staring index from which the values are to
be predicted.
This parameter must be greater than or eqaul to 0.
.PD 0
.P
.PD
\f[B]\f[BI]stop_step\f[B]\f[R]: A \f[V]size_t\f[R] parameter which
specifies the index till which the values are to be predicted.
This parameter must be greater than or equal to 0.
.PP
\f[B]Purpose\f[R]
.PD 0
.P
.PD
It is used to perform in-sample prediction and out-of-sample prediction.
.PP
During prediction, \f[V]stop_step\f[R] must not be less than
\f[V]start_step\f[R].
.PP
For prediction:
.PD 0
.P
.PD
- When \f[V]start_step\f[R] and \f[V]stop_step\f[R] are both less than
the order, then it will return a \f[V]std::vector<T>\f[R] having only
the fitted values as predictions.
.PD 0
.P
.PD
- When \f[V]start_step\f[R] is less than the sum of ARIMA order but
\f[V]stop_step\f[R] is not, then it will return a
\f[V]std::vector<T>\f[R] having a combination of the fitted values from
\f[V]start_step\f[R] till \f[V]order value\f[R] and will use new
prediction from \f[V]order + 1\f[R] to \f[V]stop_step\f[R].
.PD 0
.P
.PD
- When \f[V]start_step\f[R] and \f[V]stop_step\f[R] both are greater
than the number of sample in timeseries data, then it will return a
\f[V]std::vector<T>\f[R] having newly generated predictions.
.PP
\f[B]Return Value\f[R]
.PD 0
.P
.PD
It returns a \f[V]std::vector<T>\f[R] of predicted values.
.SS 4. std::vector forecast(size_t steps = 1)
.PP
\f[B]Parameters\f[R]
.PD 0
.P
.PD
\f[B]\f[BI]steps\f[B]\f[R]: A \f[V]size_t\f[R] parameter which specifies
the number of out of sample values to be predicted.
By default, it will be set as 1.
It must be greater than or equal to 1.
.PP
\f[B]Purpose\f[R]
.PD 0
.P
.PD
It is used to perform out of sample forecasting.
It is a wrapper function around predict().
.PP
\f[B]Return Value\f[R]
.PD 0
.P
.PD
It returns a \f[V]std::vector<T>\f[R] of out of sample forecasts.
