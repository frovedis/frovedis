.\" Automatically generated by Pandoc 2.17.1.1
.\"
.\" Define V font for inline verbatim, using C font in formats
.\" that render this, and otherwise B font.
.ie "\f[CB]x\f[]"x" \{\
. ftr V B
. ftr VI BI
. ftr VB B
. ftr VBI BI
.\}
.el \{\
. ftr V CR
. ftr VI CI
. ftr VB CB
. ftr VBI CBI
.\}
.TH "NearestNeighbors" "" "" "" ""
.hy
.SH NAME
.PP
NearestNeighbors - Unsupervised learner for implementing neighbor
searches.
.SH SYNOPSIS
.IP
.nf
\f[C]
class frovedis.mllib.neighbors.NearestNeighbors(n_neighbors=5, radius=1.0, algorithm=\[aq]auto\[aq],
                                                leaf_size=30, metric=\[aq]euclidean\[aq], p=2,
                                                metric_params=None, n_jobs=None, verbose=0,
                                                chunk_size=1.0, batch_fraction=None)  
\f[R]
.fi
.SS Public Member Functions
.PP
fit(X, y = None)
.PD 0
.P
.PD
kneighbors(X = None, n_neighbors = None, return_distance = True)
.PD 0
.P
.PD
kneighbors_graph(X = None, n_neighbors = None, mode = `connectivity')
.PD 0
.P
.PD
radius_neighbors(X = None, radius = None, return_distance = True)
.PD 0
.P
.PD
radius_neighbors_graph(X = None, radius = None, mode = `connectivity')
.PD 0
.P
.PD
get_params(deep = True)
.PD 0
.P
.PD
set_params(**params)
.PD 0
.P
.PD
save(fname)
.PD 0
.P
.PD
load(fname)
.PD 0
.P
.PD
debug_print()
.PD 0
.P
.PD
release()
.PD 0
.P
.PD
is_fitted()
.SH DESCRIPTION
.PP
Unsupervised nearest neighbors is the foundation of many other learning
methods, notably manifold learning and spectral clustering.
.PP
The principle behind nearest neighbor methods is to find a predefined
number of training samples closest in distance to the new point and
predict the label from these.
The number of samples can be a user-defined constant (k-nearest neighbor
learning), or vary based on the local density of points (radius-based
neighbor learning).
In general, the distance can be any metric measure: standard Euclidean
distance is the most common choice.
Neighbors-based methods are known as non-generalizing machine learning
methods, since they simply \[lq]remember\[rq] all of its training data.
.PP
This module provides a client-server implementation, where the client
application is a normal python program.
The frovedis interface is almost same as Scikit-learn NearestNeighbors
interface, but it doesn\[cq]t have any dependency with Scikit-learn.
It can be used simply even if the system doesn\[cq]t have Scikit-learn
installed.
Thus in this implementation, a python client can interact with a
frovedis server sending the required python data for training at
frovedis side.
Python data is converted into frovedis compatible data internally and
the python ML call is linked with the respective frovedis ML call to get
the job done at frovedis server.
.PP
Python side calls for NearestNeighbors on the frovedis server.
Once the training is completed with the input data at the frovedis
server, it returns an abstract model with a unique model ID to the
client python program.
.PP
When operations like kneighbors() will be required on the trained model,
python program will send the same request to the frovedis server.
After the request is served at the frovedis server, the output would be
sent back to the python client.
.SS Detailed Description
.SS 1. NearestNeighbors()
.PP
\f[B]Parameters\f[R]
.PD 0
.P
.PD
\f[B]\f[BI]n_neighbors\f[B]\f[R]: A positive integer parameter,
specifying the number of neighbors to use by default for `kneighbors'
queries.
It must be within the range of 0 and n_samples.
(Default: 5)
.PD 0
.P
.PD
\f[B]\f[BI]radius\f[B]\f[R]: A positive float parameter, specifying the
range of parameter space to use by default for `radius_neighbors'
queries.
(Default: 1.0)
.PD 0
.P
.PD
\f[B]\f[BI]algorithm\f[B]\f[R]: A string object parameter, specifying
the algorithm used to compute the nearest neighbors.
(Default: `auto')
.PD 0
.P
.PD
When it is `auto', it will be set as `brute'(brute-force search
approach).
Unlike Scikit-learn, currently it supports only `brute'.
.PD 0
.P
.PD
\f[B]\f[BI]leaf_size\f[B]\f[R]: An unsed parameter.
(Default: 30)
.PD 0
.P
.PD
\f[B]\f[BI]metric\f[B]\f[R]: A string object parameter, specifying the
distance metric to use for the tree.
(Default: `euclidean')
.PD 0
.P
.PD
Currenlty it only supports `euclidean', `seuclidean' and `cosine'
distance.
.PD 0
.P
.PD
\f[B]\f[BI]p\f[B]\f[R]: An unused parameter.
(Default: 2)
.PD 0
.P
.PD
\f[B]\f[BI]metric_params\f[B]\f[R]: An unsed parameter.
(Default: None)
.PD 0
.P
.PD
\f[B]\f[BI]n_jobs\f[B]\f[R]: An unsed parameter.
(Default: None)
.PD 0
.P
.PD
\f[B]\f[BI]verbose\f[B]\f[R]: An integer parameter specifying the log
level to use.
Its value is set as 0 by default (for INFO mode).
But it can be set to 1(for DEBUG mode) or 2(for TRACE mode) for getting
training time logs from frovedis server.
.PD 0
.P
.PD
\f[B]\f[BI]chunk_size\f[B]\f[R]: A positive float parameter, specifying
the amount of data (in megabytes) to be processed in one time.
(Default: 1.0)
.PD 0
.P
.PD
\f[B]\f[BI]batch_fraction\f[B]\f[R]: A positive double (float64)
parameter used to calculate the batches of specific size.
These batches are used to construct the distance matrix.
It must be within the range of 0.0 to 1.0.
(Default: None)
.PD 0
.P
.PD
When it is None (not specified explicitly), it will be set as
np.finfo(np.float64).max value.
.PP
\f[B]Purpose\f[R]
.PD 0
.P
.PD
It initializes a NearestNeighbors object with the given parameters.
.PP
The parameters: \[lq]leaf_size\[rq], \[lq]p\[rq],
\[lq]metric_params\[rq] and \[lq]n_jobs\[rq] are simply kept in to make
the interface uniform to the Scikit-learn NearestNeighbors module.
They are not used anywhere within the frovedis implementation.
.PP
\f[B]Return Value\f[R]
.PD 0
.P
.PD
It simply returns \[lq]self\[rq] reference.
.SS 2. fit(X, y = None)
.PP
\f[B]Parameters\f[R]
.PD 0
.P
.PD
\f[B]\f[BI]X\f[B]\f[R]: A numpy dense or scipy sparse matrix or any
python array-like object or an instance of FrovedisCRSMatrix for sparse
data and FrovedisRowmajorMatrix for dense data of float or double
(float64) type.
It has shape \f[B](n_samples, n_features)\f[R].
.PD 0
.P
.PD
\f[B]\f[BI]y\f[B]\f[R]: None or any python array-like object (any
shape).
It is simply ignored in frovedis implementation, like in Scikit-learn.
.PP
\f[B]Purpose\f[R]
.PD 0
.P
.PD
Fit the model using X as training data
.PP
For example,
.IP
.nf
\f[C]
# loading sample data 
samples = np.loadtxt(\[dq]./input/knn_data.txt\[dq], dtype = np.float64)

# fitting input data on NearestNeighbors object
from frovedis.mllib.neighbors import NearestNeighbors
knn = NearestNeighbors(n_neighbors = 3, radius = 2.0, algorithm = \[aq]brute\[aq], 
                       metric = \[aq]euclidean\[aq])
knn.fit(samples)
\f[R]
.fi
.PP
When native python data is provided, it is converted to frovedis-like
inputs and sent to frovedis server which consumes some data transfer
time.
Pre-constructed frovedis-like inputs can be used to speed up the
training time, especially when same data would be used for multiple
executions.
.PP
For example,
.IP
.nf
\f[C]
# loading sample data
samples = np.loadtxt(\[dq]./input/knn_data.txt\[dq], dtype = np.float64)

# Since \[dq]samples\[dq] is numpy dense data, we have created FrovedisRowmajorMatrix. 
# For scipy sparse data, FrovedisCRSMatrix should be used instead.
from frovedis.matrix.dense import FrovedisRowmajorMatrix
rmat = FrovedisRowmajorMatrix(samples)

# fitting input data on NearestNeighbors object
from frovedis.mllib.neighbors import NearestNeighbors
knn = NearestNeighbors(n_neighbors = 3, radius = 2.0, algorithm = \[aq]brute\[aq], 
                       metric = \[aq]euclidean\[aq])
knn.fit(rmat)
\f[R]
.fi
.PP
\f[B]Return Value\f[R]
.PD 0
.P
.PD
It simply returns \[lq]self\[rq] reference.
.SS 3. kneighbors(X = None, n_neighbors = None, return_distance = True)
.PP
\f[B]Parameters\f[R]
.PD 0
.P
.PD
\f[B]\f[BI]X\f[B]\f[R]: A numpy dense or scipy sparse matrix or any
python array-like object or an instance of FrovedisCRSMatrix for sparse
data and FrovedisRowmajorMatrix for dense data of float or double
(float64) type.
It has shape \f[B](n_queries, n_features)\f[R], where `n_queries' is the
number of rows in the test data.
(Default: None)
.PD 0
.P
.PD
When it is None (not specified explicitly), it will be training data (X)
used as input in fit().
.PD 0
.P
.PD
\f[B]\f[BI]n_neighbors\f[B]\f[R]: A positive integer parameter,
specifying the number of neighbors to use by default for `kneighbors'
queries.
It must be within the range of 0 and n_queries.
(Default: None)
.PD 0
.P
.PD
When it is None (not specified explicitly), it will be `n_neighbors'
value used during NearestNeighbors object creation.
.PD 0
.P
.PD
\f[B]\f[BI]return_distance\f[B]\f[R]: A boolean parameter specifying
whether or not to return the distances.
(Default: True)
.PD 0
.P
.PD
If set to False, it will not return distances.
Then, only indices are returned by this method.
.PP
\f[B]Purpose\f[R]
.PD 0
.P
.PD
It finds the k-Neighbors of a point and returns the indices of neighbors
and distances to the neighbors of each point.
.PP
For example,
.IP
.nf
\f[C]
distances, indices = knn.kneighbors(samples)
print(\[aq]distances\[aq])
print(distances)
print(\[aq]indices\[aq])
print(indices)
\f[R]
.fi
.PP
Output
.IP
.nf
\f[C]
distances
[[0.         1.         2.23606798]
 [0.         1.         1.41421356]
 [0.         1.41421356 2.23606798]
 [0.         1.         2.23606798]
 [0.         1.         1.41421356]
 [0.         1.41421356 2.23606798]]
 [[0.         1.         2.23606798]
indices
 [[0 1 2]
 [1 0 2]
 [2 1 0]
 [3 4 5]
 [4 3 5]
 [5 4 3]]
\f[R]
.fi
.PP
Like in fit(), frovedis-like input can be used to speed-up the
computation of indices and distances at server side.
.PP
For example,
.IP
.nf
\f[C]
# Since \[dq]samples\[dq] is numpy dense data, we have created FrovedisRowmajorMatrix. 
# For scipy sparse data, FrovedisCRSMatrix should be used instead.
from frovedis.matrix.dense import FrovedisRowmajorMatrix
rmat = FrovedisRowmajorMatrix(samples)

distances, indices = knn.kneighbors(rmat)

# Here FrovedisRowmajorMatrix().debug_print() is used 
print(\[aq]distances\[aq])
distances.debug_print()

# Here FrovedisRowmajorMatrix().debug_print() is used     
print(\[aq]indices\[aq])    
indices.debug_print()
\f[R]
.fi
.PP
Output
.IP
.nf
\f[C]
distances
matrix:
num_row = 6, num_col = 3
node 0
node = 0, local_num_row = 6, local_num_col = 3, val = 0 1 2.23607 0 1 1.41421 0 1.41421 
2.23607 0 1 2.23607 0 1 1.41421 0 1.41421 2.23607
indices
matrix:
num_row = 6, num_col = 3
node 0
node = 0, local_num_row = 6, local_num_col = 3, val = 0 1 2 1 0 2 2 1 0 3 4 5 4 3 5 5 4 3  
\f[R]
.fi
.PP
\f[B]Return Value\f[R]
.PD 0
.P
.PD
1.
\f[B]When test data and training data used by fitted model are python
native input:\f[R]
.PD 0
.P
.PD
- \f[B]\f[BI]distances\f[B]\f[R]: A numpy array of float or
double(float64) type values.
It has shape \f[B](n_queries, n_neighbors)\f[R], where `n_queries' is
the number of rows in the test data.
It is only returned by kneighbors() if return_distance = True.
.PD 0
.P
.PD
- \f[B]\f[BI]indices\f[B]\f[R]: A numpy array of int64 type values.
It has shape \f[B](n_queries, n_neighbors)\f[R], where `n_queries' is
the number of rows in the test data.
.PD 0
.P
.PD
2.
\f[B]When either test data or training data used by fitted model is
frovedis-like input:\f[R]
.PD 0
.P
.PD
- \f[B]\f[BI]distances\f[B]\f[R]: A FrovedisRowmajorMatrix of float or
double(float64) type values.
It has shape \f[B](n_queries, n_neighbors)\f[R], where `n_queries' is
the number of rows in the test data.
It is only returned by kneighbors() if return_distance = True.
.PD 0
.P
.PD
- \f[B]\f[BI]indices\f[B]\f[R]: A FrovedisRowmajorMatrix of int64 type
values.
It has shape \f[B](n_queries, n_neighbors)\f[R], where `n_queries' is
the number of rows in the test data.
.SS 4. kneighbors_graph(X = None, n_neighbors = None, mode = `connectivity')
.PP
\f[B]Parameters\f[R]
.PD 0
.P
.PD
\f[B]\f[BI]X\f[B]\f[R]: A numpy dense or scipy sparse matrix or any
python array-like object or an instance of FrovedisCRSMatrix for sparse
data and FrovedisRowmajorMatrix for dense data of float or double
(float64) type.
It has shape \f[B](n_queries, n_features)\f[R], where `n_queries' is the
number of rows in the test data.
(Default: None)
.PD 0
.P
.PD
When it is None (not specified explicitly), it will be training data (X)
used as input in fit().
.PD 0
.P
.PD
\f[B]\f[BI]n_neighbors\f[B]\f[R]: A positive integer parameter,
specifying the number of neighbors to use by default for `kneighbors'
queries.
It must be within the range of 0 and n_queries.
(Default: None)
.PD 0
.P
.PD
When it is None (not specified explicitly), it will be `n_neighbors'
value used during NearestNeighbors object creation.
.PD 0
.P
.PD
\f[B]\f[BI]mode\f[B]\f[R]: A string object parameter which can be either
`connectivity' or `distance'.
It specifies the type of returned matrix.
.PD 0
.P
.PD
For `connectivity', it will return the connectivity matrix with ones and
zeros, whereas for `distance', the edges are euclidean distance between
points.
Type of distance depends on the selected `metric' value in
NearestNeighbors class.
(Default: `connectivity')
.PP
\f[B]Purpose\f[R]
.PD 0
.P
.PD
It computes the (weighted) graph of k-Neighbors for points in X.
.PP
For example, when mode = `connectivity'
.IP
.nf
\f[C]
# Here \[aq]mode = connectivity\[aq] by default
graph = knn.kneighbors_graph(samples)
print(\[aq]kneighbors graph\[aq])
print(graph)
\f[R]
.fi
.PP
Output
.IP
.nf
\f[C]
kneighbors graph
(0, 0)        1.0
(0, 1)        1.0
(0, 2)        1.0
(1, 1)        1.0
(1, 0)        1.0
(1, 2)        1.0
(2, 2)        1.0
(2, 1)        1.0
(2, 0)        1.0
(3, 3)        1.0
(3, 4)        1.0
(3, 5)        1.0
(4, 4)        1.0
(4, 3)        1.0
(4, 5)        1.0
(5, 5)        1.0
(5, 4)        1.0
(5, 3)        1.0
\f[R]
.fi
.PP
For example, when mode = `distance'
.IP
.nf
\f[C]
# Here \[aq]mode = distance\[aq]  
graph = knn.kneighbors_graph(samples, mode = \[aq]distance\[aq])
print(\[aq]kneighbors graph\[aq])
print(graph)
\f[R]
.fi
.PP
Output
.IP
.nf
\f[C]
kneighbors graph
(0, 0)        0.0
(0, 1)        1.0
(0, 2)        2.23606797749979
(1, 1)        0.0
(1, 0)        1.0
(1, 2)        1.4142135623730951
(2, 2)        0.0
(2, 1)        1.4142135623730951
(2, 0)        2.23606797749979
(3, 3)        0.0
(3, 4)        1.0
(3, 5)        2.23606797749979
(4, 4)        0.0
(4, 3)        1.0
(4, 5)        1.4142135623730951
(5, 5)        0.0
(5, 4)        1.4142135623730951
(5, 3)        2.23606797749979
\f[R]
.fi
.PP
Like in fit(), frovedis-like input can be used to speed-up the graph
construction at server side.
.PP
For example,
.IP
.nf
\f[C]
# Since \[dq]samples\[dq] is numpy dense data, we have created FrovedisRowmajorMatrix. 
# For scipy sparse data, FrovedisCRSMatrix should be used instead.
from frovedis.matrix.dense import FrovedisRowmajorMatrix
rmat = FrovedisRowmajorMatrix(samples)

# Here \[aq]mode = connectivity\[aq] by default
graph = knn.kneighbors_graph(rmat)
print(\[aq]kneighbors graph\[aq])

# Here FrovedisCRSMatrix().debug_print() is used 
graph.debug_print()
\f[R]
.fi
.PP
Output
.IP
.nf
\f[C]
graph
Active Elements:  18
matrix:
num_row = 6, num_col = 6
node 0
local_num_row = 6, local_num_col = 6
val : 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
idx : 0 1 2 1 0 2 2 1 0 3 4 5 4 3 5 5 4 3
off : 0 3 6 9 12 15 18  
\f[R]
.fi
.PP
\f[B]Return Value\f[R]
.PD 0
.P
.PD
- \f[B]When test data and training data used by fitted model are python
native input :\f[R]
.PD 0
.P
.PD
It returns a scipy sparse csr matrix of float or double (float64) type
values.
It has shape \f[B](n_queries, n_samples_fit)\f[R], where `n_queries' is
the number of rows in the test data and `n_samples_fit' is the number of
samples in the fitted data.
.PD 0
.P
.PD
- \f[B]When either test data or training data used by fitted model is
frovedis-like input:\f[R]
.PD 0
.P
.PD
It returns a FrovedisCRSMatrix of float or double(float64) type values.
It has shape \f[B](n_queries, n_samples_fit)\f[R], where `n_queries' is
the number of rows in the test data and `n_samples_fit' is the number of
samples in the fitted data.
.SS 5. radius_neighbors(X = None, radius = None, return_distance = True)
.PP
\f[B]Parameters\f[R]
.PD 0
.P
.PD
\f[B]\f[BI]X\f[B]\f[R]: A numpy dense or scipy sparse matrix or any
python array-like object or an instance of FrovedisCRSMatrix for sparse
data and FrovedisRowmajorMatrix for dense data of float or double
(float64) type.
It has shape \f[B](n_samples, n_features)\f[R].
(Default: None)
.PD 0
.P
.PD
When it is None (not specified explicitly), it will be training data (X)
used as input in fit().
.PD 0
.P
.PD
\f[B]\f[BI]radius\f[B]\f[R]: A positive float parameter, specifying the
limiting distance of neighbors to return.
(Default: None)
.PD 0
.P
.PD
When it is None (not specified explicitly), it will be `radius' value
used in NearestNeighbors object creation.
.PD 0
.P
.PD
\f[B]\f[BI]return_distance\f[B]\f[R]: A boolean parameter specifying
whether or not to return the distances.
(Default: True)
.PD 0
.P
.PD
If set to False, it will not return distances.
Then, only indices are returned by this method.
.PP
\f[B]Purpose\f[R]
.PD 0
.P
.PD
It finds the neighbors within a given radius of a point or points and
returns indices and distances to the neighbors of each point.
.PP
For example,
.IP
.nf
\f[C]
dist, ind = knn.radius_neighbors(samples)
print(\[aq]radius neighbors\[aq])
for i in range(len(dist)):
    print(dist[i])
    print(ind[i])
\f[R]
.fi
.PP
Output
.IP
.nf
\f[C]
radius neighbors
[0. 1.]
[0 1]
[1.         0.         1.41421356]
[0 1 2]
[1.41421356 0.        ]
[1 2]
[0. 1.]
[3 4]
[1.         0.         1.41421356]
[3 4 5]
[1.41421356 0.        ]
[4 5]
\f[R]
.fi
.PP
Like in fit(), frovedis-like input can be used to speed-up the
computation of indices and distances at server side.
.PP
For example,
.IP
.nf
\f[C]
# Since \[dq]samples\[dq] is numpy dense data, we have created FrovedisRowmajorMatrix. 
# For scipy sparse data, FrovedisCRSMatrix should be used instead.
from frovedis.matrix.dense import FrovedisRowmajorMatrix
rmat = FrovedisRowmajorMatrix(samples)

rad_nbs = knn.radius_neighbors(rmat)
print(\[aq]radius neighbors\[aq])

# Here FrovedisCRSMatrix().debug_print() is used  
rad_nbs.debug_print()
\f[R]
.fi
.PP
Output
.IP
.nf
\f[C]
radius neighbors
Active Elements:  14
matrix:
num_row = 6, num_col = 6
node 0
local_num_row = 6, local_num_col = 6
val : 0 1 1 0 1.41421 1.41421 0 0 1 1 0 1.41421 1.41421 0
idx : 0 1 0 1 2 1 2 3 4 3 4 5 4 5
off : 0 2 5 7 9 12 14
\f[R]
.fi
.PP
\f[B]Return Value\f[R]
.PD 0
.P
.PD
1.
\f[B]When test data and training data used by fitted model are python
native input :\f[R]
.PD 0
.P
.PD
- \f[B]\f[BI]distance\f[B]\f[R]: A python list of float or
double(float64) type values and has length \f[B]n_samples\f[R].
It is only returned by radius_neighbors() if return_distance = True.
.PD 0
.P
.PD
- \f[B]\f[BI]indices\f[B]\f[R]: A python list of float or
double(float64) type values and has length \f[B]n_samples\f[R].
.PD 0
.P
.PD
2.
\f[B]When either test data or training data used by fitted model is
frovedis-like input:\f[R]
.PD 0
.P
.PD
It returns a FrovedisCRSMatrix of shape \f[B](n_samples,
n_samples_fit)\f[R], where `n_samples_fit' is the number of samples in
the fitted data.
.SS 6. radius_neighbors_graph(X = None, radius = None, mode = `connectivity')
.PP
\f[B]Parameters\f[R]
.PD 0
.P
.PD
\f[B]\f[BI]X\f[B]\f[R]: A numpy dense or scipy sparse matrix or any
python array-like object or an instance of FrovedisCRSMatrix for sparse
data and FrovedisRowmajorMatrix for dense data of float or double
(float64) type.
It has shape \f[B](n_samples, n_features)\f[R].
(Default: None)
.PD 0
.P
.PD
When it is None (not specified explicitly), it will be training data (X)
used as input in fit().
.PD 0
.P
.PD
\f[B]\f[BI]radius\f[B]\f[R]: A positive float parameter, specifying the
limiting distance of neighbors to return.
(Default: None)
.PD 0
.P
.PD
When it is None (not specified explicitly), it will be `radius' value
used in NearestNeighbors object creation.
.PD 0
.P
.PD
\f[B]\f[BI]mode\f[B]\f[R]: A string object parameter which can be either
`connectivity' or `distance'.
It specifies the type of returned matrix.
.PD 0
.P
.PD
For `connectivity', it will return the connectivity matrix with ones and
zeros, whereas for `distance', the edges are euclidean distance between
points.
Type of distance depends on the selected `metric' value in
NearestNeighbors class.
(Default: `connectivity')
.PP
\f[B]Purpose\f[R]
.PD 0
.P
.PD
It computes the (weighted) graph of Neighbors for points in X.
.PP
For example, when mode = `connectivity'
.IP
.nf
\f[C]
# Here \[aq]mode = connectivity\[aq] by default
rad_graph = knn.radius_neighbors_graph(samples)
print(\[aq]radius neighbors graph\[aq])
print(rad_graph)
\f[R]
.fi
.PP
Output
.IP
.nf
\f[C]
radius neighbors graph
(0, 0)        1.0
(0, 1)        1.0
(1, 0)        1.0
(1, 1)        1.0
(1, 2)        1.0
(2, 1)        1.0
(2, 2)        1.0
(3, 3)        1.0
(3, 4)        1.0
(4, 3)        1.0
(4, 4)        1.0
(4, 5)        1.0
(5, 4)        1.0
(5, 5)        1.0
\f[R]
.fi
.PP
For example, when mode = `distance'
.IP
.nf
\f[C]
# Here \[aq]mode = distance\[aq]
rad_graph = knn.radius_neighbors_graph(samples, mode = \[aq]distance\[aq])
print(\[aq]radius neighbors graph\[aq])
print(rad_graph)
\f[R]
.fi
.PP
Output
.IP
.nf
\f[C]
radius neighbors graph
(0, 0)        0.0
(0, 1)        1.0
(1, 0)        1.0
(1, 1)        0.0
(1, 2)        1.4142135623730951
(2, 1)        1.4142135623730951
(2, 2)        0.0
(3, 3)        0.0
(3, 4)        1.0
(4, 3)        1.0
(4, 4)        0.0
(4, 5)        1.4142135623730951
(5, 4)        1.4142135623730951
(5, 5)        0.0
\f[R]
.fi
.PP
Like in fit(), frovedis-like input can be used to speed-up the
computation of graph construction at server side.
.PP
For example,
.IP
.nf
\f[C]
# Since \[dq]samples\[dq] is numpy dense data, we have created FrovedisRowmajorMatrix. 
# For scipy sparse data, FrovedisCRSMatrix should be used instead.
from frovedis.matrix.dense import FrovedisRowmajorMatrix
rmat = FrovedisRowmajorMatrix(samples)

# Here \[aq]mode = connectivity\[aq] by default
rad_graph = knn.radius_neighbors_graph(samples)
print(\[aq]radius neighbors graph\[aq])

# Here FrovedisCRSMatrix().debug_print() is used  
rad_graph.debug_print()
\f[R]
.fi
.PP
Output
.IP
.nf
\f[C]
radius neighbors graph
Active Elements:  14
matrix:
num_row = 6, num_col = 6
node 0
local_num_row = 6, local_num_col = 6
val : 1 1 1 1 1 1 1 1 1 1 1 1 1 1
idx : 0 1 0 1 2 1 2 3 4 3 4 5 4 5
off : 0 2 5 7 9 12 14  
\f[R]
.fi
.PP
\f[B]Return Value\f[R]
.PD 0
.P
.PD
- \f[B]When test data and training data used by fitted model are python
native input :\f[R]
.PD 0
.P
.PD
It returns a scipy sparse csr matrix of float or double(float64) type
values.
It has shape \f[B](n_queries, n_samples_fit)\f[R], where `n_queries' is
the number of rows in the test data and `n_samples_fit' is the number of
samples in the fitted data.
.PD 0
.P
.PD
- \f[B]When either test data or training data used by fitted model is
frovedis-like input:\f[R]
.PD 0
.P
.PD
It returns a FrovedisCRSMatrix of float or double(float64) type values.
It has shape \f[B](n_queries, n_samples_fit)\f[R], where `n_queries' is
the number of rows in the test data and `n_samples_fit' is the number of
samples in the fitted data.
.SS 7. get_params(deep = True)
.PP
\f[B]Parameters\f[R]
.PD 0
.P
.PD
\f[I]\f[BI]deep\f[I]\f[R]: A boolean parameter, used to get parameters
and their values for an estimator.
If True, it will return the parameters for an estimator and contained
subobjects that are estimators.
(Default: True)
.PP
\f[B]Purpose\f[R]
.PD 0
.P
.PD
This method belongs to the BaseEstimator class inherited by
NearestNeighbors.
It is used to get parameters and their values of NearestNeighbors class.
.PP
For example,
.IP
.nf
\f[C]
print(knn.get_params())
\f[R]
.fi
.PP
Output
.IP
.nf
\f[C]
{\[aq]algorithm\[aq]: \[aq]brute\[aq], \[aq]batch_fraction\[aq]: 1.7976931348623157e+308, \[aq]chunk_size\[aq]: 1.0, 
\[aq]leaf_size\[aq]: 30, \[aq]metric\[aq]: \[aq]euclidean\[aq], \[aq]metric_params\[aq]: None, \[aq]n_jobs\[aq]: None, 
\[aq]n_neighbors\[aq]: 3, \[aq]p\[aq]: 2, \[aq]radius\[aq]: 2.0, \[aq]verbose\[aq]: 0}
\f[R]
.fi
.PP
\f[B]Return Value\f[R]
.PD 0
.P
.PD
A dictionary of parameter names mapped to their values.
.SS 8. set_params(**params)
.PP
\f[B]Parameters\f[R]
.PD 0
.P
.PD
\f[I]\f[BI]**params\f[I]\f[R]: All the keyword arguments are passed to
this function as dictionary.
This dictionary contains parameters of an estimator with its given
values to set.
.PP
\f[B]Purpose\f[R]
.PD 0
.P
.PD
This method belongs to the BaseEstimator class inherited by
NearestNeighbors, used to set parameter values.
.PP
For example,
.IP
.nf
\f[C]
print(\[dq]get parameters before setting:\[dq]) 
print(knn.get_params())
# User just needs to provide the arguments and internally it will create a 
dictionary over the arguments given by user
knn.set_params(n_neighbors = 4, radius = 1.0) 
print(\[dq]get parameters after setting:\[dq]) 
print(knn.get_params())
\f[R]
.fi
.PP
Output
.IP
.nf
\f[C]
get parameters before setting: 
{\[aq]algorithm\[aq]: \[aq]brute\[aq], \[aq]batch_fraction\[aq]: 1.7976931348623157e+308, \[aq]chunk_size\[aq]: 1.0,
\[aq]leaf_size\[aq]: 30, \[aq]metric\[aq]: \[aq]euclidean\[aq], \[aq]metric_params\[aq]: None, \[aq]n_jobs\[aq]: None, 
\[aq]n_neighbors\[aq]: 3, \[aq]p\[aq]: 2, \[aq]radius\[aq]: 2.0, \[aq]verbose\[aq]: 0}
get parameters after setting: 
{\[aq]algorithm\[aq]: \[aq]brute\[aq], \[aq]batch_fraction\[aq]: 1.7976931348623157e+308, \[aq]chunk_size\[aq]: 1.0,
\[aq]leaf_size\[aq]: 30, \[aq]metric\[aq]: \[aq]euclidean\[aq], \[aq]metric_params\[aq]: None, \[aq]n_jobs\[aq]: None, 
\[aq]n_neighbors\[aq]: 4, \[aq]p\[aq]: 2, \[aq]radius\[aq]: 1.0, \[aq]verbose\[aq]: 0} 
\f[R]
.fi
.PP
\f[B]Return Value\f[R]
.PD 0
.P
.PD
It simply returns \[lq]self\[rq] reference.
.SS 9. save(fname)
.PP
\f[B]Parameters\f[R]
.PD 0
.P
.PD
\f[B]\f[BI]fname\f[B]\f[R]: A string object containing the name of the
file on which the target model is to be saved.
.PP
\f[B]Purpose\f[R]
.PD 0
.P
.PD
Currently this method is not supported for NearestNeighbors.
It is simply kept in NearestNeighbors module to maintain uniform
interface for all estimators in frovedis.
.PP
\f[B]Return Value\f[R]
.PD 0
.P
.PD
It simply raises an AttributeError.
.SS 10. load(fname)
.PP
\f[B]Parameters\f[R]
.PD 0
.P
.PD
\f[B]\f[BI]fname\f[B]\f[R]: A string object containing the name of the
file having model information to be loaded.
.PP
\f[B]Purpose\f[R]
.PD 0
.P
.PD
Currently this method is not supported for NearestNeighbors.
It is simply kept in NearestNeighbors module to maintain uniform
interface for all estimators in frovedis.
.PP
\f[B]Return Value\f[R]
.PD 0
.P
.PD
It simply raises an AttributeError.
.SS 11. debug_print()
.PP
\f[B]Purpose\f[R]
.PD 0
.P
.PD
Currently this method is not supported for NearestNeighbors.
It is simply kept in NearestNeighbors module to maintain uniform
interface for all estimators in frovedis.
.PP
\f[B]Return Value\f[R]
.PD 0
.P
.PD
It simply raises an AttributeError.
.SS 12. release()
.PP
\f[B]Purpose\f[R]
.PD 0
.P
.PD
It can be used to release the in-memory model at frovedis server.
.PP
For example,
.IP
.nf
\f[C]
knn.release()
\f[R]
.fi
.PP
This will remove the trained model, model-id present on server, along
with releasing server side memory.
.PP
\f[B]Return Value\f[R]
.PD 0
.P
.PD
It returns nothing.
.SS 13. is_fitted()
.PP
\f[B]Purpose\f[R]
.PD 0
.P
.PD
It can be used to confirm if the model is already fitted or not.
.PP
\f[B]Return Value\f[R]
.PD 0
.P
.PD
It returns `True', if the model is already fitted, otherwise, it returns
`False'.
.SH SEE ALSO
.IP \[bu] 2
\f[B]Introduction to FrovedisRowmajorMatrix\f[R]
.PD 0
.P
.PD
.IP \[bu] 2
\f[B]Introduction to FrovedisCRSMatrix\f[R]
.PD 0
.P
.PD
.IP \[bu] 2
\f[B]KNeighbors Classifier in Frovedis\f[R]
.PD 0
.P
.PD
.IP \[bu] 2
\f[B]KNeighbors Regressor in Frovedis\f[R]
