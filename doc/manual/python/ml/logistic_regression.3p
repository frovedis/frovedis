.\" Automatically generated by Pandoc 2.17.1.1
.\"
.\" Define V font for inline verbatim, using C font in formats
.\" that render this, and otherwise B font.
.ie "\f[CB]x\f[]"x" \{\
. ftr V B
. ftr VI BI
. ftr VB B
. ftr VBI BI
.\}
.el \{\
. ftr V CR
. ftr VI CI
. ftr VB CB
. ftr VBI CBI
.\}
.TH "Logistic Regression" "" "" "" ""
.hy
.SH NAME
.PP
Logistic Regression - A classification algorithm to predict the binary
and multi-class output with logistic loss.
.SH SYNOPSIS
.IP
.nf
\f[C]
class frovedis.mllib.linear_model.LogisticRegression(penalty=\[aq]l2\[aq], dual=False, tol=1e-4,  
                                                     C=100.0, fit_intercept=True,
                                                     intercept_scaling=1, class_weight=None,
                                                     random_state=None, solver=\[aq]lbfgs\[aq],
                                                     max_iter=1000, multi_class=\[aq]auto\[aq],
                                                     verbose=0, warm_start=False,
                                                     n_jobs=1, l1_ratio=None,
                                                     lr_rate=0.01, use_shrink=False)  
\f[R]
.fi
.SS Public Member Functions
.PP
fit(X, y, sample_weight = None)
.PD 0
.P
.PD
predict(X)
.PD 0
.P
.PD
predict_proba(X)
.PD 0
.P
.PD
score(X, y, sample_weight = None)
.PD 0
.P
.PD
get_params(deep = True)
.PD 0
.P
.PD
set_params(**params)
.PD 0
.P
.PD
load(fname, dtype = None)
.PD 0
.P
.PD
save(fname)
.PD 0
.P
.PD
debug_print()
.PD 0
.P
.PD
release()
.PD 0
.P
.PD
is_fitted()
.SH DESCRIPTION
.PP
Classification aims to divide the items into categories.
The most common classification type is binary classification, where
there are two categories, usually named positive and negative.
The other is multinomial classification, where there are more than two
categories.
\f[B]Frovedis supports both binary and multinomial logistic regression
algorithms.\f[R] For multinomial classification, it uses softmax
probability.
.PP
Logistic regression is widely used to predict a binary response.
It is a linear method with the loss function given by the \f[B]logistic
loss\f[R]:
.IP
.nf
\f[C]
L(w;x,y) := log(1 + exp(-ywTx))    
\f[R]
.fi
.PP
During training, the input \f[B]X\f[R] is the training data and
\f[B]y\f[R] is the corresponding label values (Frovedis supports any
values as for labels, but internally it encodes the input binary labels
to -1 and 1, and input multinomial labels to 0, 1, 2, \&..., N-1 (where
N is the no.
of classes) before training at Frovedis server) which we want to
predict.
\f[B]w\f[R] is the linear model (also called as weight) which uses a
single weighted sum of features to make a prediction.
\f[B]Frovedis Logistic Regression supports ZERO, L1 and L2
regularization to address the overfit problem.
However, LBFGS solver supports only L2 regularization.\f[R]
.PP
The gradient of the logistic loss is: \f[B]-y( 1 - 1 / (1 +
exp(-ywTx))).x\f[R]
.PD 0
.P
.PD
The gradient of the L1 regularizer is: \f[B]sign(w)\f[R]
.PD 0
.P
.PD
And, the gradient of the L2 regularizer is: \f[B]w\f[R]
.PP
For binary classification problems, the algorithm outputs a binary
logistic regression model.
Given a new data point, denoted by x, the model makes predictions by
applying the logistic function:
.IP
.nf
\f[C]
f(z) := 1 / 1 + exp(-z)  
\f[R]
.fi
.PP
Where z = wTx.
By default (threshold=0.5), if f(wTx) > 0.5, the response is positive
(1), else the response is negative (0).
.PP
In the multiclass case, the training algorithm uses the one-vs-rest
(OvR) scheme.
Currently the \[lq]multinomial\[rq] option is supported only by the
\[lq]sag\[rq] solvers.
.PD 0
.P
.PD
Frovedis provides implementation of logistic regression with two
different optimizers:
.PD 0
.P
.PD
(1) stochastic gradient descent with minibatch
.PD 0
.P
.PD
(2) LBFGS optimizer
.PD 0
.P
.PD
They can handle both dense and sparse input.
.PP
The simplest method to solve optimization problems of the form \f[B]min
f(w)\f[R] is gradient descent.
Such first-order optimization methods well-suited for large-scale and
distributed computation.
Whereas, L-BFGS is an optimization algorithm in the family of
quasi-Newton methods to solve the optimization problems of the similar
form.
.PP
Like the original BFGS, L-BFGS (Limited Memory BFGS) uses an estimation
to the inverse Hessian matrix to steer its search through feature space,
but where BFGS stores a dense nxn approximation to the inverse Hessian
(n being the number of features in the problem), L-BFGS stores only a
few vectors that represent the approximation implicitly.
L-BFGS often achieves rapider convergence compared with other
first-order optimization.
.PP
This module provides a client-server implementation, where the client
application is a normal python program.
The frovedis interface is almost same as Scikit-learn Logistic
Regression interface, but it doesn\[cq]t have any dependency with
Scikit-learn.
It can be used simply even if the system doesn\[cq]t have Scikit-learn
installed.
Thus in this implementation, a python client can interact with a
frovedis server sending the required python data for training at
frovedis side.
Python data is converted into frovedis compatible data internally and
the python ML call is linked with the respective frovedis ML call to get
the job done at frovedis server.
.PP
Python side calls for Logistic Regression on the frovedis server.
Once the training is completed with the input data at the frovedis
server, it returns an abstract model with a unique model ID to the
client python program.
.PP
When prediction-like request would be made on the trained model, python
program will send the same request to the frovedis server.
After the request is served at the frovedis server, the output would be
sent back to the python client.
.SS Detailed Description
.SS 1. LogisticRegression()
.PP
\f[B]Parameters\f[R]
.PD 0
.P
.PD
\f[B]\f[BI]penalty\f[B]\f[R]: A string object containing the regularizer
type to use.
Currenlty none, l1 and l2 are supported by Frovedis.
(Default: `l2')
.PD 0
.P
.PD
\f[B]\f[BI]dual\f[B]\f[R]: A boolean parameter.
(unused)
.PD 0
.P
.PD
\f[B]\f[BI]tol\f[B]\f[R]: A double (float64) type value specifying the
convergence tolerance value.
It must be zero or a postive value.
(Default: 1e-4)
.PD 0
.P
.PD
\f[B]\f[BI]C\f[B]\f[R]: A positive float parameter, it is the inverse of
regularization strength.
Like in support vector machines, smaller values specify stronger
regularization.
(Default: 100.0)
.PD 0
.P
.PD
\f[B]\f[BI]fit_intercept\f[B]\f[R]: A boolean parameter specifying
whether a constant (intercept) should be added to the decision function.
(Default: True)
.PD 0
.P
.PD
\f[B]\f[BI]intercept_scaling\f[B]\f[R]: An unused parameter.
(Default: 1)
.PD 0
.P
.PD
\f[B]\f[BI]class_weight\f[B]\f[R]: An unused parameter.
(Default: None)
.PD 0
.P
.PD
\f[B]\f[BI]random_state\f[B]\f[R]: An unused parameter.
(Default: None)
.PD 0
.P
.PD
\f[B]\f[BI]solver\f[B]\f[R]: A string object specifying the solver to
use.
(Default: `lbfgs')
.PD 0
.P
.PD
It can be \[lq]sag\[rq] for frovedis side stochastic gradient descent or
\[lq]lbfgs\[rq] for frovedis side LBFGS optimizer when optimizing the
logistic regression model.
.PD 0
.P
.PD
\[lq]sag\[rq] can handle L1, L2 or no penalty.
.PD 0
.P
.PD
\[lq]lbfgs\[rq] can handle only L2 penalty.
.PD 0
.P
.PD
\f[B]\f[BI]max_iter\f[B]\f[R]: A positive integer value specifying
maximum iteration count.
(Default: 1000)
.PD 0
.P
.PD
\f[B]\f[BI]multi_class\f[B]\f[R]: A string object specifying the type of
classification.
- If it is \[lq]auto\[rq] or \[lq]ovr\[rq], then a binary classification
is selected when N = 2, otherwise multinomial classification is selected
(where N is the no.
of classes in training labels).
- If it is \[lq]multinomial\[rq], then it always selects a multinomial
problem (even when N = 2).
Only \[lq]sag\[rq] solvers support multinomial classification currently.
(Default: `auto')
.PP
\f[B]\f[BI]verbose\f[B]\f[R]: An integer parameter specifying the log
level to use.
Its value is 0 by default (for INFO mode and not explicitly specified).
But it can be set to 1 (for DEBUG mode) or 2 (for TRACE mode) for
getting training time logs from frovedis server.
.PD 0
.P
.PD
\f[B]\f[BI]warm_start\f[B]\f[R]: A boolean parameter which when set to
True, reuses the solution of the previous call to fit as initialization,
otherwise, just erase the previous solution.
(Default: False)
.PD 0
.P
.PD
\f[B]\f[BI]n_jobs\f[B]\f[R]: An unused parameter.
(Default: 1)
.PD 0
.P
.PD
\f[B]\f[BI]l1_ratio\f[B]\f[R]: An unused parameter.
(Default: None)
.PD 0
.P
.PD
\f[B]\f[BI]lr_rate(alpha)\f[B]\f[R]: A double (float64) parameter
containing the learning rate.
(Default: 0.01)
.PD 0
.P
.PD
\f[B]\f[BI]use_shrink\f[B]\f[R]: A boolean parameter applicable only for
\[lq]sag\[rq] solver with \[lq]sparse\[rq] input (X).
When set to True for sparse input, it can improve training performance
by reducing communication overhead across participating processes.
(Default: False)
.PP
\f[B]Attributes\f[R]
.PD 0
.P
.PD
\f[B]\f[BI]coef_\f[B]\f[R]: It is a python ndarray (float or double
(float64) values depending on input matrix data type) of coefficient of
the features in the decision function.
It has shape \f[B](1, n_features)\f[R] when the given problem is
\[lq]binary\[rq] and \f[B](n_classes, n_features)\f[R] when it is a
\[lq]multinomial\[rq] problem.
.PD 0
.P
.PD
\f[B]\f[BI]intercept_(bias)\f[B]\f[R]: It is a python ndarray(float or
double (float64) values depending on input matrix data type) If
fit_intercept is set to False, the intercept is set to zero.
It has shape \f[B](1,)\f[R] when the given problem is \[lq]binary\[rq]
and (n_classes) when its \[lq]multinomial\[rq] problem.
.PD 0
.P
.PD
\f[B]\f[BI]classes_\f[B]\f[R]: It is a python ndarray (any type) of
unique labels given to the classifier during training.
It has shape \f[B](n_classes,)\f[R].
.PD 0
.P
.PD
\f[B]\f[BI]n_iter_\f[B]\f[R]: It is a python ndarray of shape
\f[B](1,)\f[R] and has integer data.
It is used to get the actual iteration point at which the problem is
converged.
.PP
\f[B]Purpose\f[R]
.PD 0
.P
.PD
It initializes a Logistic Regression object with the given parameters.
.PP
The parameters: \[lq]dual\[rq], \[lq]intercept_scaling\[rq],
\[lq]class_weight\[rq], \[lq]random_state\[rq], \[lq]n_jobs\[rq] and
\[lq]l1_ratio\[rq] are simply kept to make the interface uniform to the
Scikit-learn Logistic Regression module.
They are not used anywhere within the frovedis implementation.
.PP
\f[B]Return Value\f[R]
.PD 0
.P
.PD
It simply returns \[lq]self\[rq] reference.
.SS 2. fit(X, y, sample_weight = None)
.PP
\f[B]Parameters\f[R]
.PD 0
.P
.PD
\f[B]\f[BI]X\f[B]\f[R]: A numpy dense or scipy sparse matrix or any
python array-like object or an instance of FrovedisCRSMatrix for sparse
data and FrovedisColmajorMatrix for dense data.
.PD 0
.P
.PD
\f[B]\f[BI]y\f[B]\f[R]: Any python array-like object or an instance of
FrovedisDvector containing target labels.
It has shape \f[B](n_samples,)\f[R].
.PD 0
.P
.PD
\f[B]\f[BI]sample_weight\f[B]\f[R]: A python ndarray containing the
intended weights for each input samples and it should be the shape of
\f[B](n_samples,)\f[R].
.PD 0
.P
.PD
When it is None (not specified explicitly), an uniform weight vector is
assigned on each input sample.
(Default: None)
.PP
\f[B]Purpose\f[R]
.PD 0
.P
.PD
It accepts the training feature matrix (X) and corresponding output
labels (y) as inputs from the user and trains a logistic regression
model with specified regularization with those data at frovedis server.
.PP
For example,
.IP
.nf
\f[C]
# loading a sample matrix and labels data
from sklearn.datasets import load_breast_cancer
mat, lbl = load_breast_cancer(return_X_y = True)

# fitting input matrix and label on LogisticRegression object
from frovedis.mllib.linear_model import LogisticRegression
lr = LogisticRegression(solver = \[aq]lbfgs\[aq]).fit(mat,lbl)
\f[R]
.fi
.PP
When native python data is provided, it is converted to frovedis-like
inputs and sent to frovedis server which consumes some data transfer
time.
Pre-constructed frovedis-like inputs can be used to speed up the
training time, especially when same data would be used for multiple
executions.
.PP
For example,
.IP
.nf
\f[C]
# loading a sample matrix and labels data
from sklearn.datasets import load_breast_cancer
mat, lbl = load_breast_cancer(return_X_y = True)

# Since \[dq]mat\[dq] is numpy dense data, we have created FrovedisColmajorMatrix. 
# For scipy sparse data, FrovedisCRSMatrix should be used instead.
from frovedis.matrix.dense import FrovedisColmajorMatrix
from frovedis.matrix.dvector import FrovedisDvector 
cmat = FrovedisColmajorMatrix(mat)
dlbl = FrovedisDvector(lbl)

# Logistic Regression with pre-constructed frovedis-like inputs
from frovedis.mllib.linear_model import LogisticRegression
lr = LogisticRegression(solver = \[aq]lbfgs\[aq]).fit(cmat, dlbl)
\f[R]
.fi
.PP
\f[B]Return Value\f[R]
.PD 0
.P
.PD
It simply returns \[lq]self\[rq] reference.
.SS 3. predict(X)
.PP
\f[B]Parameters\f[R]
.PD 0
.P
.PD
\f[B]\f[BI]X\f[B]\f[R]: A numpy dense or scipy sparse matrix or any
python array-like object or an instance of FrovedisCRSMatrix for sparse
data and FrovedisRowmajorMatrix for dense data.
.PP
\f[B]Purpose\f[R]
.PD 0
.P
.PD
It accepts the test feature matrix (X) in order to make prediction on
the trained model at frovedis server.
.PP
For example,
.IP
.nf
\f[C]
# predicting on lbfgs logistic regression model
lr.predict(mat)  
\f[R]
.fi
.PP
Output
.IP
.nf
\f[C]
[0 0 0 ... 0 0 1]
\f[R]
.fi
.PP
Like in fit(), frovedis-like input can be used to speed-up the
prediction making on the trained model at server side.
.PP
For example,
.IP
.nf
\f[C]
# Since \[dq]cmat\[dq] is FrovedisColmajorMatrix, we have created FrovedisRowmajorMatrix.
from frovedis.matrix.dense import FrovedisRowmajorMatrix

# predicting on lbfgs logistic regression model using pre-constructed input
lr.predict(cmat.to_frovedis_rowmatrix())
\f[R]
.fi
.PP
Output
.IP
.nf
\f[C]
[0 0 0 ... 0 0 1]
\f[R]
.fi
.PP
\f[B]Return Value\f[R]
.PD 0
.P
.PD
It returns a numpy array of float or double (float64) type and of shape
\f[B](n_samples,)\f[R] containing the predicted outputs.
.SS 4. predict_proba(X)
.PP
\f[B]Parameters\f[R]
.PD 0
.P
.PD
\f[B]\f[BI]X\f[B]\f[R]: A numpy dense or scipy sparse matrix or any
python array-like object or an instance of FrovedisCRSMatrix for sparse
data and FrovedisRowmajorMatrix for dense data.
.PP
\f[B]Purpose\f[R]
.PD 0
.P
.PD
It accepts the test feature matrix (X) in order to make prediction on
the trained model at frovedis server.
But unlike predict(), it returns the softmax probability matrix of shape
\f[B](n_samples, n_classes)\f[R] containing the probability of each
class in each sample.
.PP
For example,
.IP
.nf
\f[C]
# finds the probability sample for each class in the model
lr.predict_proba(mat)  
\f[R]
.fi
.PP
Output
.IP
.nf
\f[C]
[[1.46990588e-19 1.00000000e+00]
 [7.23344224e-10 9.99999999e-01]
 [8.43160984e-10 9.99999999e-01]
 ...
 [4.03499383e-04 9.99596501e-01]
 [3.03132738e-13 1.00000000e+00]
 [6.14030540e-03 9.93859695e-01]]
\f[R]
.fi
.PP
Like in fit(), frovedis-like input can be used to speed-up the
prediction making on the trained model at server side.
.PP
For example,
.IP
.nf
\f[C]
# Since \[dq]cmat\[dq] is FrovedisColmajorMatrix, we have created FrovedisRowmajorMatrix.
from frovedis.matrix.dense import FrovedisRowmajorMatrix

# finds the probability sample for each class in the model
lr.predict_proba(mat)  
\f[R]
.fi
.PP
Output
.IP
.nf
\f[C]
[[1.46990588e-19 1.00000000e+00]
 [7.23344224e-10 9.99999999e-01]
 [8.43160984e-10 9.99999999e-01]
 ...
 [4.03499383e-04 9.99596501e-01]
 [3.03132738e-13 1.00000000e+00]
 [6.14030540e-03 9.93859695e-01]]
\f[R]
.fi
.PP
\f[B]Return Value\f[R]
.PD 0
.P
.PD
It returns an ndarray of float or double (float64) type and of shape
\f[B](n_samples, n_classes)\f[R] containing the prediction probability
values.
.SS 5. score(X, y, sample_weight = None)
.PP
\f[B]Parameters\f[R]
.PD 0
.P
.PD
\f[B]\f[BI]X\f[B]\f[R]: A numpy dense or scipy sparse matrix or any
python array-like object or an instance of FrovedisCRSMatrix for sparse
data and FrovedisRowmajorMatrix for dense data.
.PD 0
.P
.PD
\f[B]\f[BI]y\f[B]\f[R]: Any python array-like object containing true
labels for X.
It has shape \f[B](n_samples,)\f[R].
.PD 0
.P
.PD
\f[B]\f[BI]sample_weight\f[B]\f[R]: A python ndarray containing the
intended weights for each input samples and it should be the shape of
\f[B](n_samples,)\f[R].
.PD 0
.P
.PD
When it is None (not specified explicitly), an uniform weight vector is
assigned on each input sample.
(Default: None)
.PP
\f[B]Purpose\f[R]
.PD 0
.P
.PD
Calculate mean accuracy on the given test data and labels i.e.\ mean
accuracy of self.predict(X) wrt.
y.
.PP
For example,
.IP
.nf
\f[C]
# calculate mean accuracy score on given test data and labels
lr.score(mat,lbl)  
\f[R]
.fi
.PP
Output
.IP
.nf
\f[C]
0.96
\f[R]
.fi
.PP
\f[B]Return Value\f[R]
.PD 0
.P
.PD
It returns an accuracy score of float type.
.SS 6. get_params(deep = True)
.PP
\f[B]Parameters\f[R]
.PD 0
.P
.PD
\f[I]\f[BI]deep\f[I]\f[R]: A boolean parameter, used to get parameters
and their values for an estimator.
If True, it will return the parameters for an estimator and contained
subobjects that are estimators.
(Default: True)
.PP
\f[B]Purpose\f[R]
.PD 0
.P
.PD
This method belongs to the BaseEstimator class inherited by
LogisticRegression.
It is used to get parameters and their values of LogisticRegression
class.
.PP
For example,
.IP
.nf
\f[C]
print(lr.get_params())
\f[R]
.fi
.PP
Output
.IP
.nf
\f[C]
{\[aq]C\[aq]: 100.0, \[aq]class_weight\[aq]: None, \[aq]dual\[aq]: False, \[aq]fit_intercept\[aq]: True, 
\[aq]intercept_scaling\[aq]: 1, \[aq]l1_ratio\[aq]: None, \[aq]lr_rate\[aq]: 0.01, \[aq]max_iter\[aq]: 1000, 
\[aq]multi_class\[aq]: \[aq]auto\[aq], \[aq]n_jobs\[aq]: 1, \[aq]penalty\[aq]: \[aq]l2\[aq], \[aq]random_state\[aq]: None, 
\[aq]solver\[aq]: \[aq]sag\[aq], \[aq]tol\[aq]: 0.0001, \[aq]use_shrink\[aq]: False, \[aq]verbose\[aq]: 0, 
\[aq]warm_start\[aq]: False}
\f[R]
.fi
.PP
\f[B]Return Value\f[R]
.PD 0
.P
.PD
A dictionary of parameter names mapped to their values.
.SS 7. set_params(**params)
.PP
\f[B]Parameters\f[R]
.PD 0
.P
.PD
\f[I]\f[BI]**params\f[I]\f[R]: All the keyword arguments are passed to
this function as dictionary.
This dictionary contains parameters of an estimator with its given
values to set.
.PP
\f[B]Purpose\f[R]
.PD 0
.P
.PD
This method belongs to the BaseEstimator class inherited by
LogisticRegression, used to set parameter values.
.PP
For example,
.IP
.nf
\f[C]
print(\[dq]get parameters before setting:\[dq]) 
print(lr.get_params())
# User just needs to provide the arguments and internally it will create a 
dictionary over the arguments given by user
lr.set_params(solver=\[aq]lbfgs\[aq], max_iter = 10000) 
print(\[dq]get parameters after setting:\[dq]) 
print(lr.get_params())
\f[R]
.fi
.PP
Output
.IP
.nf
\f[C]
get parameters before setting:
{\[aq]C\[aq]: 100.0, \[aq]class_weight\[aq]: None, \[aq]dual\[aq]: False, \[aq]fit_intercept\[aq]: True, 
\[aq]intercept_scaling\[aq]: 1, \[aq]l1_ratio\[aq]: None, \[aq]lr_rate\[aq]: 0.01, \[aq]max_iter\[aq]: 1000, 
\[aq]multi_class\[aq]: \[aq]auto\[aq], \[aq]n_jobs\[aq]: 1, \[aq]penalty\[aq]: \[aq]l2\[aq], \[aq]random_state\[aq]: None, 
\[aq]solver\[aq]: \[aq]sag\[aq], \[aq]tol\[aq]: 0.0001, \[aq]use_shrink\[aq]: False, \[aq]verbose\[aq]: 0, 
\[aq]warm_start\[aq]: False}
get parameters after setting:
{\[aq]C\[aq]: 100.0, \[aq]class_weight\[aq]: None, \[aq]dual\[aq]: False, \[aq]fit_intercept\[aq]: True, 
\[aq]intercept_scaling\[aq]: 1, \[aq]l1_ratio\[aq]: None, \[aq]lr_rate\[aq]: 0.01, \[aq]max_iter\[aq]: 10000, 
\[aq]multi_class\[aq]: \[aq]auto\[aq], \[aq]n_jobs\[aq]: 1, \[aq]penalty\[aq]: \[aq]l2\[aq], \[aq]random_state\[aq]: None, 
\[aq]solver\[aq]: \[aq]lbfgs\[aq], \[aq]tol\[aq]: 0.0001, \[aq]use_shrink\[aq]: False, \[aq]verbose\[aq]: 0, 
\[aq]warm_start\[aq]: False}
\f[R]
.fi
.PP
\f[B]Return Value\f[R]
.PD 0
.P
.PD
It simply returns \[lq]self\[rq] reference.
.SS 8. load(fname, dtype = None)
.PP
\f[B]Parameters\f[R]
.PD 0
.P
.PD
\f[B]\f[BI]fname\f[B]\f[R]: A string object containing the name of the
file having model information to be loaded.
.PD 0
.P
.PD
\f[B]\f[BI]dtype\f[B]\f[R]: A data-type is inferred from the input data.
Currently, expected input data-type is either float or double (float64).
(Default: None)
.PP
\f[B]Purpose\f[R]
.PD 0
.P
.PD
It loads the model from the specified file (having little-endian binary
data).
.PP
For example,
.IP
.nf
\f[C]
lr.load(\[dq]./out/LRModel\[dq])
\f[R]
.fi
.PP
\f[B]Return Value\f[R]
.PD 0
.P
.PD
It simply returns \[lq]self\[rq] reference.
.SS 9. save(fname)
.PP
\f[B]Parameters\f[R]
.PD 0
.P
.PD
\f[B]\f[BI]fname\f[B]\f[R]: A string object containing the name of the
file on which the target model is to be saved.
.PP
\f[B]Purpose\f[R]
.PD 0
.P
.PD
On success, it writes the model information (label_map, metadata and
model) in the specified file as little-endian binary data.
Otherwise, it throws an exception.
.PP
For example,
.IP
.nf
\f[C]
# To save the logistic regression model
lr.save(\[dq]./out/LRModel\[dq])    
\f[R]
.fi
.PP
This will save the logistic regression model on the path `/out/LRModel'.
It would raise exception if the directory already exists with same name.
.PP
The `LRModel' directory has
.PP
\f[B]LRModel\f[R]
.PD 0
.P
.PD
|\[em]-label_map
.PD 0
.P
.PD
|\[em]-metadata
.PD 0
.P
.PD
|\[em]-\f[B]model\f[R]
.PD 0
.P
.PD
\ \ \ \ \ |\[em]\[em]model
.PD 0
.P
.PD
\ \ \ \ \ |\[em]\[em]type
.PP
`label_map' contains information about labels mapped with their encoded
value.
.PD 0
.P
.PD
The metadata file contains the number of classes, model kind, input
datatype used for trained model.
.PD 0
.P
.PD
Here, the \f[B]model\f[R] directory contains information about weights,
intercept, threshold and thier datatype.
.PP
\f[B]Return Value\f[R]
.PD 0
.P
.PD
It returns nothing.
.SS 10. debug_print()
.PP
\f[B]Purpose\f[R]
.PD 0
.P
.PD
It shows the target model information (weight values, intercept, etc.)
on the server side user terminal.
It is mainly used for debugging purpose.
.PP
For example,
.IP
.nf
\f[C]
lr.debug_print()  
\f[R]
.fi
.PP
Output
.IP
.nf
\f[C]
-------- Weight Vector:: --------
25.4745 47.8416 155.732 190.863 0.271114 0.0911008 -0.151433 -0.0785512 0.511576
0.203452 0.199293 3.8659 1.22203 -42.3556 0.0239707 0.0395711 0.0389786 0.017432
0.0647208 0.0105295 24.7162 60.7113 150.789 -148.921 0.354222 0.104251 -0.202345
-0.0363726 0.734499 0.22635
Intercept:: 60.7742
Threshold:: 0.5
\f[R]
.fi
.PP
This output will be visible on server side.
It displays the weights, intercept, etc.
values on the trained model which is currently present on the server.
.PP
\f[B]No such output will be visible on client side.\f[R]
.PP
\f[B]Return Value\f[R]
.PD 0
.P
.PD
It returns nothing.
.SS 11. release()
.PP
\f[B]Purpose\f[R]
.PD 0
.P
.PD
It can be used to release the in-memory model at frovedis server.
.PP
For example,
.IP
.nf
\f[C]
lr.release()
\f[R]
.fi
.PP
This will reset the after-fit populated attributes to None, along with
releasing server side memory.
.PP
\f[B]Return Value\f[R]
.PD 0
.P
.PD
It returns nothing.
.SS 12. is_fitted()
.PP
\f[B]Purpose\f[R]
.PD 0
.P
.PD
It can be used to confirm if the model is already fitted or not.
In case, predict() is used before training the model, then it can prompt
the user to train the logistic regression model first.
.PP
\f[B]Return Value\f[R]
.PD 0
.P
.PD
It returns `True', if the model is already fitted otherwise, it returns
`False'.
.SH SEE ALSO
.IP \[bu] 2
\f[B]Introduction to FrovedisRowmajorMatrix\f[R]
.PD 0
.P
.PD
.IP \[bu] 2
\f[B]Introduction to FrovedisColmajorMatrix\f[R]
.PD 0
.P
.PD
.IP \[bu] 2
\f[B]Introduction to FrovedisCRSMatrix\f[R]
.PD 0
.P
.PD
.IP \[bu] 2
\f[B]Introduction to FrovedisDvector\f[R]
.PD 0
.P
.PD
.IP \[bu] 2
\f[B]Linear Regression in Frovedis\f[R]
