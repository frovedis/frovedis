.TH "RandomForestClassifier" "" "" "" ""
.SH NAME
.PP
RandomForestClassifier \- A classification algorithm that contains
multiple decision trees on various subsets of the given dataset.
It contains the predictions of multiple decision trees and based on the
majority votes of predictions, it predicts the final output.
.SH SYNOPSIS
.IP
.nf
\f[C]
class\ frovedis.mllib.ensemble.forest.RandomForestClassifier(n_estimators=100,\ criterion=\[aq]gini\[aq],\ \ 
\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ max_depth=None,\ \ 
\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ min_samples_split=2,\ \ 
\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ min_samples_leaf=1,\ \ 
\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ min_weight_fraction_leaf=0.0,\ \ 
\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ max_features=\[aq]auto\[aq],\ \ 
\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ max_leaf_nodes=None,\ \ 
\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ min_impurity_decrease=0.0,\ \ 
\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ min_impurity_split=None,\ \ 
\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ bootstrap=True,\ oob_score=False,\ \ 
\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ n_jobs=None,\ random_state=None,\ \ 
\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ verbose=0,\ warm_start=False,\ \ 
\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ class_weight=None,\ ccp_alpha=0.0,\ \ 
\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ max_samples=None,\ max_bins=32)\ \ 
\f[]
.fi
.SS Public Member Functions
.PP
fit(X, y)
.PD 0
.P
.PD
predict(X)
.PD 0
.P
.PD
get_params(deep = True)
.PD 0
.P
.PD
set_params(**params)
.PD 0
.P
.PD
load(fname, dtype = None)
.PD 0
.P
.PD
score(X, y, sample_weight = None)
.PD 0
.P
.PD
save(fname)
.PD 0
.P
.PD
debug_print()
.PD 0
.P
.PD
release()
.PD 0
.P
.PD
is_fitted()
.SH DESCRIPTION
.PP
Random Forest Classifier is a supervised machine learning algorithm used
for classification using decision trees.
The classifier creates a set of decision trees from randomly selected
subsets of the training set.
It is basically a set of decision trees from a randomly selected subset
of the training set and then it collects the votes from different
decision trees to decide the final prediction.
\f[B]Frovedis supports both binary and multinomial random forest
classification algorithms.\f[]
.PP
During training, the input \f[B]X\f[] is the training data and
\f[B]y\f[] is the corresponding label values (Frovedis supports any
values for labels, but internally it encodes the input binary labels to
0 and 1, and input multinomial labels to 0, 1, 2, ..., N\-1 (where N is
the no.
of classes) before training at Frovedis server) which we want to
predict.
.PP
This module provides a client\-server implementation, where the client
application is a normal python program.
The frovedis interface is almost same as Scikit\-learn
RandomForestClassifier interface, but it doesn\[aq]t have any dependency
with Scikit\-learn.
It can be used simply even if the system doesn\[aq]t have Scikit\-learn
installed.
Thus in this implementation, a python client can interact with a
frovedis server sending the required python data for training at
frovedis side.
Python data is converted into frovedis compatible data internally and
the python ML call is linked with the respective frovedis ML call to get
the job done at frovedis server.
.PP
Python side calls for RandomForestClassifier on the frovedis server.
Once the training is completed with the input data at the frovedis
server, it returns an abstract model with a unique model ID to the
client python program.
.PP
When prediction\-like request would be made on the trained model, python
program will send the same request to the frovedis server.
After the request is served at the frovedis server, the output would be
sent back to the python client.
.SS Detailed Description
.SS 1. RandomForestClassifier()
.PP
\f[B]Parameters\f[]
.PD 0
.P
.PD
\f[B]\f[I]n_estimators\f[]\f[]: A positive integer parameter that
specifies the number of trees in the forest.
(Default: 100)
.PD 0
.P
.PD
\f[B]\f[I]criterion\f[]\f[]: A string object parameter that specifies
the function to measure the quality of a split.
Supported criteria are \[aq]gini\[aq] and \[aq]entropy\[aq].
(Default: \[aq]gini\[aq])
.PD 0
.P
.PD
\- \f[B]\[aq]gini\[aq] impurity\f[]: calculates the amount of
probability of a specific feature that is classified incorrectly when
selected randomly.
.PD 0
.P
.PD
\- \f[B]\[aq]entropy\[aq] (information gain)\f[]: it is applied to
quantify which feature provides maximal information about the
classification based on the notion of entropy.
.PP
\f[B]\f[I]max_depth\f[]\f[]: A positive integer parameter that specifies
the maximum depth of the tree.
(Default: None)
.PD 0
.P
.PD
If it is None (not specified explicitly), then \[aq]max_depth\[aq] is
set to 4.
.PD 0
.P
.PD
\f[B]\f[I]min_samples_split\f[]\f[]: An integer or float value that
specifies the minimum number of samples required to split an internal
node.
(Default: 2)
.PD 0
.P
.PD
\f[B]\f[I]min_samples_leaf\f[]\f[]: A positive integer or float value
that specifies the minimum number of samples required to be at a leaf
node.
A split point at any depth will only be considered if it leaves at least
\[aq]min_samples_leaf\[aq] training samples in each of the left and
right branches.
(Default: 1)
.PD 0
.P
.PD
\- If it is an integer, then \[aq]min_samples_leaf\[aq] should be
greater than 0.
.PD 0
.P
.PD
\- If it is float, then it is set as
\f[B]int(np.ceil(self.min_samples_split * self.n_samples_))\f[]
.PP
\f[B]\f[I]min_weight_fraction_leaf\f[]\f[]: An unused parameter.
(Default: 0.0)
.PD 0
.P
.PD
\f[B]\f[I]max_features\f[]\f[]: A string object parameter that specifies
the number of features to consider when looking for the best split:
.PD 0
.P
.PD
\- If it is an integer, then it will be set as \f[B](max_features * 1.0)
/ n_features_\f[].
.PD 0
.P
.PD
\- If it is float, then it will be \f[B]\[aq]max_features\[aq]\f[]
number of features at each split.
.PD 0
.P
.PD
\- If it is \[aq]auto\[aq], then it will be set as
\f[B]sqrt(n_features_)\f[].
.PD 0
.P
.PD
\- If \[aq]sqrt\[aq], then it will be set as \f[B]sqrt(n_features_)\f[]
(same as \[aq]auto\[aq]).
.PD 0
.P
.PD
\- If \[aq]log2\[aq], then it will be set as \f[B]log2(n_features_)\f[].
.PD 0
.P
.PD
\- If None, then it will be set as \f[B]n_features_\f[].
(Default: \[aq]auto\[aq])
.PP
\f[B]\f[I]max_leaf_nodes\f[]\f[]: An unused parameter.
(Default: None)
.PD 0
.P
.PD
\f[B]\f[I]min_impurity_decrease\f[]\f[]: A positive double (float64)
parameter.
A node will be split if this split induces a decrease of the impurity
greater than or equal to this value.
(Default: 0.0)
.PD 0
.P
.PD
\f[B]\f[I]min_impurity_split\f[]\f[]: An unused parameter.
(Default: None)
.PD 0
.P
.PD
\f[B]bootstrap\f[]: An unused parameter.
(Default: True)
.PD 0
.P
.PD
\f[B]oob_score\f[]: An unused parameter.
(Default: False)
.PD 0
.P
.PD
\f[B]n_jobs\f[]: An unused parameter.
(Default: None)
.PD 0
.P
.PD
\f[B]\f[I]random_state\f[]\f[]: An integer parameter that controls the
sampling of the features to consider when looking for the best split at
each node (if max_features < n_features).
(Default: None)
.PD 0
.P
.PD
If it is None (not specified explicitly), then \[aq]random_state\[aq] is
set as \-1.
.PD 0
.P
.PD
\f[B]\f[I]verbose\f[]\f[]: An integer parameter specifying the log level
to use.
Its value is set as 0 by default (for INFO mode).
But it can be set to 1 (for DEBUG mode) or 2 (for TRACE mode) for
getting training time logs from frovedis server.
.PD 0
.P
.PD
\f[B]\f[I]warm_start\f[]\f[]: An unused parameter.
(Default: False)
.PD 0
.P
.PD
\f[B]\f[I]class_weight\f[]\f[]: An unused parameter.
(Default: None)
.PD 0
.P
.PD
\f[B]\f[I]ccp_alpha\f[]\f[]: An unused parameter.
(Default: 0.0)
.PD 0
.P
.PD
\f[B]\f[I]max_samples\f[]\f[]: An unused parameter.
(Default: None)
.PD 0
.P
.PD
\f[B]\f[I]max_bins\f[]\f[]: A positive integer parameter that specifies
the maximum number of bins created by ordered splits.
(Default: 32)
.PP
\f[B]Attributes\f[]
.PD 0
.P
.PD
\f[B]\f[I]classes_\f[]\f[]: It is a python ndarray (any type) of unique
labels given to the classifier during training.
It has shape \f[B](n_classes,)\f[].
.PD 0
.P
.PD
\f[B]\f[I]n_features_\f[]\f[]: An integer value specifying the number of
features when fitting the estimator.
.PP
\f[B]Purpose\f[]
.PD 0
.P
.PD
It initializes a RandomForestClassifier object with the given
parameters.
.PP
The parameters: "min_weight_fraction_leaf", "max_leaf_nodes",
"min_impurity_split", "bootstrap", "oob_score", "n_jobs", "warm_start",
"class_weight", "ccp_alpha" and "max_samples" are simply kept in to make
the interface uniform to the Scikit\-learn RandomForestClassifier
module.
They are not used anywhere within frovedis implementation.
.PP
\f[B]Return Value\f[]
.PD 0
.P
.PD
It simply returns "self" reference.
.SS 2. fit(X, y)
.PP
\f[B]Parameters\f[]
.PD 0
.P
.PD
\f[B]\f[I]X\f[]\f[]: A numpy dense or any python array\-like object or
an instance of FrovedisColmajorMatrix for dense data.
It has shape \f[B](n_samples, n_features)\f[].
Currently, it supports only dense data as input.
.PD 0
.P
.PD
\f[B]\f[I]y\f[]\f[]: Any python array\-like object or an instance of
FrovedisDvector containing the target values.
It has shape \f[B](n_samples,)\f[].
.PP
\f[B]Purpose\f[]
.PD 0
.P
.PD
It builds a forest of trees from the training data X and labels y.
.PP
For example,
.IP
.nf
\f[C]
#\ loading\ a\ sample\ matrix\ and\ labels\ dense\ data
import\ numpy\ as\ np
mat\ =\ np.array([[10,\ 0,\ 1,\ 0,\ 0,\ 1,\ 0],
\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ [0,\ 1,\ 0,\ 1,\ 0,\ 1,\ 0],
\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ [0,\ 1,\ 0,\ 0,\ 1,\ 0,\ 1],
\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ [1,\ 0,\ 0,\ 1,\ 0,\ 1,\ 0]],\ dtype\ =\ np.float64)
lbl\ =\ np.array([100,\ 500,\ 100,\ 600],\ dtype\ =\ np.float64)\ 

#\ fitting\ input\ matrix\ and\ label\ on\ RandomForestClassifier\ object
from\ frovedis.mllib.ensemble\ import\ RandomForestClassifier
rfc\ =\ RandomForestClassifier(n_estimators\ =\ 10,\ max_depth\ =\ 4,\ min_samples_split\ =\ 0.5
\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ min_samples_leaf\ =\ 1.2,\ random_state\ =\ 324)\ \ 
rfc.fit(mat,lbl)
\f[]
.fi
.PP
When native python data is provided, it is converted to frovedis\-like
inputs and sent to frovedis server which consumes some data transfer
time.
Pre\-constructed frovedis\-like inputs can be used to speed up the
training time, especially when same data would be used for multiple
executions.
.PP
For example,
.IP
.nf
\f[C]
#\ loading\ a\ sample\ matrix\ and\ labels\ dense\ data
import\ numpy\ as\ np
mat\ =\ np.array([[10,\ 0,\ 1,\ 0,\ 0,\ 1,\ 0],
\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ [0,\ 1,\ 0,\ 1,\ 0,\ 1,\ 0],
\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ [0,\ 1,\ 0,\ 0,\ 1,\ 0,\ 1],
\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ [1,\ 0,\ 0,\ 1,\ 0,\ 1,\ 0]],\ dtype\ =\ np.float64)
lbl\ =\ np.array([100,\ 500,\ 100,\ 600],\ dtype\ =\ np.float64)\ 

#\ Since\ "mat"\ is\ numpy\ dense\ data,\ we\ have\ created\ FrovedisColmajorMatrix.\ 
#\ For\ scipy\ sparse\ data,\ FrovedisCRSMatrix\ should\ be\ used\ instead.
from\ frovedis.matrix.dense\ import\ FrovedisColmajorMatrix
from\ frovedis.matrix.dvector\ import\ FrovedisDvector\ 
cmat\ =\ FrovedisColmajorMatrix(mat)
dlbl\ =\ FrovedisDvector(lbl)

#\ fitting\ input\ matrix\ and\ label\ on\ RandomForestClassifier\ object
from\ frovedis.mllib.ensemble\ import\ RandomForestClassifier
rfc\ =\ RandomForestClassifier(n_estimators\ =\ 10,\ max_depth\ =\ 4,
\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ min_samples_split\ =\ 0.5,\ min_samples_leaf\ =\ 1.2,\ 
\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ random_state\ =\ 324)\ \ 
rfc.fit(cmat,dlbl)
\f[]
.fi
.PP
\f[B]Return Value\f[]
.PD 0
.P
.PD
It simply returns "self" reference.
.SS 3. predict(X)
.PP
\f[B]Parameters\f[]
.PD 0
.P
.PD
\f[B]\f[I]X\f[]\f[]: A numpy dense or any python array\-like object or
an instance of FrovedisRowmajorMatrix for dense data.
It has shape \f[B](n_samples, n_features)\f[].
Currently, it supports only dense data as input.
.PP
\f[B]Purpose\f[]
.PD 0
.P
.PD
Predict class for X.
.PP
The predicted class of an input sample is a vote by the trees in the
forest, weighted by their probability estimates.
That is, the predicted class is the one with highest mean probability
estimate across the trees.
.PP
For example,
.IP
.nf
\f[C]
#\ predicting\ on\ random\ forest\ classifier\ model
rfc.predict(mat)\ \ 
\f[]
.fi
.PP
Output
.IP
.nf
\f[C]
[100.\ 500.\ 100.\ 500.]
\f[]
.fi
.PP
Like in fit(), frovedis\-like input can be used to speed\-up the
prediction making on the trained model at server side.
.PP
For example,
.IP
.nf
\f[C]
#\ Since\ "cmat"\ is\ FrovedisColmajorMatrix,\ we\ have\ created\ FrovedisRowmajorMatrix.
#\ predicting\ on\ random\ forest\ classifier\ model
rfc.predict(cmat.to_frovedis_rowmatrix())\ \ 
\f[]
.fi
.PP
Output
.IP
.nf
\f[C]
[100.\ 500.\ 100.\ 500.]
\f[]
.fi
.PP
\f[B]Return Value\f[]
.PD 0
.P
.PD
It returns a numpy array of float or double (float64) type and of shape
\f[B](n_samples,)\f[] containing the predicted classes.
.SS 4. get_params(deep = True)
.PP
\f[B]Parameters\f[]
.PD 0
.P
.PD
\f[I]\f[B]deep\f[]\f[]: A boolean parameter, used to get parameters and
their values for an estimator.
If True, it will return the parameters for an estimator and contained
subobjects that are estimators.
(Default: True)
.PP
\f[B]Purpose\f[]
.PD 0
.P
.PD
This method belongs to the BaseEstimator class inherited by
RandomForestClassifier.
It is used to get parameters and their values of RandomForestClassifier
class.
.PP
For example,
.IP
.nf
\f[C]
print(rfc.get_params())
\f[]
.fi
.PP
Output
.IP
.nf
\f[C]
{\[aq]bootstrap\[aq]:\ True,\ \[aq]ccp_alpha\[aq]:\ 0.0,\ \[aq]class_weight\[aq]:\ None,\ \[aq]criterion\[aq]:\ \[aq]gini\[aq],\ 
\[aq]max_bins\[aq]:\ 32,\ \[aq]max_depth\[aq]:\ 4,\ \[aq]max_features\[aq]:\ \[aq]auto\[aq],\ \[aq]max_leaf_nodes\[aq]:\ None,\ 
\[aq]max_samples\[aq]:\ None,\ \[aq]min_impurity_decrease\[aq]:\ 0.0,\ \[aq]min_impurity_split\[aq]:\ None,\ 
\[aq]min_samples_leaf\[aq]:\ 2,\ \[aq]min_samples_split\[aq]:\ 0.5,\ \[aq]min_weight_fraction_leaf\[aq]:\ 0.0,\ 
\[aq]n_estimators\[aq]:\ 10,\ \[aq]n_jobs\[aq]:\ None,\ \[aq]oob_score\[aq]:\ False,\ \[aq]random_state\[aq]:\ 324,\ 
\[aq]verbose\[aq]:\ 0,\ \[aq]warm_start\[aq]:\ False}
\f[]
.fi
.PP
\f[B]Return Value\f[]
.PD 0
.P
.PD
A dictionary of parameter names mapped to their values.
.SS 5. set_params(**params)
.PP
\f[B]Parameters\f[]
.PD 0
.P
.PD
\f[I]\f[B]**params\f[]\f[]: All the keyword arguments are passed to this
function as dictionary.
This dictionary contains parameters of an estimator with its given
values to set.
.PP
\f[B]Purpose\f[]
.PD 0
.P
.PD
This method belongs to the BaseEstimator class inherited by
RandomForestClassifier, used to set parameter values.
.PP
For example,
.IP
.nf
\f[C]
print("get\ parameters\ before\ setting:")\ 
print(rfc.get_params())
#\ User\ just\ needs\ to\ provide\ the\ arguments\ and\ internally\ it\ will\ create\ a\ 
dictionary\ over\ the\ arguments\ given\ by\ user
rfc.set_params(criterion\ =\ \[aq]entropy\[aq],\ max_depth\ =\ 5)\ 
print("get\ parameters\ after\ setting:")\ 
print(rfc.get_params())
\f[]
.fi
.PP
Output
.IP
.nf
\f[C]
get\ parameters\ before\ setting:\ \ 
{\[aq]bootstrap\[aq]:\ True,\ \[aq]ccp_alpha\[aq]:\ 0.0,\ \[aq]class_weight\[aq]:\ None,\ \[aq]criterion\[aq]:\ \[aq]gini\[aq],\ 
\[aq]max_bins\[aq]:\ 32,\ \[aq]max_depth\[aq]:\ 4,\ \[aq]max_features\[aq]:\ \[aq]auto\[aq],\ \[aq]max_leaf_nodes\[aq]:\ None,\ 
\[aq]max_samples\[aq]:\ None,\ \[aq]min_impurity_decrease\[aq]:\ 0.0,\ \[aq]min_impurity_split\[aq]:\ None,\ 
\[aq]min_samples_leaf\[aq]:\ 2,\ \[aq]min_samples_split\[aq]:\ 0.5,\ \[aq]min_weight_fraction_leaf\[aq]:\ 0.0,\ 
\[aq]n_estimators\[aq]:\ 10,\ \[aq]n_jobs\[aq]:\ None,\ \[aq]oob_score\[aq]:\ False,\ \[aq]random_state\[aq]:\ 324,\ 
\[aq]verbose\[aq]:\ 0,\ \[aq]warm_start\[aq]:\ False}\ \ 
get\ parameters\ after\ setting:\ \ \ \ 
{\[aq]bootstrap\[aq]:\ True,\ \[aq]ccp_alpha\[aq]:\ 0.0,\ \[aq]class_weight\[aq]:\ None,\ \[aq]criterion\[aq]:\ \[aq]entropy\[aq],\ 
\[aq]max_bins\[aq]:\ 32,\ \[aq]max_depth\[aq]:\ 5,\ \[aq]max_features\[aq]:\ \[aq]auto\[aq],\ \[aq]max_leaf_nodes\[aq]:\ None,\ 
\[aq]max_samples\[aq]:\ None,\ \[aq]min_impurity_decrease\[aq]:\ 0.0,\ \[aq]min_impurity_split\[aq]:\ None,\ 
\[aq]min_samples_leaf\[aq]:\ 2,\ \[aq]min_samples_split\[aq]:\ 0.5,\ \[aq]min_weight_fraction_leaf\[aq]:\ 0.0,\ 
\[aq]n_estimators\[aq]:\ 10,\ \[aq]n_jobs\[aq]:\ None,\ \[aq]oob_score\[aq]:\ False,\ \[aq]random_state\[aq]:\ 324,\ 
\[aq]verbose\[aq]:\ 0,\ \[aq]warm_start\[aq]:\ False}\ \ 
\f[]
.fi
.PP
\f[B]Return Value\f[]
.PD 0
.P
.PD
It simply returns "self" reference.
.SS 6. load(fname, dtype = None)
.PP
\f[B]Parameters\f[]
.PD 0
.P
.PD
\f[B]\f[I]fname\f[]\f[]: A string object containing the name of the file
having model information to be loaded.
.PD 0
.P
.PD
\f[B]\f[I]dtype\f[]\f[]: A data\-type is inferred from the input data.
Currently, expected input data\-type is either float or double
(float64).
(Default: None)
.PP
\f[B]Purpose\f[]
.PD 0
.P
.PD
It loads the model from the specified file (having little\-endian binary
data).
.PP
For example,
.IP
.nf
\f[C]
rfc.load("./out/rf_classifier_model")\ \ 
\f[]
.fi
.PP
\f[B]Return Value\f[]
.PD 0
.P
.PD
It simply returns "self" reference.
.SS 7. save(fname)
.PP
\f[B]Parameters\f[]
.PD 0
.P
.PD
\f[B]\f[I]fname\f[]\f[]: A string object containing the name of the file
on which the target model is to be saved.
.PP
\f[B]Purpose\f[]
.PD 0
.P
.PD
On success, it writes the model information (label_map, metadata and
model) in the specified file as little\-endian binary data.
Otherwise, it throws an exception.
.PP
For example,
.IP
.nf
\f[C]
#\ To\ save\ the\ random\ forest\ classifier\ model
dtc.save("./out/rf_classifier_model")\ \ 
\f[]
.fi
.PP
This will save the random forest classifier model on the path
"/out/rf_classifier_model".
It would raise exception if the directory already exists with same name.
.PP
The \[aq]rf_classifier_model\[aq] directory has
.PP
\f[B]rf_classifier_model\f[]
.PD 0
.P
.PD
|\-\-\-\-\-label_map
.PD 0
.P
.PD
|\-\-\-\-\-metadata
.PD 0
.P
.PD
|\-\-\-\-\-model
.PP
‘label_map' file contains information about labels mapped with their
encoded value.
.PD 0
.P
.PD
The \[aq]metadata\[aq] file contains the number of classes, model kind
and input datatype used for trained model.
.PD 0
.P
.PD
The \[aq]model\[aq] file contains the random forest model saved in
binary format.
.PP
\f[B]Return Value\f[]
.PD 0
.P
.PD
It returns nothing.
.SS 8. score(X, y, sample_weight = None)
.PP
\f[B]Parameters\f[]
.PD 0
.P
.PD
\f[B]\f[I]X\f[]\f[]: A numpy dense or any python array\-like object or
an instance of FrovedisRowmajorMatrix for dense data.
It has shape \f[B](n_samples, n_features)\f[].
Currently, it supports only dense data as input.
.PD 0
.P
.PD
\f[B]\f[I]y\f[]\f[]: Any python array\-like object containing the true
labels for X.
It has shape \f[B](n_samples,)\f[].
.PD 0
.P
.PD
\f[B]\f[I]sample_weight\f[]\f[]: A python ndarray containing the
intended weights for each input samples and it should be the shape of
\f[B](n_samples,)\f[].
.PD 0
.P
.PD
When it is None (not specified explicitly), an uniform weight vector is
assigned on each input sample.
(Default: None)
.PP
\f[B]Purpose\f[]
.PD 0
.P
.PD
Calculate mean accuracy on the given test data and labels i.e.
mean accuracy of self.predict(X) wrt.
y.
.PP
For example,
.IP
.nf
\f[C]
#\ calculate\ mean\ accuracy\ score\ on\ given\ test\ data\ and\ labels
rfc.score(mat,lbl)\ \ 
\f[]
.fi
.PP
Output
.IP
.nf
\f[C]
0.75
\f[]
.fi
.PP
\f[B]Return Value\f[]
.PD 0
.P
.PD
It returns an accuracy score of float type.
.SS 9. debug_print()
.PP
\f[B]Purpose\f[]
.PD 0
.P
.PD
It shows the target model information on the server side user terminal.
It is mainly used for debugging purpose.
.PP
For example,
.IP
.nf
\f[C]
rfc.debug_print()
\f[]
.fi
.PP
Output
.IP
.nf
\f[C]
\-\-\-\-\-\-\-\-\ Classification\ Trees\ (Random\ Forest)::\ \-\-\-\-\-\-\-\-
#\ of\ trees:\ 10
\-\-\-\-\ [0]\ \-\-\-\-
\ \ #\ of\ nodes:\ 3,\ height:\ 1
\ \ <1>\ Split:\ feature[2]\ <\ 0.25,\ IG:\ 0.5
\ \ \ \\_\ (2)\ Predict:\ 2\ (100%)
\ \ \ \\_\ (3)\ Predict:\ 0\ (100%)
\-\-\-\-\ [1]\ \-\-\-\-
\ \ #\ of\ nodes:\ 3,\ height:\ 1
\ \ <1>\ Split:\ feature[6]\ <\ 0.25,\ IG:\ 0.375
\ \ \ \\_\ (2)\ Predict:\ 1\ (50%)
\ \ \ \\_\ (3)\ Predict:\ 0\ (100%)
\-\-\-\-\ [2]\ \-\-\-\-
\ \ #\ of\ nodes:\ 1,\ height:\ 0
\ \ (1)\ Predict:\ 0\ (50%)
\-\-\-\-\ [3]\ \-\-\-\-
\ \ #\ of\ nodes:\ 3,\ height:\ 1
\ \ <1>\ Split:\ feature[6]\ <\ 0.25,\ IG:\ 0.125
\ \ \ \\_\ (2)\ Predict:\ 0\ (50%)
\ \ \ \\_\ (3)\ Predict:\ 0\ (100%)
\-\-\-\-\ [4]\ \-\-\-\-
\ \ #\ of\ nodes:\ 3,\ height:\ 1
\ \ <1>\ Split:\ feature[3]\ <\ 0.25,\ IG:\ 0.375
\ \ \ \\_\ (2)\ Predict:\ 0\ (100%)
\ \ \ \\_\ (3)\ Predict:\ 1\ (50%)
\-\-\-\-\ [5]\ \-\-\-\-
\ \ #\ of\ nodes:\ 3,\ height:\ 1
\ \ <1>\ Split:\ feature[1]\ <\ 0.25,\ IG:\ 0.5
\ \ \ \\_\ (2)\ Predict:\ 2\ (100%)
\ \ \ \\_\ (3)\ Predict:\ 1\ (100%)
\-\-\-\-\ [6]\ \-\-\-\-
\ \ #\ of\ nodes:\ 1,\ height:\ 0
\ \ (1)\ Predict:\ 0\ (100%)
\-\-\-\-\ [7]\ \-\-\-\-
\ \ #\ of\ nodes:\ 1,\ height:\ 0
\ \ (1)\ Predict:\ 2\ (75%)
\-\-\-\-\ [8]\ \-\-\-\-
\ \ #\ of\ nodes:\ 1,\ height:\ 0
\ \ (1)\ Predict:\ 1\ (50%)
\-\-\-\-\ [9]\ \-\-\-\-
\ \ #\ of\ nodes:\ 3,\ height:\ 1
\ \ <1>\ Split:\ feature[5]\ <\ 0.25,\ IG:\ 0.375
\ \ \ \\_\ (2)\ Predict:\ 0\ (100%)
\ \ \ \\_\ (3)\ Predict:\ 1\ (50%)
\f[]
.fi
.PP
This output will be visible on server side.
It displays the random forest having maximum depth of 4 and total 10
decision trees.
.PP
\f[B]No such output will be visible on client side.\f[]
.PP
\f[B]Return Value\f[]
.PD 0
.P
.PD
It returns nothing.
.SS 10. release()
.PP
\f[B]Purpose\f[]
.PD 0
.P
.PD
It can be used to release the in\-memory model at frovedis server.
.PP
For example,
.IP
.nf
\f[C]
rfc.release()
\f[]
.fi
.PP
This will reset the after\-fit populated attributes (like classes_,
n_features_) to None, along with releasing server side memory.
.PP
\f[B]Return Value\f[]
.PD 0
.P
.PD
It returns nothing.
.SS 11. is_fitted()
.PP
\f[B]Purpose\f[]
.PD 0
.P
.PD
It can be used to confirm if the model is already fitted or not.
.PP
\f[B]Return Value\f[]
.PD 0
.P
.PD
It returns \[aq]True\[aq], if the model is already fitted, otherwise, it
returns \[aq]False\[aq].
.SH SEE ALSO
.PP
dvector, rowmajor_matrix, colmajor_matrix, random_forest_regressor,
decision_tree_classifier
