.TH "Lasso Regression" "" "" "" ""
.SH NAME
.PP
Lasso Regression \- A regression algorithm used to predict the
continuous output with L1 regularization.
.SH SYNOPSIS
.IP
.nf
\f[C]
class\ frovedis.mllib.linear_model.Lasso(alpha=0.01,\ fit_intercept=True,\ \ 
\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ normalize=False,\ precompute=False,\ \ 
\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ copy_X=True,\ max_iter=1000,\ \ 
\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ tol=1e\-4,\ warm_start=False,\ \ 
\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ positive=False,\ random_state=None,\ \ 
\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ selection=\[aq]cyclic\[aq],\ lr_rate=1e\-8,\ \ 
\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ verbose=0,\ solver=\[aq]sag\[aq])\ \ 
\f[]
.fi
.SS Public Member Functions
.PP
fit(X, y, sample_weight = None)
.PD 0
.P
.PD
predict(X)
.PD 0
.P
.PD
score(X, y, sample_weight = None)
.PD 0
.P
.PD
get_params(deep = True)
.PD 0
.P
.PD
set_params(**params)
.PD 0
.P
.PD
load(fname, dtype = None)
.PD 0
.P
.PD
save(fname)
.PD 0
.P
.PD
debug_print()
.PD 0
.P
.PD
release()
.PD 0
.P
.PD
is_fitted()
.SH DESCRIPTION
.PP
Linear least squares is the most common formulation for regression
problems.
It is a linear method with the loss function given by the \f[B]squared
loss\f[]:
.IP
.nf
\f[C]
L(w;x,y)\ :=\ 1/2(wTx\-y)^2
\f[]
.fi
.PP
During training, the input \f[B]X\f[] is the training data and
\f[B]y\f[] is the corresponding label values which we want to predict.
\f[B]w\f[] is the linear model (also known as weight) which uses a
single weighted sum of features to make a prediction.
The method is called linear since it can be expressed as a function of
wTx and y.
\f[B]Lasso regression uses L1 regularization to address the overfit
problem.\f[]
.PP
The gradient of the squared loss is: \f[B](wTx\-y).x\f[]
.PD 0
.P
.PD
The gradient of the regularizer is: \f[B]sign(w)\f[]
.PP
Frovedis provides implementation of lasso regression with two different
optimizers:
.PD 0
.P
.PD
(1) stochastic gradient descent with minibatch
.PD 0
.P
.PD
(2) LBFGS optimizer
.PP
The simplest method to solve optimization problems of the form \f[B]min
f(w)\f[] is gradient descent.
Such first\-order optimization methods well\-suited for large\-scale and
distributed computation.
Whereas, L\-BFGS is an optimization algorithm in the family of
quasi\-Newton methods to solve the optimization problems of the similar
form.
.PP
Like the original BFGS, L\-BFGS (Limited Memory BFGS) uses an estimation
to the inverse Hessian matrix to steer its search through feature space,
but where BFGS stores a dense nxn approximation to the inverse Hessian
(n being the number of features in the problem), L\-BFGS stores only a
few vectors that represent the approximation implicitly.
L\-BFGS often achieves rapider convergence compared with other
first\-order optimization.
.PP
This module provides a client\-server implementation, where the client
application is a normal python program.
The frovedis interface is almost same as Scikit\-learn Lasso interface,
but it doesn\[aq]t have any dependency with Scikit\-learn.
It can be used simply even if the system doesn\[aq]t have Scikit\-learn
installed.
Thus in this implementation, a python client can interact with a
frovedis server sending the required python data for training at
frovedis side.
Python data is converted into frovedis compatible data internally and
the python ML call is linked with the respective frovedis ML call to get
the job done at frovedis server.
.PP
Python side calls for Lasso on the frovedis server.
Once the training is completed with the input data at the frovedis
server, it returns an abstract model with a unique model ID to the
client python program.
.PP
When prediction\-like request would be made on the trained model, python
program will send the same request to the frovedis server.
After the request is served at the frovedis server, the output would be
sent back to the python client.
.SS Detailed Description
.SS 1. Lasso()
.PP
\f[B]Parameters\f[]
.PD 0
.P
.PD
\f[B]\f[I]alpha\f[]\f[]: A constant that multiplies the L1 term.
It must be a positive value of double (float64) type .
(Default: 0.01)
.PD 0
.P
.PD
\f[B]\f[I]fit_intercept\f[]\f[]: A boolean parameter specifying whether
a constant (intercept) should be added to the decision function.
(Default: True)
.PD 0
.P
.PD
\f[B]\f[I]normalize\f[]\f[]: An unused parameter.
(Default: False)
.PD 0
.P
.PD
\f[B]\f[I]precompute\f[]\f[]: An unused parameter.
(Default: False)
.PD 0
.P
.PD
\f[B]\f[I]copy_X\f[]\f[]: An unused parameter.
(Default: True)
.PD 0
.P
.PD
\f[B]\f[I]max_iter\f[]\f[]: A positive integer value used to set the
maximum number of iterations.
(Default: 1000)
.PD 0
.P
.PD
\f[B]\f[I]tol\f[]\f[]: Zero or a positive value of double (float64) type
specifying the convergence tolerance value.
(Default: 1e\-4)
.PD 0
.P
.PD
\f[B]\f[I]warm_start\f[]\f[]: A boolean parameter which when set to
True, reuses the solution of the previous call to fit as initialization,
otherwise, just erase the previous solution.
(Default: False)
.PD 0
.P
.PD
\f[B]\f[I]positive\f[]\f[]: An unused parameter.
(Default: False)
.PD 0
.P
.PD
\f[B]\f[I]random_state\f[]\f[]: An unused parameter.
(Default: None)
.PD 0
.P
.PD
\f[B]\f[I]selection\f[]\f[]: An unused paremeter.
(Default: cyclic)
.PD 0
.P
.PD
\f[B]\f[I]lr_rate\f[]\f[]: Zero or a positive value of double (float64)
type containing the learning rate.
(Default: 1e\-8)
.PD 0
.P
.PD
\f[B]\f[I]verbose\f[]\f[]: An integer parameter specifying the log level
to use.
Its value is 0 by default (for INFO mode and not specified explicitly).
But it can be set to 1 (for DEBUG mode) or 2 (for TRACE mode) for
getting training time logs from frovedis server.
.PD 0
.P
.PD
\f[B]\f[I]solver\f[]\f[]: A string object specifying the solver to use.
(Default: \[aq]sag\[aq])
.PD 0
.P
.PD
It can be "sag" for frovedis side stochastic gradient descent or "lbfgs"
for frovedis side LBFGS optimizer when optimizing the lasso regression
model.
\f[B]Both "sag" and "lbfgs" can handle L1 penalty.\f[]
.PP
\f[B]Attributes\f[]
.PD 0
.P
.PD
\f[B]\f[I]coef_\f[]\f[]: It is a python ndarray (containing float or
double (float64) typed values depending on data\-type of input matrix
(X)) of estimated coefficients for the lasso regression problem.
It has shape \f[B](n_features,)\f[].
.PD 0
.P
.PD
\f[B]\f[I]intercept_(bias)\f[]\f[]: It is a python ndarray (contaning
float or double (float64) typed values depending on data\-type of input
matrix (X)).
If fit_intercept is set to False, the intercept is set to zero.
It has shape \f[B](1,)\f[].
.PD 0
.P
.PD
\f[B]\f[I]n_iter_\f[]\f[]: A positive integer value used to get the
actual iteration point at which the problem is converged.
.PP
\f[B]Purpose\f[]
.PD 0
.P
.PD
It initializes a Lasso object with the given parameters.
.PP
The parameters: "normalize", "precompute", "copy_X", "positive",
"random_state" and "selection" are simply kept in to to make the
interface uniform to the Scikit\-learn Lasso module.
They are not used anywhere within the frovedis implementation.
.PP
\f[B]Return Value\f[]
.PD 0
.P
.PD
It simply returns "self" reference.
.SS 2. fit(X, y, sample_weight = None)
.PP
\f[B]Parameters\f[]
.PD 0
.P
.PD
\f[B]\f[I]X\f[]\f[]: A numpy dense or scipy sparse matrix or any python
array\-like object or an instance of FrovedisCRSMatrix for sparse data
and FrovedisColmajorMatrix for dense data.
.PD 0
.P
.PD
\f[B]\f[I]y\f[]\f[]: Any python array\-like object or an instance of
FrovedisDvector containing the target values.
It has shape \f[B](n_samples,)\f[].
.PD 0
.P
.PD
\f[B]\f[I]sample_weight\f[]\f[]: Python ndarray containing the intended
weights for each input samples and it should be the shape of
\f[B](n_samples,)\f[].
.PD 0
.P
.PD
When it is None (not specified explicitly), an uniform weight vector is
assigned on each input sample.
(Default: None)
.PP
\f[B]Purpose\f[]
.PD 0
.P
.PD
It accepts the training feature matrix (X) and corresponding output
labels (y) as inputs from the user and trains a lasso regression model
with L1 regularization with those data at frovedis server.
.PP
When native python data is provided, it is converted to frovedis\-like
inputs and sent to frovedis server which consumes some data transfer
time.
Pre\-constructed frovedis\-like inputs can be used as well to speed up
the training time, especially when same data would be used for multiple
executions.
.PP
\f[B]Return Value\f[]
.PD 0
.P
.PD
It simply returns "self" reference.
.SS 3. predict(X)
.PP
\f[B]Parameters\f[]
.PD 0
.P
.PD
\f[B]\f[I]X\f[]\f[]: A numpy dense or scipy sparse matrix or any python
array\-like object or an instance of FrovedisCRSMatrix for sparse data
and FrovedisRowmajorMatrix as for dense data.
.PP
\f[B]Purpose\f[]
.PD 0
.P
.PD
It accepts the test feature matrix (X) in order to make prediction on
the trained model at frovedis server.
.PP
In case pre\-constructed frovedis\-like training data such as
FrovedisColmajorMatrix (X) is provided during prediction, then
"X.to_frovedis_rowmatrix()" will be used for prediction.
.PP
\f[B]Return Value\f[]
.PD 0
.P
.PD
It returns a numpy array of float or double (float64) type and has shape
\f[B](n_samples,)\f[] containing the predicted outputs.
.SS 4. score(X, y, sample_weight = None)
.PP
\f[B]Parameters\f[]
.PD 0
.P
.PD
\f[B]\f[I]X\f[]\f[]: A numpy dense or scipy sparse matrix or any python
array\-like object or an instance of FrovedisCRSMatrix for sparse data
and FrovedisRowmajorMatrix for dense data.
.PD 0
.P
.PD
\f[B]\f[I]y\f[]\f[]: Any python array\-like object containing true
values for X.
It has shape \f[B](n_samples,)\f[].
.PD 0
.P
.PD
\f[B]\f[I]sample_weight\f[]\f[]: Python ndarray containing the intended
weights for each input samples and it should be the shape of
\f[B](n_samples,)\f[].
.PD 0
.P
.PD
When it is None (not specified explicitly), an uniform weight vector is
assigned on each input sample.
(Default: None)
.PP
\f[B]Purpose\f[]
.PD 0
.P
.PD
Calculate the root mean square value on the given test data and labels
i.e.
R2(r\-squared) of self.predict(X) wrt.
y.
.PP
The coefficient \[aq]R2\[aq] is defined as (1 \- (u/v)),
.PD 0
.P
.PD
where \[aq]u\[aq] is the residual sum of squares ((y_true \- y_pred) **
2).sum() and
.PD 0
.P
.PD
\[aq]v\[aq] is the total sum of squares ((y_true \- y_true.mean()) **
2).sum().
.PD 0
.P
.PD
The best possible score is 1.0 and it can be negative (because the model
can be arbitrarily worse).
A constant model that always predicts the expected value of y,
disregarding the input features, would get a R2 score of 0.0.
.PP
\f[B]Return Value\f[]
.PD 0
.P
.PD
It returns an R2 score of float type.
.SS 5. get_params(deep = True)
.PP
\f[B]Parameters\f[]
.PD 0
.P
.PD
\f[I]\f[B]deep\f[]\f[]: A boolean parameter, used to get parameters and
their values for an estimator.
If True, it will return the parameters for an estimator and contained
subobjects that are estimators.
(Default: True)
.PP
\f[B]Purpose\f[]
.PD 0
.P
.PD
This method belongs to the BaseEstimator class inherited by Lasso.
It is used to get parameters and their values of Lasso class.
.PP
\f[B]Return Value\f[]
.PD 0
.P
.PD
A dictionary of parameter names mapped to their values.
.SS 6. set_params(**params)
.PP
\f[B]Parameters\f[]
.PD 0
.P
.PD
\f[I]\f[B]**params\f[]\f[]: All the keyword arguments are passed to this
function as dictionary.
This dictionary contains parameters of an estimator with its given
values to set.
.PP
\f[B]Purpose\f[]
.PD 0
.P
.PD
This method belongs to the BaseEstimator class inherited by Lasso, used
to set parameter values.
.PP
\f[B]Return Value\f[]
.PD 0
.P
.PD
It simply returns "self" reference.
.SS 7. load(fname, dtype = None)
.PP
\f[B]Parameters\f[]
.PD 0
.P
.PD
\f[B]\f[I]fname\f[]\f[]: A string object containing the name of the file
having model information to be loaded.
.PD 0
.P
.PD
\f[B]\f[I]dtype\f[]\f[]: A data\-type is inferred from the input data.
Currently, expected input data\-type is either float or double
(float64).
(Default: None)
.PP
\f[B]Purpose\f[]
.PD 0
.P
.PD
It loads the model from the specified file (having little\-endian binary
data).
.PP
\f[B]Return Value\f[]
.PD 0
.P
.PD
It simply returns "self" reference.
.SS 8. save(fname)
.PP
\f[B]Parameters\f[]
.PD 0
.P
.PD
\f[B]\f[I]fname\f[]\f[]: A string object containing the name of the file
on which the target model is to be saved.
.PP
\f[B]Purpose\f[]
.PD 0
.P
.PD
On success, it writes the model information (metadata and model) in the
specified file as little\-endian binary data.
Otherwise, it throws an exception.
.PP
Suppose \[aq]LassoModel\[aq] directory is the model created, It will
have
.PP
\f[B]LassoModel\f[]
.PD 0
.P
.PD
|\-\-\-\-\-\-\-\- metadata
.PD 0
.P
.PD
|\-\-\-\-\-\-\-\- model
.PP
The metadata file contains the number of classes, model kind, input
datatype used for trained model.
.PD 0
.P
.PD
Here, the model file contains information about weights, intercept and
threshold.
.PP
It would raise exception if the \[aq]LassoModel\[aq] directory already
existed with same name.
.PP
\f[B]Return Value\f[]
.PD 0
.P
.PD
It returns nothing.
.SS 9. debug_print()
.PP
\f[B]Purpose\f[]
.PD 0
.P
.PD
It shows the target model information like weight values, intercept on
the server side user terminal.
It is mainly used for debugging purpose.
.PP
\f[B]No such output will be visible on client side.\f[]
.PP
\f[B]Return Value\f[]
.PD 0
.P
.PD
It returns nothing.
.SS 10. release()
.PP
\f[B]Purpose\f[]
.PD 0
.P
.PD
It can be used to release the in\-memory model at frovedis server.
With this, after\-fit populated attributes are reset to None, along with
releasing server side memory.
.PP
\f[B]Return Value\f[]
.PD 0
.P
.PD
It returns nothing.
.SS 11. is_fitted()
.PP
\f[B]Purpose\f[]
.PD 0
.P
.PD
It can be used to confirm if the model is already fitted or not.
In case, predict() is used before training the model, then it can prompt
the user to train the lasso regression model first.
.PP
\f[B]Return Value\f[]
.PD 0
.P
.PD
It returns \[aq]True\[aq], if the model is already fitted otherwise, it
returns \[aq]False\[aq].
.SH SEE ALSO
.PP
linear_regression, ridge_regression, dvector, crs_matrix,
colmajor_matrix, rowmajor_matrix
