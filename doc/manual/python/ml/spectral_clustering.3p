.TH "Spectral Clustering" "" "" "" ""
.SH NAME
.PP
Spectral Clustering \- A clustering algorithm commonly used in EDA
(exploratory data analysis).
It uses the spectrum (eigenvalues) of the similarity matrix of the data
to perform clustering.
.SH SYNOPSIS
.PP
class frovedis.mllib.cluster.SpectralClustering(n_clusters=8,
eigen_solver=None, n_components=None,
.PD 0
.P
.PD
\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ 
\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ random_state=None,
n_init=10, gamma=1.0,
.PD 0
.P
.PD
\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ 
\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ affinity=\[aq]rbf\[aq],
n_neighbors=10, eigen_tol=0.0,
.PD 0
.P
.PD
\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ 
\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ assign_labels=\[aq]kmeans\[aq],
degree=3, coef0=1,
.PD 0
.P
.PD
\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ 
\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ kernel_params=None,
n_jobs=None, verbose=0,
.PD 0
.P
.PD
\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ 
\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ max_iter=300, eps=1e\-4,
norm_laplacian=True,
.PD 0
.P
.PD
\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ 
\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ mode=3, drop_first=True)
.SS Public Member Functions
.PP
fit(X, y = None)
.PD 0
.P
.PD
fit_predict(X, y = None)
.PD 0
.P
.PD
score(X, y, sample_weight = None)
.PD 0
.P
.PD
get_params(deep = True)
.PD 0
.P
.PD
set_params(**params)
.PD 0
.P
.PD
load(fname, dtype = None)
.PD 0
.P
.PD
save(fname)
.PD 0
.P
.PD
debug_print()
.PD 0
.P
.PD
release()
.PD 0
.P
.PD
is_fitted()
.SH DESCRIPTION
.PP
Clustering is an unsupervised learning problem where we aim to group
subsets of entities with one another based on some notion of similarity.
.PP
In Spectral Clustering, the data points are treated as nodes of a graph.
Thus, clustering is treated as a graph partitioning problem.
The nodes are then mapped to a low\-dimensional space that can be easily
segregated to form clusters.
.PP
This module provides a client\-server implementation, where the client
application is a normal python program.
The frovedis interface is almost same as Scikit\-learn Spectral
Clustering interface, but it doesn\[aq]t have any dependency with
Scikit\-learn.
It can be used simply even if the system doesn\[aq]t have Scikit\-learn
installed.
Thus in this implementation, a python client can interact with a
frovedis server sending the required python data for training at
frovedis side.
Python data is converted into frovedis compatible data internally and
the python ML call is linked with the respective frovedis ML call to get
the job done at frovedis server.
.PP
Python side calls for Spectral Clustering on the frovedis server.
Once the training is completed with the input data at the frovedis
server, it returns an abstract model with a unique model ID to the
client python program.
.PP
When prediction\-like request would be made on the trained model, python
program will send the same request to the frovedis server.
After the request is served at the frovedis server, the output would be
sent back to the python client.
.SS Detailed Description
.SS 1. SpectralClustering()
.PP
\f[B]Parameters\f[]
.PD 0
.P
.PD
\f[B]\f[I]n_clusters\f[]\f[]: A positive integer parameter specifying
the number of clusters.
The number of clusters should be greater than 0 and less than or equal
to n_samples.
(Default: 8)
.PD 0
.P
.PD
\f[B]\f[I]eigen_solver\f[]\f[]: A string object parameter.
It is the eigenvalue decomposition strategy to use.
(Default: None)
.PD 0
.P
.PD
When it is None (not specified explicitly), it will be set as
\[aq]arpack\[aq].
Only \[aq]arpack\[aq] eigen solver is supported.
.PD 0
.P
.PD
\f[B]\f[I]n_components\f[]\f[]: A positive integer parameter containing
the number of components for clusters.
It is used to compute the number of eigenvectors for spectral embedding.
The number of components should be in between 1 to n_features.
(Default: None)
.PD 0
.P
.PD
When it is None (not specified explicitly), it will be equal to the
number of clusters.
.PD 0
.P
.PD
\f[B]\f[I]random_state\f[]\f[]: Zero or positive integer parameter.
It is None by default.
.PD 0
.P
.PD
When it is None (not specified explicitly), it will be set as 0.
(unused)
.PD 0
.P
.PD
\f[B]\f[I]n_init\f[]\f[]: A positive integer parameter that specifies
the number of times the k\-means algorithm will be run with different
centroid seeds.
(Default: 10)
.PD 0
.P
.PD
\f[B]\f[I]gamma\f[]\f[]: The double (float64) parameter required for
computing nearby relational meaningful eigenvalues.
(Default: 1.0)
.PD 0
.P
.PD
When it is None (specified explicitly), it will be set as 1.0.
.PD 0
.P
.PD
Kernel coefficient for rbf is "[np.exp(\-gamma * d(X,X) ** 2)]" kernel.
Ignored for affinity=\[aq]nearest_neighbors\[aq].
.PD 0
.P
.PD
\f[B]\f[I]affinity\f[]\f[]: A string object parameter which tells how to
construct the affinity matrix.
(Default: \[aq]rbf\[aq])
.PD 0
.P
.PD
When it is None (specified explicitly), it will be set as \[aq]rbf\[aq].
Only \[aq]rbf\[aq], \[aq]nearest_neighbors\[aq] and
\[aq]precomputed\[aq] are supported.
.PD 0
.P
.PD
\- \[aq]nearest_neighbors\[aq]: construct the affinity matrix by
computing a graph of nearest neighbors.
.PD 0
.P
.PD
\- \[aq]rbf\[aq]: construct the affinity matrix using a radial basis
function (RBF) kernel.
.PD 0
.P
.PD
\- \[aq]precomputed\[aq]: interpret X as a precomputed affinity matrix,
where larger values indicate greater similarity between instances.
.PD 0
.P
.PD
\f[B]\f[I]n_neighbors\f[]\f[]: A positive integer parameter that
specifies the number of neighbors to be used when constructing the
affinity matrix using the nearest neighbors method.
It must be in between 1 to n_samples.
It is applicable only when affinity = \[aq]nearest_neighbors\[aq].
(Default: 10)
.PD 0
.P
.PD
\f[B]\f[I]eigen_tol\f[]\f[]: Stopping criterion for eigen decomposition
of the Laplacian matrix when using \[aq]arpack\[aq] eigen_solver.
(unused)
.PD 0
.P
.PD
\f[B]\f[I]assign_labels\f[]\f[]: A string object parameter that
specifies the strategy to use to assign labels in the embedding space.
When it is None (specified explicitly), it will be set as
\[aq]kmeans\[aq].
Only \[aq]kmeans\[aq] is supported.
(Default: \[aq]kmeans\[aq])
.PD 0
.P
.PD
\f[B]\f[I]degree\f[]\f[]: Degree of the polynomial kernel.
(unused)
.PD 0
.P
.PD
\f[B]\f[I]coef0\f[]\f[]: Zero coefficient for polynomial and sigmoid
kernels.
(unused)
.PD 0
.P
.PD
\f[B]\f[I]kernel_params\f[]\f[]: Parameters (keyword arguments) and
values for kernel.
(unused)
.PD 0
.P
.PD
\f[B]\f[I]n_jobs\f[]\f[]: The number of parallel jobs to run.
(unused)
.PD 0
.P
.PD
\f[B]\f[I]verbose\f[]\f[]: An integer parameter specifying the log level
to use.
Its value is 0 by default (for INFO mode and not specified explicitly).
But it can be set to 1 (for DEBUG mode) or 2 (for TRACE mode) for
getting training time logs from frovedis server.
.PD 0
.P
.PD
\f[B]\f[I]max_iter\f[]\f[]: A positive integer parameter containing the
maximum number of iteration count for kmeans assignment.
(Default: 300)
.PD 0
.P
.PD
\f[B]\f[I]eps\f[]\f[]: Zero or a positive double parameter containing
the tolerance value for kmeans.
(Default: 1e\-4)
.PD 0
.P
.PD
\f[B]\f[I]norm_laplacian\f[]\f[]: A boolean parameter if set to True,
then compute normalized Laplacian, else not.
(Default: True)
.PD 0
.P
.PD
\f[B]\f[I]mode\f[]\f[]: An integer parameter required to set the eigen
computation method.
It can be either 1 (for generic) or 3 (for shift\-invert).
It is applicable only for dense data.
For more details refer ARPACK computation modes.
(Default: 3)
.PD 0
.P
.PD
\f[B]\f[I]drop_first\f[]\f[]: A boolean parameter if set to True, then
drops the first eigenvector.
The first eigenvector of a normalized Laplacian is full of constants,
thus if it is set to True, then (n_components + 1) eigenvectors are
computed and will drop the first vector.
Otherwise, it will calculate \[aq]n_components\[aq] number of
eigenvectors.
(Default: True)
.PP
\f[B]Attributes\f[]
.PD 0
.P
.PD
\f[B]\f[I]affinity_matrix_\f[]\f[]:
.PD 0
.P
.PD
1.
\f[B]For python native dense input:\f[]
.PD 0
.P
.PD
\- When affinity = \[aq]precomputed/rbf\[aq], it returns a numpy array
.PD 0
.P
.PD
\- When affinity = \[aq]nearest_neighbors\[aq], it returns a scipy
matrix
.PD 0
.P
.PD
2.
\f[B]For frovedis\-like dense input:\f[]
.PD 0
.P
.PD
\- When affinity = \[aq]precomputed/rbf\[aq], returns a
FrovedisRowmajorMatrix
.PD 0
.P
.PD
\- When affinity = \[aq]nearest_neighbors\[aq], returns a
FrovedisCRSMatrix
.PD 0
.P
.PD
3.
\f[B]For python native sparse input:\f[]
.PD 0
.P
.PD
\- When affinity = \[aq]precomputed/nearest_neighbors\[aq], it returns a
scipy matrix
.PD 0
.P
.PD
\- When affinity = \[aq]rbf\[aq], it returns a numpy array
.PD 0
.P
.PD
4.
\f[B]For frovedis\-like sparse input:\f[]
.PD 0
.P
.PD
\- When affinity = \[aq]precomputed/nearest_neighbors\[aq], it a returns
FrovedisCRSMatrix
.PD 0
.P
.PD
\- When affinity = \[aq]rbf\[aq], it returns a FrovedisRowmajorMatrix
.PD 0
.P
.PD
In all cases, the output is of float or double (float64) type and of
shape \f[B](n_samples, n_samples)\f[].
.PD 0
.P
.PD
\f[B]\f[I]labels_\f[]\f[]: A python ndarray of int64 type values and has
shape \f[B](n_clusters,)\f[].
It contains the predicted cluster labels for each point.
.PP
\f[B]Purpose\f[]
.PD 0
.P
.PD
It initializes a Spectral Clustering object with the given parameters.
.PP
The parameters: "eigen_tol", "degree", "coef0", "kernel_params" and
"n_jobs", "random_state" are simply kept in to make the interface
uniform to the Scikit\-learn Spectral Clustering module.
They are not used anywhere within the frovedis implementation.
.PP
\f[B]Return Value\f[]
.PD 0
.P
.PD
It simply returns "self" reference.
.SS 2. fit(X, y = None)
.PP
\f[B]Parameters\f[]
.PD 0
.P
.PD
\f[B]\f[I]X\f[]\f[]: A numpy dense or scipy sparse matrix or any python
array\-like object or an instance of FrovedisCRSMatrix for sparse data
and FrovedisRowmajorMatrix for dense data.
If affinity="precomputed", it needs to be of shape \f[B](n_samples,
n_samples)\f[].
.PD 0
.P
.PD
\f[B]\f[I]y\f[]\f[]: None or any python array\-like object (any shape).
It is simply ignored in frovedis implementation, as in Scikit\-learn as
well.
.PP
\f[B]Purpose\f[]
.PD 0
.P
.PD
It clusters the given data points (X) into a predefined number of
clusters.
.PP
For example,
.IP
.nf
\f[C]
#\ loading\ sample\ matrix\ data
mat\ =\ np.loadtxt("./input/spectral_data.txt")

#\ fitting\ input\ matrix\ on\ SpectralClustering\ object
from\ frovedis.mllib.cluster\ import\ SpectralClustering
spec\ =\ SpectralClustering(n_clusters\ =\ 2).fit(mat)\ \ \ 
\f[]
.fi
.PP
When native python data is provided, it is converted to frovedis\-like
inputs and sent to frovedis server which consumes some data transfer
time.
Pre\-constructed frovedis\-like inputs can be used to speed up the
training time, especially when same data would be used for multiple
executions.
.PP
For example,
.IP
.nf
\f[C]
#\ loading\ sample\ matrix\ data
mat\ =\ np.loadtxt("./input/spectral_data.txt")

#\ Since\ "mat"\ is\ numpy\ dense\ data,\ we\ have\ created\ FrovedisRowmajorMatrix.\ 
#\ For\ scipy\ sparse\ data,\ FrovedisCRSMatrix\ should\ be\ used\ instead.
from\ frovedis.matrix.dense\ import\ FrovedisRowmajorMatrix
rmat\ =\ FrovedisRowmajorMatrix(mat)

#\ Spectral\ Clustering\ with\ pre\-constructed\ frovedis\-like\ inputs
from\ frovedis.mllib.cluster\ import\ SpectralClustering
spec\ =\ SpectralClustering(n_clusters\ =\ 2).fit(rmat)
\f[]
.fi
.PP
\f[B]Return Value\f[]
.PD 0
.P
.PD
It simply returns "self" reference.
.SS 3. fit_predict(X, y = None)
.PP
\f[B]Parameters\f[]
.PD 0
.P
.PD
\f[B]\f[I]X\f[]\f[]: A numpy dense or scipy sparse matrix or any python
array\-like object or an instance of FrovedisCRSMatrix for sparse data
and FrovedisRowmajorMatrix for dense data.
If affinity="precomputed", it needs to be of shape \f[B](n_samples,
n_samples)\f[].
.PD 0
.P
.PD
\f[B]\f[I]y\f[]\f[]: None or any python array\-like object (any shape).
It is simply ignored in frovedis implementation, as in Scikit\-learn as
well.
.PP
\f[B]Purpose\f[]
.PD 0
.P
.PD
It fits the given data points (X) and returns the predicted labels based
on cluster formed during the fit.
.PP
For example,
.IP
.nf
\f[C]
#\ loading\ sample\ matrix\ data
mat\ =\ np.loadtxt("./input/spectral_data.txt")

#\ fitting\ input\ matrix\ on\ Spectral\ Clustering\ object
from\ frovedis.mllib.cluster\ import\ SpectralClustering
spec\ =\ SpectralClustering(n_clusters\ =\ 2)
print(spec.fit_predict(mat))\ 
\f[]
.fi
.PP
Output
.IP
.nf
\f[C]
[0\ 0\ 1\ 1\ 1]
\f[]
.fi
.PP
It prints the predicted cluster labels after training is completed.
.PP
Like in fit(), we can also provide frovedis\-like input in fit_predict()
for faster computation.
.PP
For example,
.IP
.nf
\f[C]
#\ loading\ sample\ matrix\ data
mat\ =\ np.loadtxt("./input/sample_data.txt")

#\ Since\ "mat"\ is\ numpy\ dense\ data,\ we\ have\ created\ FrovedisRowmajorMatrix.\ 
#\ For\ scipy\ sparse\ data,\ FrovedisCRSMatrix\ should\ be\ used\ instead.
from\ frovedis.matrix.dense\ import\ FrovedisRowmajorMatrix
rmat\ =\ FrovedisRowmajorMatrix(mat)

#\ using\ pre\-constructed\ input\ matrix
from\ frovedis.mllib.cluster\ import\ SpectralClustering
spec\ =\ SpectralClustering(n_clusters\ =\ 2)
print(spec.fit_predict(rmat))
\f[]
.fi
.PP
Output
.IP
.nf
\f[C]
[0\ 0\ 1\ 1\ 1]
\f[]
.fi
.PP
It prints the predicted cluster labels after training is completed.
.PP
\f[B]Return Value\f[]
.PD 0
.P
.PD
It returns a numpy array of int32 type values containing the cluster
labels.
It has a shape \f[B](n_samples,)\f[].
.SS 4. score(X, y, sample_weight = None)
.PP
\f[B]Parameters\f[]
.PD 0
.P
.PD
\f[B]\f[I]X\f[]\f[]: A numpy dense or scipy sparse matrix or any python
array\-like object or an instance of FrovedisCRSMatrix for sparse data
and FrovedisRowmajorMatrix for dense data.
If affinity="precomputed", it needs to be of shape \f[B](n_samples,
n_samples)\f[].
.PD 0
.P
.PD
\f[B]\f[I]y\f[]\f[]: A python ndarray or an instance of FrovedisVector.
It has shape \f[B](n_samples,1)\f[].
.PD 0
.P
.PD
\f[B]\f[I]sample_weight\f[]\f[]: An unused parameter whose default value
is None.
It is simply ignored in frovedis implementation.
.PP
\f[B]Purpose\f[]
.PD 0
.P
.PD
It uses homogeneity score on given true labels and predicted labels i.e
homogeneity score of self.predict(X, y) wrt.
y.
.PP
For example,
.IP
.nf
\f[C]
spec.score(train_mat,\ [0,\ 0,\ 1,\ 1,\ 1])\ \ 
\f[]
.fi
.PP
Output
.IP
.nf
\f[C]
1.0\ 
\f[]
.fi
.PP
\f[B]Return Value\f[]
.PD 0
.P
.PD
It returns a homogeneity score of float type.
.SS 5. get_params(deep = True)
.PP
\f[B]Parameters\f[]
.PD 0
.P
.PD
\f[I]\f[B]deep\f[]\f[]: A boolean parameter, used to get parameters and
their values for an estimator.
If True, it will return the parameters for an estimator and contained
subobjects that are estimators.
(Default: True)
.PP
\f[B]Purpose\f[]
.PD 0
.P
.PD
This method belongs to the BaseEstimator class inherited by
SpectralClustering.
It is used to get parameters and their values of SpectralClustering
class.
.PP
For example,
.IP
.nf
\f[C]
\ \ print(spec.get_params())
\f[]
.fi
.PP
Output
.IP
.nf
\f[C]
{\[aq]affinity\[aq]:\ \[aq]rbf\[aq],\ \[aq]assign_labels\[aq]:\ \[aq]kmeans\[aq],\ \[aq]coef0\[aq]:\ 1,\ \[aq]degree\[aq]:\ 3,\ 
\[aq]drop_first\[aq]:\ True,\ \[aq]eigen_solver\[aq]:\ \[aq]arpack\[aq],\ \[aq]eigen_tol\[aq]:\ 0.0,\ \[aq]eps\[aq]:\ 0.0001,\ 
\[aq]gamma\[aq]:\ 1.0,\ \[aq]kernel_params\[aq]:\ None,\ \[aq]max_iter\[aq]:\ 300,\ \[aq]mode\[aq]:\ 3,\ \[aq]n_clusters\[aq]:\ 2,\ 
\[aq]n_components\[aq]:\ 2,\ \[aq]n_init\[aq]:\ 10,\ \[aq]n_jobs\[aq]:\ None,\ \[aq]n_neighbors\[aq]:\ 10,\ 
\[aq]norm_laplacian\[aq]:\ True,\ \[aq]random_state\[aq]:\ None,\ \[aq]verbose\[aq]:\ 0}
\f[]
.fi
.PP
\f[B]Return Value\f[]
.PD 0
.P
.PD
A dictionary of parameter names mapped to their values.
.SS 6. set_params(**params)
.PP
\f[B]Parameters\f[]
.PD 0
.P
.PD
\f[I]\f[B]**params\f[]\f[]: All the keyword arguments are passed to this
function as dictionary.
This dictionary contains parameters of an estimator with its given
values to set.
.PP
\f[B]Purpose\f[]
.PD 0
.P
.PD
This method belongs to the BaseEstimator class inherited by
SpectralClustering, used to set parameter values.
.PP
For example,
.IP
.nf
\f[C]
print("get\ parameters\ before\ setting:")\ 
print(spec.get_params())
#\ User\ just\ needs\ to\ provide\ the\ arguments\ and\ internally\ it\ will\ create\ a\ 
dictionary\ over\ the\ arguments\ given\ by\ user
spec.set_params(n_clusters\ =\ 3,\ affinity\ =\ \[aq]precomputed\[aq])\ 
print("get\ parameters\ after\ setting:")\ 
print(spec.get_params())
\f[]
.fi
.PP
Output
.IP
.nf
\f[C]
get\ parameters\ before\ setting:
{\[aq]affinity\[aq]:\ \[aq]rbf\[aq],\ \[aq]assign_labels\[aq]:\ \[aq]kmeans\[aq],\ \[aq]coef0\[aq]:\ 1,\ \[aq]degree\[aq]:\ 3,\ 
\[aq]drop_first\[aq]:\ True,\ \[aq]eigen_solver\[aq]:\ \[aq]arpack\[aq],\ \[aq]eigen_tol\[aq]:\ 0.0,\ \[aq]eps\[aq]:\ 0.0001,\ 
\[aq]gamma\[aq]:\ 1.0,\ \[aq]kernel_params\[aq]:\ None,\ \[aq]max_iter\[aq]:\ 300,\ \[aq]mode\[aq]:\ 3,\ \[aq]n_clusters\[aq]:\ 2,\ 
\[aq]n_components\[aq]:\ 2,\ \[aq]n_init\[aq]:\ 10,\ \[aq]n_jobs\[aq]:\ None,\ \[aq]n_neighbors\[aq]:\ 10,\ 
\[aq]norm_laplacian\[aq]:\ True,\ \[aq]random_state\[aq]:\ None,\ \[aq]verbose\[aq]:\ 0}
get\ parameters\ after\ setting:
{\[aq]affinity\[aq]:\ \[aq]precomputed\[aq],\ \[aq]assign_labels\[aq]:\ \[aq]kmeans\[aq],\ \[aq]coef0\[aq]:\ 1,\ \[aq]degree\[aq]:\ 3,\ 
\[aq]drop_first\[aq]:\ True,\ \[aq]eigen_solver\[aq]:\ \[aq]arpack\[aq],\ \[aq]eigen_tol\[aq]:\ 0.0,\ \[aq]eps\[aq]:\ 0.0001,\ 
\[aq]gamma\[aq]:\ 1.0,\ \[aq]kernel_params\[aq]:\ None,\ \[aq]max_iter\[aq]:\ 300,\ \[aq]mode\[aq]:\ 3,\ \[aq]n_clusters\[aq]:\ 3,\ 
\[aq]n_components\[aq]:\ 2,\ \[aq]n_init\[aq]:\ 10,\ \[aq]n_jobs\[aq]:\ None,\ \[aq]n_neighbors\[aq]:\ 10,\ 
\[aq]norm_laplacian\[aq]:\ True,\ \[aq]random_state\[aq]:\ None,\ \[aq]verbose\[aq]:\ 0}
\f[]
.fi
.PP
\f[B]Return Value\f[]
.PD 0
.P
.PD
It simply returns "self" reference.
.SS 7. load(fname, dtype = None)
.PP
\f[B]Parameters\f[]
.PD 0
.P
.PD
\f[B]\f[I]fname\f[]\f[]: A string object containing the name of the file
having model information to be loaded.
.PD 0
.P
.PD
\f[B]\f[I]dtype\f[]\f[]: A data\-type is inferred from the input data.
Currently, expected input data\-type is either float or double(float64).
(Default: None)
.PP
\f[B]Purpose\f[]
.PD 0
.P
.PD
It loads a spectral clustering model stored previously from the
specified file (having little\-endian binary data).
.PP
For example,
.IP
.nf
\f[C]
spec.load("./out/MySpecClusteringModel",\ dtype\ =\ np.float64)
\f[]
.fi
.PP
\f[B]Return Value\f[]
.PD 0
.P
.PD
It simply returns "self" reference.
.SS 8. save(fname)
.PP
\f[B]Parameters\f[]
.PD 0
.P
.PD
\f[B]\f[I]fname\f[]\f[]: A string object containing the name of the file
on which the target model is to be saved.
.PP
\f[B]Purpose\f[]
.PD 0
.P
.PD
On success, it writes the model information (after\-fit populated
attributes) in the specified file as little\-endian binary data.
Otherwise, it throws an exception.
.PP
For example,
.IP
.nf
\f[C]
#\ To\ save\ the\ spectral\ clustering\ model
spec.save("./out/MySpecClusteringModel")\ \ 
\f[]
.fi
.PP
This will save the spectral clustering model on the path
"/out/MySpecClusteringModel".
.PD 0
.P
.PD
It would raise exception if the directory already exists with same name.
.PP
The \[aq]MySpecClusteringModel\[aq] directory has
.PP
\f[B]MySpecClusteringModel\f[]
.PD 0
.P
.PD
|\-\-\-\-\-metadata
.PD 0
.P
.PD
|\-\-\-\-\-\f[B]model\f[]
.PD 0
.P
.PD
\ \ \ \ \ \ |\-\-\-\-\-\-\-\- aff_type
.PD 0
.P
.PD
\ \ \ \ \ \ |\-\-\-\-\-\-\-\- \f[B]affinity\f[]
.PD 0
.P
.PD
\ \ \ \ \ \ |\-\-\-\-\-\-\-\- cluster_size
.PD 0
.P
.PD
\ \ \ \ \ \ |\-\-\-\-\-\-\-\- label
.PP
The metadata file contains the number of clusters, number of components,
model kind, input datatype used for trained model.
.PD 0
.P
.PD
Here, the \f[B]model\f[] directory contains information about affinity
type, labels, cluster size and \f[B]affinity\f[] matrix (sparse or
dense, depending upon python/frovedis input and affinity is
\[aq]rbf\[aq], \[aq]precomputed\[aq] or \[aq]nearest_neighbors\[aq]).
.PP
\f[B]Return Value\f[]
.PD 0
.P
.PD
It returns nothing.
.SS 9. debug_print()
.PP
\f[B]Purpose\f[]
.PD 0
.P
.PD
It shows the target model information (affinity matrix) on the server
side user terminal.
It is mainly used for debugging purpose.
.PP
For example,
.IP
.nf
\f[C]
spec.debug_print()\ 
\f[]
.fi
.PP
Output
.IP
.nf
\f[C]
affinity\ matrix:
num_row\ =\ 5,\ num_col\ =\ 5
node\ 0
node\ =\ 0,\ local_num_row\ =\ 5,\ local_num_col\ =\ 5,\ val\ =\ 1\ 0.970446\ 6.2893e\-104\ 2.92712e\-106\ 
1.28299e\-108\ 0.970446\ 1\ 1.27264e\-101\ 6.2893e\-104\ 2.92712e\-106\ 6.2893e\-104\ 1.27264e\-101\ 1\ 
0.970446\ 0.88692\ 2.92712e\-106\ 6.2893e\-104\ 0.970446\ 1\ 0.970446\ 1.28299e\-108\ 2.92712e\-106\ 
0.88692\ 0.970446\ 1
labels:
0\ 0\ 1\ 1\ 1
ncluster:\ 2
\f[]
.fi
.PP
It dispays the affinity matrix.
.PP
\f[B]Return Value\f[]
.PD 0
.P
.PD
It returns nothing.
.SS 10. release()
.PP
\f[B]Purpose\f[]
.PD 0
.P
.PD
It can be used to release the in\-memory model at frovedis server.
.PP
For example,
.IP
.nf
\f[C]
spec.release()
\f[]
.fi
.PP
This will reset the after\-fit populated attributes to None, along with
releasing server side memory.
.PP
\f[B]Return Value\f[]
.PD 0
.P
.PD
It returns nothing.
.SS 11. is_fitted()
.PP
\f[B]Purpose\f[]
.PD 0
.P
.PD
It can be used to confirm if the model is already fitted or not.
.PP
\f[B]Return Value\f[]
.PD 0
.P
.PD
It returns ‘True', if the model is already fitted otherwise, it returns
‘False'.
.SH SEE ALSO
.PP
agglomerative_clustering, dbscan, kmeans, rowmajor_matrix, crs_matrix
