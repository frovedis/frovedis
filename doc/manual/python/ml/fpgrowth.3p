.TH "FPGrowth" "" "" "" ""
.SH NAME
.PP
FPGrowth \- A frequent pattern mining algorithm supported by Frovedis.
.SH SYNOPSIS
.PP
class frovedis.mllib.fpm.FPGrowth(minSupport = 0.3, minConfidence=0.8,
.PD 0
.P
.PD
\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ 
\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ itemsCol=\[aq]items\[aq],
predictionCol=\[aq]prediction\[aq],
.PD 0
.P
.PD
\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ 
\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ numPartitions=None, tree_depth=None,
.PD 0
.P
.PD
\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ 
\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ compression_point=4, mem_opt_level=0,
.PD 0
.P
.PD
\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ 
\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ verbose=0, encode_string_input=False)
.SS Public Member Functions
.PP
fit(data)
.PD 0
.P
.PD
generate_rules(confidence = None)
.PD 0
.P
.PD
transform(data)
.PD 0
.P
.PD
load(fname)
.PD 0
.P
.PD
save(fname)
.PD 0
.P
.PD
debug_print()
.PD 0
.P
.PD
release()
.PD 0
.P
.PD
is_fitted()
.SH DESCRIPTION
.PP
FPGrowth is an algorithm for discovering frequent itemsets in a
transaction database.
The input of FPGrowth is a set of transactions called transaction
database.
Each transaction is a set of items.
Frovedis supports numeric and non\-numeric values for transaction data.
.PP
For example, consider the following transaction database.
It contains 4 transactions (t1, t2, .., t4) and 4 items (1, 2, 3, 4).
The first transaction represents the set of items 1, 2 , 3 and 4.
.IP
.nf
\f[C]
Transaction\ id\ \ \ \ \ \ Items\ \ 
t1\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ {1,\ 2,\ 3,\ 4}\ \ 
t2\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ {1,\ 2,\ 3}\ \ 
t3\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ {1,\ 2}\ \ 
t4\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ {1}\ \ 
\f[]
.fi
.PP
It is important to note that repetition of item in any given transaction
needs to be avoided.
It would raise exception in that case.
.PP
Now, if FPGrowth is run on the above transaction database with a
minSupport of 40% and a tree_depth of 5 levels,
.PP
FPGrowth produces the following result:
.IP
.nf
\f[C]
items\ \ \ \ \ \ \ \ \ \ \ \ \ freq
[1]\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ 4
[2]\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ 3
[3]\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ 2
[2,\ 1]\ \ \ \ \ \ \ \ \ \ \ \ 3
[3,\ 1]\ \ \ \ \ \ \ \ \ \ \ \ 2
[3,\ 2]\ \ \ \ \ \ \ \ \ \ \ \ 2
[3,\ 2,\ 1]\ \ \ \ \ \ \ \ \ 2
\f[]
.fi
.PP
In the results, each itemset is annotated with its corresponding
frequency.
.PP
This module provides a client\-server implementation, where the client
application is a normal python program.
In this implementation, a python client can interact with a frovedis
server by sending the required python data for training at frovedis
side.
Python data is converted into frovedis compatible data internally and
the python ML call is linked with the respective frovedis ML call to get
the job done at frovedis server.
.PP
Python side calls for FPGrowth on the frovedis server.
Once the training is completed with the input data at the frovedis
server, it returns an abstract model with a unique model ID to the
client python program.
.PP
When prediction\-like request would be made on the trained model, python
program will send the same request to the frovedis server.
After the request is served at the frovedis server, the output would be
sent back to the python client.
.SS Detailed Description
.SS 1. FPGrowth()
.PP
\f[B]Parameters\f[]
.PD 0
.P
.PD
\f[B]\f[I]minSupport\f[]\f[]: A positive double(float64) type value that
specifies the minimum support level of frequent itemsets.
Its value must be within 0 to 1.
(Default: 0.3)
.PD 0
.P
.PD
\f[B]\f[I]minConfidence\f[]\f[]: A positive double(float64) type value
that specifies the minimal confidence for generating association rules.
It will not affect the mining for frequent itemsets, but will affect the
association rules generation.
Its value must be within 0 to 1.
(Default: 0.8)
.PD 0
.P
.PD
\f[B]\f[I]itemsCol\f[]\f[]: An unsed parameter.
(Default: \[aq]items\[aq])
.PD 0
.P
.PD
\f[B]\f[I]predictionCol\f[]\f[]: An unsed parameter.
(Default: \[aq]prediction\[aq])
.PD 0
.P
.PD
\f[B]\f[I]numPartitions\f[]\f[]: An unsed parameter.
(Default: None)
.PD 0
.P
.PD
\f[B]\f[I]tree_depth\f[]\f[]: A positive integer parameter specifying
the maximum number of levels for tree construction.
Its value must be greater than 1.
(Default: None)
.PD 0
.P
.PD
When it is None (not specified explicitly), the tree is constructed to
its maximum depth according to the data.
Since transaction databases tend to be very large, there may be a
scenario wherin entire FP tree cannot be contained in memory.
In those cases, the size of FP tree may be limited by using this
parameter.
.PD 0
.P
.PD
\f[B]\f[I]compression_point\f[]\f[]: A positive integer parameter.
This is an internal memory optimisation strategy which helps when
working with large transaction databases.
Its value must be greater than or equal to 2.
No compression will be performed till the level specified by this
parameter is reached.
(Default: 4)
.PD 0
.P
.PD
\f[B]\f[I]mem_opt_level\f[]\f[]: An integer value which must be either 0
(memory optimisation OFF) or 1 (memory optimisation ON).
If switched On, it will lead to removal of redundant tree data residing
in memory at server side.
It should only be used where systems have memory constraints.
By default, it is 0, but in case of memory constraints, execution should
be attempted keeping this value as 1, it will help in reducing memory
footprint.
However, when it is 1, it might still cause memory issue in case data is
too big.
In this case, data may be spilled onto disk if this environment variable
has been set.
This will degrade performance (execution time).
.PD 0
.P
.PD
\f[B]\f[I]verbose\f[]\f[]: An integer parameter specifying the log level
to use.
Its value is 0 by default(INFO level).
But it can be set to 1 (DEBUG level) or 2 (TRACE level) for getting
training time logs from frovedis server.
.PD 0
.P
.PD
\f[B]\f[I]encode_string_input\f[]\f[]: A boolean parameter when set to
True, encodes the non\-numeric (like strings) itemset values.
It first internally encodes the named\-items to an encoded
numbered\-items and the encoded dataframe is used for further training
at frovedis server.
It helps to train the encoded fpgrowth model faster with non\-numeric
itemsets since data present with server is two column dataframe,
operations like join(), etc are little on slower on non\-numeric columns
than the numeric columns.
(Default: False)
.PP
For example,
.IP
.nf
\f[C]
#\ let\ data\ be\ some\ non\-numeric\ transaction\ database\ 
data\ =\ [[\[aq]banana\[aq],\[aq]apple\[aq],\[aq]mango\[aq],\[aq]cake\[aq]],
\ \ \ \ \ \ \ \ [\[aq]cake\[aq],\[aq]banana\[aq],\[aq]apple\[aq]],
\ \ \ \ \ \ \ \ [\[aq]bread\[aq],\[aq]banana\[aq]],
\ \ \ \ \ \ \ \ [\[aq]banana\[aq]]]
#\ Using\ FPGrowth\ object\ with\ memory\ optimization\ parameters\ for\ training\ 
#\ Here,\ disabling\ the\ parameter\ encode_string_input\ =\ False\ by\ default
from\ frovedis.mllib.fpm\ import\ FPGrowth
fpm\ =\ FPGrowth(minSupport\ =\ 0.01,\ minConfidence\ =\ 0.5,\ compression_point\ =\ 4,\ mem_opt_level\ =\ 1)\ 
fpm.fit(data)
\f[]
.fi
.PP
Frequent itemsets generation time: 0.0361 sec
.PP
And, when enabling \[aq]encode_string_input\[aq] with the same
non\-numeric data,
.IP
.nf
\f[C]
#\ Using\ FPGrowth\ object\ with\ memory\ optimization\ parameters\ for\ training\ 
#\ Here,\ parameter\ encode_string_input\ =\ True\ 
from\ frovedis.mllib.fpm\ import\ FPGrowth
fpm\ =\ FPGrowth(minSupport\ =\ 0.01,\ minConfidence\ =\ 0.5,\ compression_point\ =\ 4,\ 
\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ mem_opt_level\ =\ 1,\ encode_string_input\ =\ True)\ 
fpm.fit(data)
\f[]
.fi
.PP
Frequent itemsets generation time: 0.0315 sec
.PP
\f[B]Attributes\f[]
.PD 0
.P
.PD
\f[B]\f[I]freqItemsets\f[]\f[]: A pandas dataframe having two fields,
\[aq]items\[aq] and \[aq]freq\[aq], where \[aq]items\[aq] is an array
whereas \[aq]freq\[aq] is double(float64) type value.
It contains the itemsets along with their frequency values.
Here, the frequency of an itemset signifies as to how many times the
itemset appears in the transaction database.
.PD 0
.P
.PD
\f[B]\f[I]associationRules\f[]\f[]: A pandas dataframe having six
fields, \[aq]antecedent\[aq], \[aq]consequent\[aq],
\[aq]confidence\[aq], \[aq]lift\[aq], \[aq]support\[aq] and
\[aq]conviction\[aq].
.PD 0
.P
.PD
Every association rule is composed of two parts: an antecedent (if) and
a consequent (then).
.PD 0
.P
.PD
An \[aq]antecedent\[aq] is an item found within the data.
A \[aq]consequent\[aq] is an item found in combination with the
\[aq]antecedent\[aq].
Both are itemsets (arrays).
.PD 0
.P
.PD
For measuring the effectiveness of association rule,
\[aq]confidence\[aq], \[aq]lift\[aq], \[aq]support\[aq] and
\[aq]conviction\[aq] are used.
All are double(float64) type values.
.PD 0
.P
.PD
\[aq]confidence\[aq] refers to the amount of times a given rule turns
out to be true in practice.
.PD 0
.P
.PD
\[aq]support\[aq] is an indication of how frequently the itemset appears
in the dataset.
.PD 0
.P
.PD
\[aq]lift\[aq] is the ratio of confidence to support.
If the rule has a lift of 1, it would imply that the probability of
occurrence of the \[aq]antecedent\[aq] and that of the
\[aq]consequent\[aq] are independent of each other.
When two events are independent of each other, no rule can be drawn
involving those two events.
If the lift is greater than 1, that lets us know the degree to which
those two occurrences are dependent on one another, and makes those
rules potentially useful for predicting the consequent in future data
sets.
If the lift is less than 1, that lets us know the items are substitute
to each other.
This means that presence of one item has negative effect on presence of
other item and vice versa.
.PD 0
.P
.PD
\[aq]conviction\[aq] compares the probability that X appears without Y
if they were dependent with the actual frequency of the appearance of X
without Y.
If it equals 1, then they are completely unrelated.
.PD 0
.P
.PD
\f[B]\f[I]count\f[]\f[]: A positive integer value which specifies the
frequent itemsets count.
.PD 0
.P
.PD
\f[B]\f[I]encode_logic\f[]\f[]: A python dictionary having transaction
items with a corresponding encoded number as key\-value pairs.
It is only available when transaction items are have string values and
\[aq]encode_string_input\[aq] parameter is set to True.
Otherwise it is None.
This is used internally to perform auto decoding of items during
\[aq]freqItemsets\[aq] construction.
.PP
For example,
.IP
.nf
\f[C]
#\ let\ data\ be\ some\ non\-numeric\ transaction\ database\ 
data\ =\ [[\[aq]banana\[aq],\[aq]apple\[aq],\[aq]mango\[aq],\[aq]cake\[aq]],
\ \ \ \ \ \ \ \ [\[aq]cake\[aq],\[aq]banana\[aq],\[aq]apple\[aq]],
\ \ \ \ \ \ \ \ [\[aq]bread\[aq],\[aq]banana\[aq]],
\ \ \ \ \ \ \ \ [\[aq]banana\[aq]]]

#\ creating\ a\ pandas\ dataframe
import\ pandas\ as\ pd
dataDF\ =\ pd.DataFrame(data)

#\ Using\ FPGrowth\ object\ with\ memory\ optimization\ parameters\ and\ enabling\ encoding\ on\ non\-numeric\ 
#\ inputs\ and\ training\ 
from\ frovedis.mllib.fpm\ import\ FPGrowth
fpm\ =\ FPGrowth(minSupport\ =\ 0.01,\ minConfidence\ =\ 0.5,\ compression_point\ =\ 4,\ 
\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ mem_opt_level\ =\ 1,\ encode_string_input\ =\ True)\ 
fpm.fit(data)
print("logic:\ ",\ fpm.encode_logic)
\f[]
.fi
.PP
Output,
.IP
.nf
\f[C]
logic:\ \ {1:\ \[aq]apple\[aq],\ 2:\ \[aq]banana\[aq],\ 3:\ \[aq]bread\[aq],\ 4:\ \[aq]cake\[aq],\ 5:\ \[aq]mango\[aq]}
\f[]
.fi
.PP
\f[B]Purpose\f[]
.PD 0
.P
.PD
It initializes an FPGrowth object with the given parameters.
.PP
The parameters: "itemsCol", "predictionCol" and "numPartitions" are
simply kept in to make the interface uniform to the PySpark FPGrowth
module.
They are not used anywhere within the frovedis implementation.
.PP
\f[B]Return Value\f[]
.PD 0
.P
.PD
It simply returns "self" reference.
.SS 2. fit(data)
.PP
\f[B]Parameters\f[]
.PD 0
.P
.PD
\f[B]\f[I]data\f[]\f[]: A python iterable or a pandas dataframe
(manually constructed or loaded from file) or frovedis\-two column
dataframe containing the transaction data.
Frovedis supports numeric and non\-numeric values in transaction
dataset.
.PP
\f[B]Purpose\f[]
.PD 0
.P
.PD
It accepts the training data and trains the fp growth model with
specified minimum support value and tree depth value for construction of
tree.
.PP
For pandas dataframe, if it has 2 columns, the second column would be
treated as items and needs to be an array\-like input.
.PP
For example,
.IP
.nf
\f[C]
#\ creating\ a\ pandas\ dataframe\ 
import\ pandas\ as\ pd
data\ =\ [[\[aq]banana\[aq],\[aq]apple\[aq],\[aq]mango\[aq],\[aq]cake\[aq]],\ 
\ \ \ \ \ \ \ \ [\[aq]cake\[aq],\[aq]banana\[aq],\[aq]apple\[aq]],\ 
\ \ \ \ \ \ \ \ [\[aq]bread\[aq],\[aq]banana\[aq]],\ 
\ \ \ \ \ \ \ \ [\[aq]banana\[aq]]]
dataDF\ =\ pd.DataFrame(data)

#\ fitting\ input\ dataframe\ on\ FPGrowth\ object\ \ 
fpm\ =\ FPGrowth(minSupport\ =\ 0.01,\ minConfidence\ =\ 0.5,\ compression_point\ =\ 4,\ 
\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ mem_opt_level\ =\ 1).fit(dataDF)\ \ \ 
#\ Now,\ to\ print\ the\ frequent\ itemsets\ table\ after\ training\ is\ completed
print(fpm.freqItemsets)\ \ \ 
#\ to\ print\ table\ with\ all\ the\ association\ rules\ 
print(fpm.associationRules)
\f[]
.fi
.PP
Output,
.IP
.nf
\f[C]
frequent\ itemsets:
\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ items\ \ freq
0\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ [banana]\ \ \ 4.0
1\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ [apple]\ \ \ 2.0
2\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ [cake]\ \ \ 2.0
3\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ [bread]\ \ \ 1.0
4\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ [mango]\ \ \ 1.0
5\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ [cake,\ apple]\ \ \ 2.0
6\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ [mango,\ apple]\ \ \ 1.0
7\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ [apple,\ banana]\ \ \ 2.0
8\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ [bread,\ banana]\ \ \ 1.0
9\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ [cake,\ banana]\ \ \ 2.0
10\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ [mango,\ banana]\ \ \ 1.0
\&...
16\ \ [mango,\ cake,\ apple,\ banana]\ \ \ 1.0
association\ rules:
\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ antecedent\ consequent\ \ confidence\ \ lift\ \ support\ \ conviction
0\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ [banana]\ \ \ \ [apple]\ \ \ \ \ \ \ \ \ 0.5\ \ \ 1.0\ \ \ \ \ 0.50\ \ \ \ \ \ \ \ \ 1.0
1\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ [apple]\ \ \ \ \ [cake]\ \ \ \ \ \ \ \ \ 1.0\ \ \ 2.0\ \ \ \ \ 0.50\ \ \ \ \ \ \ \ \ NaN
2\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ [banana]\ \ \ \ \ [cake]\ \ \ \ \ \ \ \ \ 0.5\ \ \ 1.0\ \ \ \ \ 0.50\ \ \ \ \ \ \ \ \ 1.0
3\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ [apple]\ \ \ \ [mango]\ \ \ \ \ \ \ \ \ 0.5\ \ \ 2.0\ \ \ \ \ 0.25\ \ \ \ \ \ \ \ \ 1.5
4\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ [cake]\ \ \ \ [mango]\ \ \ \ \ \ \ \ \ 0.5\ \ \ 2.0\ \ \ \ \ 0.25\ \ \ \ \ \ \ \ \ 1.5
5\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ [apple]\ \ \ [banana]\ \ \ \ \ \ \ \ \ 1.0\ \ \ 1.0\ \ \ \ \ 0.50\ \ \ \ \ \ \ \ \ NaN
6\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ [bread]\ \ \ [banana]\ \ \ \ \ \ \ \ \ 1.0\ \ \ 1.0\ \ \ \ \ 0.25\ \ \ \ \ \ \ \ \ NaN
7\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ [cake]\ \ \ \ [apple]\ \ \ \ \ \ \ \ \ 1.0\ \ \ 2.0\ \ \ \ \ 0.50\ \ \ \ \ \ \ \ \ NaN
8\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ [cake]\ \ \ [banana]\ \ \ \ \ \ \ \ \ 1.0\ \ \ 1.0\ \ \ \ \ 0.50\ \ \ \ \ \ \ \ \ NaN
9\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ [mango]\ \ \ \ [apple]\ \ \ \ \ \ \ \ \ 1.0\ \ \ 2.0\ \ \ \ \ 0.25\ \ \ \ \ \ \ \ \ NaN
10\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ [mango]\ \ \ [banana]\ \ \ \ \ \ \ \ \ 1.0\ \ \ 1.0\ \ \ \ \ 0.25\ \ \ \ \ \ \ \ \ NaN
\&...
27\ \ \ \ [mango,\ cake,\ apple]\ \ \ [banana]\ \ \ \ \ \ \ \ \ 1.0\ \ \ 1.0\ \ \ \ \ 0.25\ \ \ \ \ \ \ \ \ NaN
\f[]
.fi
.PP
If it has more than 2 columns, all columns would be treated as
individual item and missing items in any given transaction needs to be
NaN.
.PP
For example,
.PP
FILE: groceries.csv
.PP
Item(s),Item 1,Item 2,Item 3,Item 4,Item 5,Item 6,Item 7, ....
, Item 30,Item 31,Item 32
.PD 0
.P
.PD
4,citrus fruit,semi\-finished bread,margarine,ready
soups,,,,,,,,,,,,,,,,,,,,,,,,,,,,
.PD 0
.P
.PD
3,tropical fruit,yogurt,coffee,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
.PD 0
.P
.PD
1,whole milk,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
.PD 0
.P
.PD
4,pip fruit,yogurt,cream cheese,meat spreads,,,,,,,,,,,,,,,,,,,,,,,,,,,,
.PD 0
.P
.PD
\&...
.PD 0
.P
.PD
10,chicken,citrus fruit,other vegetables,butter,yogurt, ..., cling
film/bags,,,,,,,,,,,,,,,,,,,,,,
.PD 0
.P
.PD
4,semi\-finished bread,bottled water,soda,bottled
beer,,,,,,,,,,,,,,,,,,,,,,,,,,,,
.PD 0
.P
.PD
5,chicken,tropical fruit,other vegetables,vinegar,shopping
bags,,,,,,,,,,,,,,,,,,,,,,,,,,,
.IP
.nf
\f[C]
#\ reading\ data\ from\ csv\ file\ 
import\ pandas\ as\ pd
dataDF\ =\ pd.read_csv("./input/groceries.csv",\ dtype=str).drop([\[aq]Item(s)\[aq]],\ axis=1)

#\ fitting\ input\ dataframe\ on\ FPGrowth\ object\ \ 
fpm\ =\ FPGrowth(minSupport\ =\ 0.01,\ minConfidence\ =\ 0.5,\ compression_point\ =\ 4,\ 
\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ mem_opt_level\ =\ 1).fit(dataDF)\ \ \ 
#\ Now,\ to\ print\ the\ frequent\ itemsets\ table\ after\ training\ is\ completed
print(fpm.freqItemsets)\ \ \ 
#\ to\ print\ table\ with\ all\ the\ association\ rules\ 
print(fpm.associationRules)
\f[]
.fi
.PP
Output
.IP
.nf
\f[C]
frequent\ itemsets:
\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ items\ \ \ \ freq
0\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ [whole\ milk]\ \ 2513.0
1\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ [other\ vegetables]\ \ 1903.0
2\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ [rolls/buns]\ \ 1809.0
3\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ [soda]\ \ 1715.0
4\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ [yogurt]\ \ 1372.0
\&..\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ ...\ \ \ \ \ ...
328\ \ [whipped/sour\ cream,\ yogurt,\ whole\ milk]\ \ \ 107.0
329\ \ \ \ [yogurt,\ other\ vegetables,\ whole\ milk]\ \ \ 219.0
330\ \ \ \ [yogurt,\ rolls/buns,\ other\ vegetables]\ \ \ 113.0
331\ \ \ \ \ \ \ \ \ \ [yogurt,\ rolls/buns,\ whole\ milk]\ \ \ 153.0
332\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ [yogurt,\ soda,\ whole\ milk]\ \ \ 103.0
association\ rules:
\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ antecedent\ \ \ \ \ \ \ \ \ \ consequent\ \ \ \ \ confidence\ \ \ lift\ \ \ \ \ support\ \ \ conviction
0\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ [yogurt,\ other\ vegetables]\ \ \ \ \ \ [whole\ milk]\ \ \ \ 0.512881\ \ \ 2.007235\ \ 0.022267\ \ 1.528340
1\ \ \ \ \ \ \ \ \ \ \ \ \ [whipped/sour\ cream,\ yogurt]\ \ \ \ \ \ [whole\ milk]\ \ \ \ 0.524510\ \ \ 2.052747\ \ 0.010880\ \ 1.565719
2\ \ \ [whipped/sour\ cream,\ other\ vegetables]\ \ \ \ \ \ [whole\ milk]\ \ \ \ 0.507042\ \ \ 1.984385\ \ 0.014642\ \ 1.510239
3\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ [tropical\ fruit,\ yogurt]\ \ \ \ \ \ [whole\ milk]\ \ \ \ 0.517361\ \ \ 2.024770\ \ 0.015150\ \ 1.542528
4\ \ \ \ \ \ \ \ [tropical\ fruit,\ root\ vegetables]\ \ \ \ \ \ [whole\ milk]\ \ \ \ 0.570048\ \ \ 2.230969\ \ 0.011998\ \ 1.731553
5\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ [root\ vegetables,\ yogurt]\ \ \ \ \ \ [whole\ milk]\ \ \ \ 0.562992\ \ \ 2.203354\ \ 0.014540\ \ 1.703594
6\ \ \ \ \ \ \ \ \ \ \ \ [root\ vegetables,\ rolls/buns]\ \ \ \ \ \ [whole\ milk]\ \ \ \ 0.523013\ \ \ 2.046888\ \ 0.012710\ \ 1.560804
7\ \ \ \ \ \ \ \ \ \ \ \ [pip\ fruit,\ other\ vegetables]\ \ \ \ \ \ [whole\ milk]\ \ \ \ 0.517510\ \ \ 2.025351\ \ 0.013523\ \ 1.543003
8\ \ \ \ \ \ \ \ [domestic\ eggs,\ other\ vegetables]\ \ \ \ \ \ [whole\ milk]\ \ \ \ 0.552511\ \ \ 2.162336\ \ 0.012303\ \ 1.663694
9\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ [curd,\ yogurt]\ \ \ \ \ \ [whole\ milk]\ \ \ \ 0.582353\ \ \ 2.279125\ \ 0.010066\ \ 1.782567
10\ \ \ \ \ \ \ \ \ \ \ \ \ \ [butter,\ other\ vegetables]\ \ \ \ \ \ [whole\ milk]\ \ \ \ 0.573604\ \ \ 2.244885\ \ 0.011490\ \ 1.745992
11\ \ \ \ \ \ \ [tropical\ fruit,\ root\ vegetables]\ \ [other\ vegetables]\ \ 0.584541\ \ \ 3.020999\ \ 0.012303\ \ 1.941244
12\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ [root\ vegetables,\ yogurt]\ \ [other\ vegetables]\ \ 0.500000\ \ \ 2.584078\ \ 0.012913\ \ 1.613015
13\ \ \ \ \ \ \ \ \ \ \ [root\ vegetables,\ rolls/buns]\ \ [other\ vegetables]\ \ 0.502092\ \ \ 2.594890\ \ 0.012201\ \ 1.619792
14\ \ \ \ \ \ \ \ \ [citrus\ fruit,\ root\ vegetables]\ \ [other\ vegetables]\ \ 0.586207\ \ \ 3.029608\ \ 0.010371\ \ 1.949059
\f[]
.fi
.PP
When native python iterable or a pandas dataframe is provided, it is
converted to frovedis dataframe and sent to frovedis server which
consumes some data transfer time.
Pre\-constructed frovedis\-like inputs can be used to speed up the
training time, especially when same data would be used for multiple
executions.
The storage representation when creating frovedis dataframe is slightly
different than pandas dataframe as shown below :
.IP
.nf
\f[C]
#\ creating\ a\ pandas\ dataframe
import\ pandas\ as\ pd
data\ =\ [[\[aq]banana\[aq],\[aq]apple\[aq],\[aq]mango\[aq],\[aq]cake\[aq]],\ 
\ \ \ \ \ \ \ \ [\[aq]cake\[aq],\[aq]banana\[aq],\[aq]apple\[aq]],\ 
\ \ \ \ \ \ \ \ [\[aq]bread\[aq],\[aq]banana\[aq]],\ 
\ \ \ \ \ \ \ \ [\[aq]banana\[aq]]]
dataDF\ =\ pd.DataFrame(data)

#\ Creating\ a\ two\ column\ frovedis\ dataframe
import\ frovedis.dataframe\ as\ fpd
frovDF\ =\ fpd.DataFrame(dataDF)

#\ fitting\ frovedis\-like\ input\ dataframe\ on\ FPGrowth\ object\ \ 
fpm\ =\ FPGrowth(minSupport\ =\ 0.01,\ minConfidence\ =\ 0.5,\ compression_point\ =\ 4,\ 
\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ mem_opt_level\ =\ 1).fit(frovDF)\ \ 
#\ Now,\ to\ print\ the\ frequent\ itemsets\ table\ after\ training\ is\ completed
print(fpm.freqItemsets)\ \ \ 
#\ to\ print\ table\ with\ all\ the\ association\ rules\ 
print(fpm.associationRules)
\f[]
.fi
.PP
Output,
.IP
.nf
\f[C]
frequent\ itemsets:
\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ items\ \ freq
0\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ [banana]\ \ \ 4.0
1\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ [apple]\ \ \ 2.0
2\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ [cake]\ \ \ 2.0
3\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ [bread]\ \ \ 1.0
4\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ [mango]\ \ \ 1.0
5\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ [cake,\ apple]\ \ \ 2.0
6\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ [mango,\ apple]\ \ \ 1.0
7\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ [apple,\ banana]\ \ \ 2.0
8\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ [bread,\ banana]\ \ \ 1.0
9\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ [cake,\ banana]\ \ \ 2.0
10\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ [mango,\ banana]\ \ \ 1.0
\&...
16\ \ [mango,\ cake,\ apple,\ banana]\ \ \ 1.0
association\ rules:
\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ antecedent\ consequent\ \ confidence\ \ lift\ \ support\ \ conviction
0\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ [banana]\ \ \ \ [apple]\ \ \ \ \ \ \ \ \ 0.5\ \ \ 1.0\ \ \ \ \ 0.50\ \ \ \ \ \ \ \ \ 1.0
1\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ [apple]\ \ \ \ \ [cake]\ \ \ \ \ \ \ \ \ 1.0\ \ \ 2.0\ \ \ \ \ 0.50\ \ \ \ \ \ \ \ \ NaN
2\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ [banana]\ \ \ \ \ [cake]\ \ \ \ \ \ \ \ \ 0.5\ \ \ 1.0\ \ \ \ \ 0.50\ \ \ \ \ \ \ \ \ 1.0
3\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ [apple]\ \ \ \ [mango]\ \ \ \ \ \ \ \ \ 0.5\ \ \ 2.0\ \ \ \ \ 0.25\ \ \ \ \ \ \ \ \ 1.5
4\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ [cake]\ \ \ \ [mango]\ \ \ \ \ \ \ \ \ 0.5\ \ \ 2.0\ \ \ \ \ 0.25\ \ \ \ \ \ \ \ \ 1.5
5\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ [apple]\ \ \ [banana]\ \ \ \ \ \ \ \ \ 1.0\ \ \ 1.0\ \ \ \ \ 0.50\ \ \ \ \ \ \ \ \ NaN
6\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ [bread]\ \ \ [banana]\ \ \ \ \ \ \ \ \ 1.0\ \ \ 1.0\ \ \ \ \ 0.25\ \ \ \ \ \ \ \ \ NaN
7\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ [cake]\ \ \ \ [apple]\ \ \ \ \ \ \ \ \ 1.0\ \ \ 2.0\ \ \ \ \ 0.50\ \ \ \ \ \ \ \ \ NaN
8\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ [cake]\ \ \ [banana]\ \ \ \ \ \ \ \ \ 1.0\ \ \ 1.0\ \ \ \ \ 0.50\ \ \ \ \ \ \ \ \ NaN
9\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ [mango]\ \ \ \ [apple]\ \ \ \ \ \ \ \ \ 1.0\ \ \ 2.0\ \ \ \ \ 0.25\ \ \ \ \ \ \ \ \ NaN
10\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ [mango]\ \ \ [banana]\ \ \ \ \ \ \ \ \ 1.0\ \ \ 1.0\ \ \ \ \ 0.25\ \ \ \ \ \ \ \ \ NaN
\&...
27\ \ \ \ [mango,\ cake,\ apple]\ \ \ [banana]\ \ \ \ \ \ \ \ \ 1.0\ \ \ 1.0\ \ \ \ \ 0.25\ \ \ \ \ \ \ \ \ NaN
\f[]
.fi
.PP
Another way to work with frovedis dataframe is by loading it from a
file.
Since in real world, large transaction database will be used for rule
mining, such files needs to have two columns named “trans_id” and
“item”, where “trans_id” column will have respective transaction id and
“item” column will have the individual items in that transaction.
If other names are present for the columns in the file, then it would
raise exception.
.PP
For example:
.PP
FILE: trans.csv
.PP
trans_id,item 1,1
.PD 0
.P
.PD
1,2
.PD 0
.P
.PD
1,3
.PD 0
.P
.PD
1,4
.PD 0
.P
.PD
2,1
.PD 0
.P
.PD
2,2
.PD 0
.P
.PD
2,3
.PD 0
.P
.PD
3,1
.PD 0
.P
.PD
3,2
.PD 0
.P
.PD
4,1
.PP
The above data can be loaded and passed to frovedis FPGrowth as follows:
.IP
.nf
\f[C]
#\ loadinf\ frovedis\ dataframe\ from\ a\ csv\ file
import\ frovedis.dataframe\ as\ fdf
frovDF\ =\ fdf.read_csv(“trans.csv”)

#\ fitting\ frovedis\-like\ input\ dataframe\ on\ FPGrowth\ object\ \ 
fpm\ =\ FPGrowth(minSupport\ =\ 0.01,\ minConfidence\ =\ 0.5,\ compression_point\ =\ 4,\ 
\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ mem_opt_level\ =\ 1).fit(frovDF)\ \ 
\f[]
.fi
.PP
\f[B]Return Value\f[]
.PD 0
.P
.PD
It simply returns "self" reference.
.SS 3. generate_rules(confidence = None)
.PP
\f[B]Parameters\f[]
.PD 0
.P
.PD
\f[B]\f[I]confidence\f[]\f[]: A double(float64) type parameter
indicating the minimum confidence value.
(Default: None)
.PD 0
.P
.PD
When it is None (not specified explicitly), then it will use confidence
value used during FPGrowth object creation.
.PP
\f[B]Purpose\f[]
.PD 0
.P
.PD
It accepts the minimum confidence value to trim the rules during the
generation of association rules.
.PP
For example,
.IP
.nf
\f[C]
#\ generating\ rules\ with\ minimum\ confidence\ value\ of\ 0.2\ \ 
fp_rules\ =\ fpm.generate_rules(0.2)\ \ 
\f[]
.fi
.PP
This will generate tables containing rules at server side.
.PD 0
.P
.PD
To print theses generated rules, debug_print() may be used as show
below:
.IP
.nf
\f[C]
fp_rules.debug_print()
\f[]
.fi
.PP
This will show all tables of different antecedent length at server side.
Here, encoding was disbaled during rule generation.
.PP
Output,
.IP
.nf
\f[C]
\-\-\-\ rule[0]\ \-\-\-
antecedent1\ \ \ consequent\ \ \ confidence\ \ \ lift\ \ \ support\ \ conviction
\ \ \ \ \ \ apple\ \ \ cake\ \ \ \ \ \ \ \ \ 1\ \ \ \ \ \ \ \ \ \ \ \ 2\ \ \ \ \ \ 0.5\ \ \ \ \ \ NULL
\ \ \ \ \ \ apple\ \ \ mango\ \ \ \ \ \ \ \ 0.5\ \ \ \ \ \ \ \ \ \ 2\ \ \ \ \ \ 0.25\ \ \ \ \ 1.5
\ \ \ \ \ banana\ \ \ apple\ \ \ \ \ \ \ \ 0.5\ \ \ \ \ \ \ \ \ \ 1\ \ \ \ \ \ 0.5\ \ \ \ \ \ 1
\ \ \ \ \ banana\ \ \ cake\ \ \ \ \ \ \ \ \ 0.5\ \ \ \ \ \ \ \ \ \ 1\ \ \ \ \ \ 0.5\ \ \ \ \ \ 1
\ \ \ \ \ \ \ cake\ \ \ mango\ \ \ \ \ \ \ \ 0.5\ \ \ \ \ \ \ \ \ \ 2\ \ \ \ \ \ 0.25\ \ \ \ \ 1.5

\-\-\-\ rule[1]\ \-\-\-
antecedent1\ \ \ consequent\ \ \ confidence\ \ \ lift\ \ \ support\ \ conviction
\ \ \ \ \ \ \ cake\ \ \ apple\ \ \ \ \ \ \ \ 1\ \ \ \ \ \ \ \ \ \ \ \ 2\ \ \ \ \ \ 0.5\ \ \ \ \ \ NULL
\ \ \ \ \ \ mango\ \ \ apple\ \ \ \ \ \ \ \ 1\ \ \ \ \ \ \ \ \ \ \ \ 2\ \ \ \ \ \ 0.25\ \ \ \ \ NULL
\ \ \ \ \ \ apple\ \ \ banana\ \ \ \ \ \ \ 1\ \ \ \ \ \ \ \ \ \ \ \ 1\ \ \ \ \ \ 0.5\ \ \ \ \ \ NULL
\ \ \ \ \ \ bread\ \ \ banana\ \ \ \ \ \ \ 1\ \ \ \ \ \ \ \ \ \ \ \ 1\ \ \ \ \ \ 0.25\ \ \ \ \ NULL
\ \ \ \ \ \ \ cake\ \ \ banana\ \ \ \ \ \ \ 1\ \ \ \ \ \ \ \ \ \ \ \ 1\ \ \ \ \ \ 0.5\ \ \ \ \ \ NULL
\ \ \ \ \ \ mango\ \ \ banana\ \ \ \ \ \ \ 1\ \ \ \ \ \ \ \ \ \ \ \ 1\ \ \ \ \ \ 0.25\ \ \ \ \ NULL
\ \ \ \ \ \ mango\ \ \ cake\ \ \ \ \ \ \ \ \ 1\ \ \ \ \ \ \ \ \ \ \ \ 2\ \ \ \ \ \ 0.25\ \ \ \ \ NULL

\-\-\-\ rule[2]\ \-\-\-
antecedent1\ \ \ antecedent2\ \ consequent\ \ confidence\ \ lift\ \ support\ \ conviction
\ \ \ \ \ \ apple\ \ \ banana\ \ \ \ \ \ \ cake\ \ \ \ \ \ \ \ 1\ \ \ \ \ \ \ \ \ \ \ 2\ \ \ \ \ 0.5\ \ \ \ \ \ NULL
\ \ \ \ \ \ \ cake\ \ \ banana\ \ \ \ \ \ \ mango\ \ \ \ \ \ \ 0.5\ \ \ \ \ \ \ \ \ 2\ \ \ \ \ 0.25\ \ \ \ \ 1.5
\ \ \ \ \ \ apple\ \ \ banana\ \ \ \ \ \ \ mango\ \ \ \ \ \ \ 0.5\ \ \ \ \ \ \ \ \ 2\ \ \ \ \ 0.25\ \ \ \ \ 1.5
\ \ \ \ \ \ \ cake\ \ \ apple\ \ \ \ \ \ \ \ mango\ \ \ \ \ \ \ 0.5\ \ \ \ \ \ \ \ \ 2\ \ \ \ \ 0.25\ \ \ \ \ 1.5

\-\-\-\ rule[3]\ \-\-\-
antecedent1\ \ \ antecedent2\ \ consequent\ \ confidence\ \ lift\ \ support\ \ conviction
\ \ \ \ \ \ mango\ \ \ banana\ \ \ \ \ \ \ apple\ \ \ \ \ \ \ 1\ \ \ \ \ \ \ \ \ \ \ 2\ \ \ \ \ 0.25\ \ \ \ \ NULL
\ \ \ \ \ \ \ cake\ \ \ banana\ \ \ \ \ \ \ apple\ \ \ \ \ \ \ 1\ \ \ \ \ \ \ \ \ \ \ 2\ \ \ \ \ 0.5\ \ \ \ \ \ NULL
\ \ \ \ \ \ mango\ \ \ banana\ \ \ \ \ \ \ cake\ \ \ \ \ \ \ \ 1\ \ \ \ \ \ \ \ \ \ \ 2\ \ \ \ \ 0.25\ \ \ \ \ NULL
\ \ \ \ \ \ mango\ \ \ apple\ \ \ \ \ \ \ \ cake\ \ \ \ \ \ \ \ 1\ \ \ \ \ \ \ \ \ \ \ 2\ \ \ \ \ 0.25\ \ \ \ \ NULL

\-\-\-\ rule[4]\ \-\-\-
antecedent1\ \ \ antecedent2\ \ consequent\ \ confidence\ \ lift\ \ support\ \ conviction
\ \ \ \ \ \ mango\ \ \ cake\ \ \ \ \ \ \ \ \ banana\ \ \ \ \ \ 1\ \ \ \ \ \ \ \ \ \ \ 1\ \ \ \ \ 0.25\ \ \ \ \ NULL
\ \ \ \ \ \ mango\ \ \ apple\ \ \ \ \ \ \ \ banana\ \ \ \ \ \ 1\ \ \ \ \ \ \ \ \ \ \ 1\ \ \ \ \ 0.25\ \ \ \ \ NULL
\ \ \ \ \ \ \ cake\ \ \ apple\ \ \ \ \ \ \ \ banana\ \ \ \ \ \ 1\ \ \ \ \ \ \ \ \ \ \ 1\ \ \ \ \ 0.5\ \ \ \ \ \ NULL
\ \ \ \ \ \ mango\ \ \ cake\ \ \ \ \ \ \ \ \ apple\ \ \ \ \ \ \ 1\ \ \ \ \ \ \ \ \ \ \ 2\ \ \ \ \ 0.25\ \ \ \ \ NULL

\-\-\-\ rule[5]\ \-\-\-
antecedent1\ \ \ antecedent2\ \ antecedent3\ consequent\ \ confidence\ \ lift\ \ support\ \ conviction
\ \ \ \ \ \ \ cake\ \ \ apple\ \ \ \ \ \ \ \ banana\ \ \ \ \ \ \ \ \ \ \ mango\ \ 0.5\ \ \ \ \ \ \ \ \ 2\ \ \ \ \ 0.25\ \ \ \ \ 1.5

\-\-\-\ rule[6]\ \-\-\-
antecedent1\ \ \ antecedent2\ \ antecedent3\ consequent\ \ confidence\ \ lift\ \ support\ \ conviction
\ \ \ \ \ \ mango\ \ \ apple\ \ \ \ \ \ \ \ banana\ \ \ \ \ \ \ \ \ \ cake\ \ \ \ 1\ \ \ \ \ \ \ \ \ \ \ 2\ \ \ \ \ 0.25\ \ \ \ \ NULL

\-\-\-\ rule[7]\ \-\-\-
antecedent1\ \ \ antecedent2\ \ antecedent3\ consequent\ \ confidence\ \ lift\ \ support\ \ conviction
\ \ \ \ \ \ mango\ \ \ cake\ \ \ \ \ \ \ \ \ banana\ \ \ \ \ \ \ \ \ \ apple\ \ \ 1\ \ \ \ \ \ \ \ \ \ \ 2\ \ \ \ \ 0.25\ \ \ \ \ NULL

\-\-\-\ rule[8]\ \-\-\-
antecedent1\ \ \ antecedent2\ \ antecedent3\ consequent\ \ confidence\ \ lift\ \ support\ \ conviction
\ \ \ \ \ \ mango\ \ \ cake\ \ \ \ \ \ \ \ \ apple\ \ \ \ \ \ \ \ \ \ \ banana\ \ 1\ \ \ \ \ \ \ \ \ \ \ 1\ \ \ \ \ 0.25\ \ \ \ \ NULL
\f[]
.fi
.PP
These above generated rules can also be saved and loaded separately as
shown below:
.IP
.nf
\f[C]
rule.save("./out/FPRule")
\f[]
.fi
.PP
It saves the rules in \[aq]FPRule\[aq] directory.
.PP
The \[aq]FPRule\[aq] directory has
.PP
\f[B]FPRule\f[]
.PD 0
.P
.PD
|\-\-\-\-\-\-\-\- encode_logic
.PD 0
.P
.PD
|\-\-\-\-\-\-\-\- \f[B]rule_0\f[]
.PD 0
.P
.PD
|\-\-\-\-\-\-\-\- \f[B]rule_1\f[]
.PD 0
.P
.PD
|\-\-\-\-\-\-\-\- \f[B]rule_2\f[]
.PD 0
.P
.PD
|\-\-\-\-\-\-\-\- \f[B]rule_3\f[]
.PD 0
.P
.PD
|\-\-\-\-\-\-\-\- \f[B]rule_4\f[]
.PD 0
.P
.PD
|\-\-\-\-\-\-\-\- \f[B]rule_5\f[]
.PD 0
.P
.PD
|\-\-\-\-\-\-\-\- \f[B]rule_6\f[]
.PD 0
.P
.PD
|\-\-\-\-\-\-\-\- \f[B]rule_7\f[]
.PD 0
.P
.PD
|\-\-\-\-\-\-\-\- \f[B]rule_8\f[]
.PP
The \[aq]encode_logic\[aq] file is created only when
\[aq]encode_string_input = True\[aq] while training.
.PD 0
.P
.PD
Other directories are created according to number of rules created which
were constructed during training.
.PD 0
.P
.PD
Each rule based directory contains information about antecedent,
consequent, confidence, lift, support, convition.
.PP
For loading the already saved rules, following should be done:
.IP
.nf
\f[C]
rule.load("./out/FPRule")
\f[]
.fi
.PP
\f[B]Return Value\f[]
.PD 0
.P
.PD
It returns an FPRules object.
.SS 4. transform(data)
.PP
\f[B]Parameters\f[]
.PD 0
.P
.PD
\f[B]\f[I]data\f[]\f[]: A python iterable or a pandas dataframe or
frovedis\-like dataframe containing the transaction data.
Frovedis supports numeric and non\-numeric values as for transaction
data.
.PP
\f[B]Purpose\f[]
.PD 0
.P
.PD
It gives the prediction of list of items for each of the corresponding
transaction items.
.PP
For example,
.IP
.nf
\f[C]
print(fpm.transform(data))
\f[]
.fi
.PP
Output
.IP
.nf
\f[C]
\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ items\ \ \ \ \ prediction
0\ \ [banana,\ apple,\ mango,\ cake]\ \ \ \ \ \ \ \ \ \ \ \ \ []
1\ \ \ \ \ \ \ \ \ [cake,\ banana,\ apple]\ \ \ \ \ \ \ \ [mango]
2\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ [bread,\ banana]\ \ [apple,\ cake]
3\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ [banana]\ \ [apple,\ cake]
\f[]
.fi
.PP
In case no prediction is made for any list of items, then it will give
an empty list, just like in pandas dataframe as well.
.PP
\f[B]Return Value\f[]
.PD 0
.P
.PD
It returns a pandas dataframe having two fields \[aq]items\[aq] and
\[aq]prediction\[aq].
Here \[aq]items\[aq] is a list of transaction items and
\[aq]prediction\[aq] is a corresponding list of predictions for these
transaction items.
.SS 5. load(fname)
.PP
\f[B]Parameters\f[]
.PD 0
.P
.PD
\f[B]\f[I]fname\f[]\f[]: A string object containing the name of the file
having model information to be loaded.
.PP
\f[B]Purpose\f[]
.PD 0
.P
.PD
It loads the model from the specified file path.
.PP
For example,
.IP
.nf
\f[C]
fpm.load("./out/FPModel")\ \ 
\f[]
.fi
.PP
\f[B]Return Value\f[]
.PD 0
.P
.PD
It simply returns "self" reference.
.SS 6. save(fname)
.PP
\f[B]Parameters\f[]
.PD 0
.P
.PD
\f[B]\f[I]fname\f[]\f[]: A string object containing the name of the file
on which the target model is to be saved.
.PP
\f[B]Purpose\f[]
.PD 0
.P
.PD
On success, it writes the model information in the specified file path.
Otherwise, it throws an exception.
.PP
For example,
.IP
.nf
\f[C]
#\ To\ save\ the\ FPGrowth\ model
fpm.save("./out/FPModel")\ \ 
\f[]
.fi
.PP
This will save the fp\-growth model on the path \[aq]/out/FPModel\[aq].
.PP
The \[aq]FPModel\[aq] directory has
.PP
\f[B]FPModel\f[]
.PD 0
.P
.PD
|\-\-\-\-\-\-\-\- encode_logic
.PD 0
.P
.PD
|\-\-\-\-\-\-\-\- metadata
.PD 0
.P
.PD
|\-\-\-\-\-\-\-\- \f[B]tree_0\f[]
.PD 0
.P
.PD
|\-\-\-\-\-\-\-\- \f[B]tree_1\f[]
.PD 0
.P
.PD
|\-\-\-\-\-\-\-\- \f[B]tree_2\f[]
.PD 0
.P
.PD
|\-\-\-\-\-\-\-\- \f[B]tree_3\f[]
.PP
The \[aq]encode_logic\[aq] file is created only when
\[aq]encode_string_input = True\[aq] while training.
.PD 0
.P
.PD
The metadata file contains the number of transactions and rule frequent
itemsets count.
.PD 0
.P
.PD
Rest of the directories are created according to tree levels which were
constructed during training.
.PD 0
.P
.PD
Each tree based directory contains information about items and their
frequency count on each tree level.
.PP
\f[B]Return Value\f[]
.PD 0
.P
.PD
It returns nothing
.SS 7. debug_print()
.PP
\f[B]Purpose\f[]
.PD 0
.P
.PD
It shows the target model information (frequent itemsets, generated
fprules, frequent itemsets count) on the server side user terminal.
It is mainly used for debugging purpose.
.PP
For example,
.IP
.nf
\f[C]
fpm.debug_print()\ \ 
\f[]
.fi
.PP
Output
.IP
.nf
\f[C]
\-\-\-\ item_support\ \-\-\-
item\ \ \ \ item_support
banana\ \ 1
apple\ \ \ 0.5
cake\ \ \ \ 0.5
bread\ \ \ 0.25
mango\ \ \ 0.25

\-\-\-\ tree[0]\ \-\-\-
item\ \ \ \ count
banana\ \ 4
apple\ \ \ 2
cake\ \ \ \ 2
bread\ \ \ 1
mango\ \ \ 1

\-\-\-\ tree_info[0]\ \-\-\-

\-\-\-\ tree[1]\ \-\-\-
item\ \ \ \ item1\ \ \ count
cake\ \ \ \ apple\ \ \ 2
mango\ \ \ apple\ \ \ 1
apple\ \ \ banana\ \ 2
bread\ \ \ banana\ \ 1
cake\ \ \ \ banana\ \ 2
mango\ \ \ banana\ \ 1
mango\ \ \ cake\ \ \ \ 1

\-\-\-\ tree_info[1]\ \-\-\-

\-\-\-\ tree[2]\ \-\-\-
item\ \ \ \ item1\ \ \ item2\ \ \ count
mango\ \ \ cake\ \ \ \ apple\ \ \ 1
cake\ \ \ \ apple\ \ \ banana\ \ 2
mango\ \ \ apple\ \ \ banana\ \ 1
mango\ \ \ cake\ \ \ \ banana\ \ 1

\-\-\-\ tree_info[2]\ \-\-\-

\-\-\-\ tree[3]\ \-\-\-
item\ \ \ \ item1\ \ \ item2\ \ \ item3\ \ \ count
mango\ \ \ cake\ \ \ \ apple\ \ \ banana\ \ 1

\-\-\-\ tree_info[3]\ \-\-\-

total\ #FIS:\ 17
\f[]
.fi
.PP
It displays the in memory frequent itemsets, generated fprules, frequent
itemsets count which is currently present on the server.
.PP
\f[B]Return Value\f[]
.PD 0
.P
.PD
It returns nothing
.SS 8. release()
.PP
\f[B]Purpose\f[]
.PD 0
.P
.PD
It can be used to release the in\-memory model at frovedis server.
.PP
For example,
.IP
.nf
\f[C]
fpm.release()\ \ 
\f[]
.fi
.PP
This will reset the after\-fit populated attributes to None, along with
releasing server side memory.
.PP
\f[B]Return Value\f[]
.PD 0
.P
.PD
It returns nothing
.SS 9. is_fitted()
.PP
\f[B]Purpose\f[]
.PD 0
.P
.PD
It can be used to confirm if the model is already fitted or not.
.PP
\f[B]Return Value\f[]
.PD 0
.P
.PD
It returns ‘True', if the model is already fitted otherwise, it returns
‘False'.
.SH SEE ALSO
.PP
dataframe
