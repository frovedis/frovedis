.TH "Multinomial Naive Bayes" "" "" "" ""
.SH NAME
.PP
Multinomial Naive Bayes\- One of the variations of Naive Bayes
algorithm.
It is a multinomial classification algorithm.
.SH SYNOPSIS
.PP
class frovedis.mllib.naive_bayes.MultinomialNB(alpha=1.0,
fit_prior=True, class_prior=None, verbose=0)
.SS Public Member Functions
.PP
fit(X, y, sample_weight = None)
.PD 0
.P
.PD
predict(X)
.PD 0
.P
.PD
predict_proba(X)
.PD 0
.P
.PD
score(X, y, sample_weight = None)
.PD 0
.P
.PD
get_params(deep = True)
.PD 0
.P
.PD
set_params(**params)
.PD 0
.P
.PD
debug_print()
.PD 0
.P
.PD
load(fname, dtype = None)
.PD 0
.P
.PD
save(fname)
.PD 0
.P
.PD
release()
.PD 0
.P
.PD
is_fitted()
.SH DESCRIPTION
.PP
Naive Bayes classifier for multinomial models.
The multinomial Naive Bayes classifier is suitable for classification
with discrete features (e.g., word counts for text classification).
.PP
This module provides a client\-server implementation, where the client
application is a normal python program.
The frovedis interface is almost same as Scikit\-learn MultinomialNB
interface, but it doesn\[aq]t have any dependency with Scikit\-learn.
It can be used simply even if the system doesn\[aq]t have Scikit\-learn
installed.
Thus, in this implementation, a python client can interact with a
frovedis server sending the required python data for training at
frovedis side.
Python data is converted into frovedis compatible data internally and
the python ML call is linked with the respective frovedis ML call to get
the job done at frovedis server.
.PP
Python side calls for MultinomialNB on the frovedis server.
Once the training is completed with the input data at the frovedis
server, it returns an abstract model with a unique model ID to the
client python program.
.PP
When prediction\-like request would be made on the trained model, python
program will send the same request to the frovedis server.
After the request is served at the frovedis server, the output would be
sent back to the python client.
.SS Detailed Description
.SS 1. MultinomialNB()
.PP
\f[B]Parameters\f[]
.PD 0
.P
.PD
\f[B]\f[I]alpha\f[]\f[]: A positive double(float64) smoothing parameter.
It must be greater than or equal to 1.
(Default: 1.0)
.PD 0
.P
.PD
\f[B]\f[I]fit_prior\f[]\f[]: A boolean parameter specifying whether to
learn class prior probabilities or not.
If False, a uniform prior will be used.
(Default: True)
.PD 0
.P
.PD
\f[B]\f[I]class_prior\f[]\f[]: A numpy ndarray of double(float64) type
values and must be of shape \f[B](n_classes,)\f[].
It gives prior probabilities of the classes.
(Default: None)
.PD 0
.P
.PD
When it is None (not specified explicitly), the priors are adjusted
according to the data.
.PD 0
.P
.PD
\f[B]\f[I]verbose\f[]\f[]: An integer parameter specifying the log level
to use.
Its value is 0 by default (for INFO mode and not specified explicitly).
But it can be set to 1 (for DEBUG mode) or 2 (for TRACE mode) for
getting training time logs from frovedis server.
.PP
\f[B]Attributes\f[]
.PD 0
.P
.PD
\f[B]\f[I]class_log_prior_\f[]\f[]: A python ndarray of double(float64)
type values and has shape (n_classes,).
It contains log probability of each class (smoothed).
.PD 0
.P
.PD
\f[B]\f[I]feature_log_prob_\f[]\f[]: A python ndarray of double(float64)
type values and has shape (n_classes, n_features).
It contains empirical log probability of features given a class.
.PD 0
.P
.PD
\f[B]\f[I]class_count_\f[]\f[]: A python ndarray of double(float64) type
values and has shape (n_classes,).
It contains the number of samples encountered for each class during
fitting.
This value is weighted by the sample weight when provided.
.PD 0
.P
.PD
\f[B]\f[I]classes_\f[]\f[]: A python ndarray of double(float64) type
values and has shape (n_classes,).
It contains the of unique labels given to the classifier during
training.
.PD 0
.P
.PD
\f[B]\f[I]feature_count_\f[]\f[]: A python ndarray of double(float64)
type values and has shape (n_classes, n_features).
It contains the number of samples encountered for each (class, feature)
during fitting.
This value is weighted by the sample weight when provided.
.PD 0
.P
.PD
\f[B]\f[I]coef_\f[]\f[]: A python ndarray of double(float64) type
values.
If \[aq]classes_\[aq] are 2 then the shape (1, n_features), otherwise,
the shape is (n_classes,n_features).
It mirrors ‘feature_log_prob_' for interpreting MultinomialNB as a
linear model.
.PD 0
.P
.PD
\f[B]\f[I]intercept_\f[]\f[]: A python ndarray of double(float64) type
values.
If \[aq]classes_\[aq] are 2 then the shape (1,), otherwise, the shape is
(n_classes,).
It mirrors ‘class_log_prior_' for interpreting MultinomialNB as a linear
model.
.PP
\f[B]Purpose\f[]
.PD 0
.P
.PD
It initializes a MultinomialNB object with the given parameters.
.PP
\f[B]Return Value\f[]
.PD 0
.P
.PD
It simply returns "self" reference.
.SS 2. fit(X, y, sample_weight = None)
.PP
\f[B]Parameters\f[]
.PD 0
.P
.PD
\f[B]\f[I]X\f[]\f[]: A numpy dense or scipy sparse matrix or any python
array\-like object or an instance of FrovedisCRSMatrix for sparse data
and FrovedisRowmajorMatrix for dense data.
.PD 0
.P
.PD
\f[B]\f[I]y\f[]\f[]: Any python array\-like object or an instance of
FrovedisDvector.
.PD 0
.P
.PD
\f[B]\f[I]sample_weight\f[]\f[]: A python ndarray containing the
intended weights for each input samples and it should be the shape of
(n_samples, ).
(Default: None)
.PD 0
.P
.PD
When it is None (not specified explicitly), an uniform weight vector is
assigned on each input sample.
.PP
\f[B]Purpose\f[]
.PD 0
.P
.PD
It accepts the training matrix (X) with labels (y) and trains a
MultinomialNB model.
.PP
For example,
.IP
.nf
\f[C]
#\ loading\ sample\ matrix\ and\ labels\ data
from\ sklearn.datasets\ import\ load_breast_cancer
mat,\ lbl\ =\ load_breast_cancer(return_X_y\ =\ True)

#\ fitting\ input\ matrix\ and\ label\ on\ MultinomialNB\ object
from\ frovedis.mllib.naive_bayes\ import\ MultinomialNB
mnb\ =\ MultinomialNB().fit(mat,lbl)\ \ 
\f[]
.fi
.PP
When native python data is provided, it is converted to frovedis\-like
inputs and sent to frovedis server which consumes some data transfer
time.
Pre\-constructed frovedis\-like inputs can be used to speed up the
training time, especially when same data would be used for multiple
executions.
.PP
For example,
.IP
.nf
\f[C]
#\ loading\ sample\ matrix\ and\ labels\ data
from\ sklearn.datasets\ import\ load_breast_cancer
mat,\ lbl\ =\ load_breast_cancer(return_X_y\ =\ True)

#\ Since\ "mat"\ is\ numpy\ dense\ data,\ we\ have\ created\ FrovedisRowmajorMatrix.\ 
#\ For\ scipy\ sparse\ data,\ FrovedisCRSMatrix\ should\ be\ used\ instead.
from\ frovedis.matrix.dense\ import\ FrovedisRowmajorMatrix
from\ frovedis.matrix.dvector\ import\ FrovedisDvector
rmat\ =\ FrovedisRowmajorMatrix(mat)
dlbl\ =\ FrovedisDvector(lbl)

#\ MultinomialNB\ with\ pre\-constructed\ frovedlis\-like\ inputs
from\ frovedis.mllib.naive_bayes\ import\ MultinomialNB
mnb\ =\ MultinomialNB().fit(rmat,\ dlbl)\ \ 
\f[]
.fi
.PP
\f[B]Return Value\f[]
.PD 0
.P
.PD
It simply returns "self" reference.
.SS 3. predict(X)
.PP
\f[B]Parameters\f[]
.PD 0
.P
.PD
\f[B]\f[I]X\f[]\f[]: A numpy dense or scipy sparse matrix or any python
array\-like object or an instance of FrovedisCRSMatrix for sparse data
and FrovedisRowmajorMatrix for dense data.
.PP
\f[B]Purpose\f[]
.PD 0
.P
.PD
It accepts the test feature matrix (X) in order to make prediction on
the trained model at frovedis server.
.PP
For example,
.IP
.nf
\f[C]
#\ predicting\ on\ MultinomialNB\ model
mnb.predict(mat)
\f[]
.fi
.PP
Output
.IP
.nf
\f[C]
[1\ 1\ 1\ 1\ 1]
\f[]
.fi
.PP
Like in fit(), frovedis\-like input can be used to speed\-up the
prediction making on the trained model at server side.
.PP
For example,
.IP
.nf
\f[C]
#\ Since\ "mat"\ is\ numpy\ dense\ data,\ we\ have\ created\ FrovedisRowmajorMatrix.
#\ For\ scipy\ sparse\ data,\ FrovedisCRSMatrix\ should\ be\ used\ instead.
from\ frovedis.matrix.dense\ import\ FrovedisRowmajorMatrix
rmat\ =\ FrovedisRowmajorMatrix(mat)

#\ predicting\ on\ MultinomialNB\ model\ using\ pre\-constructed\ input
mnb.predict(rmat)
\f[]
.fi
.PP
Output
.IP
.nf
\f[C]
[1\ 1\ 1\ 1\ 1]
\f[]
.fi
.PP
\f[B]Return Value\f[]
.PD 0
.P
.PD
It returns a numpy array of long (int64) type and of shape
\f[B](n_samples,)\f[] containing the predicted outputs.
.SS 4. predict_proba(X)
.PP
\f[B]Parameters\f[]
.PD 0
.P
.PD
\f[B]\f[I]X\f[]\f[]: A numpy dense or scipy sparse matrix or any python
array\-like object or an instance of FrovedisCRSMatrix for sparse data
and FrovedisRowmajorMatrix for dense data.
.PP
\f[B]Purpose\f[]
.PD 0
.P
.PD
Perform classification on an array and return probability estimates for
the test vector X.
.PP
It accepts the test feature matrix (X) in order to make prediction on
the trained model at frovedis server.
Unlike sklearn, it performs the classification on an array and returns
the probability estimates for the test feature matrix (X).
.PP
For example,
.IP
.nf
\f[C]
#\ finds\ the\ probablity\ sample\ for\ each\ class\ in\ the\ model
mnb.predict_proba(mat)
\f[]
.fi
.PP
Output
.IP
.nf
\f[C]
[[1.00000000e+00\ 1.31173349e\-73]
[1.00000000e+00\ 3.02940294e\-46]
[1.00000000e+00\ 1.60233859e\-37]
\&...
[9.99537526e\-01\ 4.62474254e\-04]
[1.00000000e+00\ 2.74000590e\-29]
[3.87284789e\-18\ 1.00000000e+00]]
\f[]
.fi
.PP
Like in fit(), frovedis\-like input can be used to speed\-up the
prediction making on the trained model at server side.
.PP
For example,
.IP
.nf
\f[C]
#\ Since\ "mat"\ is\ numpy\ dense\ data,\ we\ have\ created\ FrovedisRowmajorMatrix.
#\ For\ scipy\ sparse\ data,\ FrovedisCRSMatrix\ should\ be\ used\ instead.
from\ frovedis.matrix.dense\ import\ FrovedisRowmajorMatrix
rmat\ =\ FrovedisRowmajorMatrix(mat)

#\ finds\ the\ probablity\ sample\ for\ each\ class\ in\ the\ model
mnb.predict_proba(rmat)
\f[]
.fi
.PP
Output
.IP
.nf
\f[C]
[[1.00000000e+00\ 1.31173349e\-73]
[1.00000000e+00\ 3.02940294e\-46]
[1.00000000e+00\ 1.60233859e\-37]
\&...
[9.99537526e\-01\ 4.62474254e\-04]
[1.00000000e+00\ 2.74000590e\-29]
[3.87284789e\-18\ 1.00000000e+00]]
\f[]
.fi
.PP
\f[B]Return Value\f[]
.PD 0
.P
.PD
It returns a numpy array of float or double(float64) type and of shape
\f[B](n_samples, n_classes)\f[] containing the predicted probability
values.
.SS 5. score(X, y, sample_weight = None)
.PP
\f[B]Parameters\f[]
.PD 0
.P
.PD
\f[B]\f[I]X\f[]\f[]: A numpy dense or scipy sparse matrix or any python
array\-like object or an instance of FrovedisCRSMatrix for sparse data
and FrovedisRowmajorMatrix for dense data.
.PD 0
.P
.PD
\f[B]\f[I]y\f[]\f[]: Any python array\-like object or an instance of
FrovedisDvector.
.PD 0
.P
.PD
\f[B]\f[I]sample_weight\f[]\f[]: A python ndarray containing the
intended weights for each input samples and it should be the shape of
(n_samples, ).
(Default: None)
.PD 0
.P
.PD
When it is None (not specified explicitly), an uniform weight vector is
assigned on each input sample.
.PP
\f[B]Purpose\f[]
.PD 0
.P
.PD
Calculate mean accuracy on the given test data and labels i.e.
mean accuracy of self.predict(X) wrt.
y.
.PP
For example,
.IP
.nf
\f[C]
mnb.score(mat,lbl)
\f[]
.fi
.PP
Output
.IP
.nf
\f[C]
0.89\ 
\f[]
.fi
.PP
\f[B]Return Value\f[]
.PD 0
.P
.PD
It returns an accuracy score of double(float64) type.
.SS 6. get_params(deep = True)
.PP
\f[B]Parameters\f[]
.PD 0
.P
.PD
\f[I]\f[B]deep\f[]\f[]: A boolean parameter, used to get parameters and
their values for an estimator.
If True, will return the parameters for an estimator and contained
subobjects that are estimators.
(Default: True)
.PP
\f[B]Purpose\f[]
.PD 0
.P
.PD
This method belongs to the BaseEstimator class inherited by
MultinomialNB.
It is used to get parameters and their values of MultinomialNB class.
.PP
For example,
.IP
.nf
\f[C]
\ \ print(mnb.get_params())
\f[]
.fi
.PP
Output
.IP
.nf
\f[C]
\ {\[aq]alpha\[aq]:\ 1.0,\ \[aq]class_prior\[aq]:\ None,\ \[aq]fit_prior\[aq]:\ True,\ \[aq]verbose\[aq]:\ 0}
\f[]
.fi
.PP
\f[B]Return Value\f[]
.PD 0
.P
.PD
A dictionary of parameter names mapped to their values.
.SS 7. set_params(**params)
.PP
\f[B]Parameters\f[]
.PP
\f[I]\f[B]params\f[]\f[]: All the keyword arguments are passed this
function as dictionary.
This dictionary contains parameters of an estimator with its given
values to set.
.PP
\f[B]Purpose\f[]
.PD 0
.P
.PD
This method belongs to the BaseEstimator class inherited by
MultinomialNB, used to set parameter values.
.PP
For example,
.IP
.nf
\f[C]
print("get\ parameters\ before\ setting:",\ mnb.get_params())
mnb.set_params(fit_prior\ =\ False)
print("get\ parameters\ after\ setting:",\ mnb.get_params())
\f[]
.fi
.PP
Output
.IP
.nf
\f[C]
get\ parameters\ before\ setting:\ {\[aq]alpha\[aq]:\ 1.0,\ \[aq]class_prior\[aq]:\ None,\ \[aq]fit_prior\[aq]:\ True,\ \[aq]verbose\[aq]:\ 0}
get\ parameters\ after\ setting:\ {\[aq]alpha\[aq]:\ 1.0,\ \[aq]class_prior\[aq]:\ None,\ \[aq]fit_prior\[aq]:\ False,\ \[aq]verbose\[aq]:\ 0}
\f[]
.fi
.PP
\f[B]Return Value\f[]
.PD 0
.P
.PD
It simply returns "self" reference.
.SS 8. load(fname, dtype = None)
.PP
\f[B]Parameters\f[]
.PD 0
.P
.PD
\f[B]\f[I]fname\f[]\f[]: A string object containing the name of the file
having model information such as theta, cls_count, feature_count, label,
pi, type to be loaded.
.PD 0
.P
.PD
\f[B]\f[I]dtype\f[]\f[]: A data\-type is inferred from the input data.
Currently, expected input data\-type is either float or double(float64).
(Default: None)
.PP
\f[B]Purpose\f[]
.PD 0
.P
.PD
It loads the model stored previously from the specified file (having
little\-endian binary data).
.PP
For example,
.IP
.nf
\f[C]
mnb.load("./out/MNBModel",\ dtype\ =\ np.float64)
\f[]
.fi
.PP
\f[B]Return Value\f[]
.PD 0
.P
.PD
It simply returns "self" reference.
.SS 9. save(fname)
.PP
\f[B]Parameters\f[]
.PD 0
.P
.PD
\f[B]\f[I]fname\f[]\f[]: A string object containing the name of the file
on which the target model is to be saved.
.PP
\f[B]Purpose\f[]
.PD 0
.P
.PD
On success, it writes the model information(theta, cls_count,
feature_count, label, pi, type) in the specified file as little\-endian
binary data.
Otherwise, it throws an exception.
.PP
For example,
.IP
.nf
\f[C]
#\ To\ save\ the\ MultinomailNB\ model
mnb.save("./out/MNBModel")
\f[]
.fi
.PP
The MNBModel contains below directory structure:
.PD 0
.P
.PD
\f[B]MNBModel\f[]
.PD 0
.P
.PD
|\-\-\-\-\-\-label_map
.PD 0
.P
.PD
|\-\-\-\-\-\-metadata
.PD 0
.P
.PD
|\-\-\-\-\-\-\f[B]model\f[]
.PD 0
.P
.PD
\ \ \ \ \ \ \ \ |\-\-\-\-\-\-cls_count
.PD 0
.P
.PD
\ \ \ \ \ \ \ \ |\-\-\-\-\-\-feature_count
.PD 0
.P
.PD
\ \ \ \ \ \ \ \ |\-\-\-\-\-\-label
.PD 0
.P
.PD
\ \ \ \ \ \ \ \ |\-\-\-\-\-\-pi
.PD 0
.P
.PD
\ \ \ \ \ \ \ \ |\-\-\-\-\-\-\f[B]theta\f[]
.PD 0
.P
.PD
\ \ \ \ \ \ \ \ |\-\-\-\-\-\-type
.PP
\[aq]label_map\[aq] contains information about labels mapped with their
encoded value.
.PD 0
.P
.PD
\[aq]metadata\[aq] represents the detail about model_kind and datatype
of training vector.
.PD 0
.P
.PD
Here, the \f[B]model\f[] directory contains information about cls_count,
feature_count, label, pi, \f[B]theta\f[] and type.
.PP
This will save the naive bayes model on the path ‘/out/MNBModel'.
It would raise exception if the directory already exists with same name.
.PP
\f[B]Return Value\f[]
.PD 0
.P
.PD
It returns nothing.
.SS 10. debug_print()
.PP
\f[B]Purpose\f[]
.PD 0
.P
.PD
It shows the target model information on the server side user terminal.
It is mainly used for debugging purpose.
.PP
For example,
.IP
.nf
\f[C]
mnb.debug_print()\ 
\f[]
.fi
.PP
Output
.IP
.nf
\f[C]
model_type:\ multinomial
binarize:\ 0
feature_count:\ 3702.12\ 4580.24\ 24457.5\ 207416\ 21.8145\ \ ...\ 65.2141\ 59.3469\ 26.5766\ 96.4778\ 28.3608
theta:\ node\ =\ 0,\ local_num_row\ =\ 2,\ local_num_col\ =\ 30,\ val\ =\ \-5.08709\ \-4.8743\ \-3.19929\ \-1.06154\ 
\-10.1766\ \ \ \ \ 
\&...\ 
\-8.83939\ \-8.93218\ \-9.71532\ \-8.45266\ \-9.65263
pi:\ \-0.987294\ \-0.466145
label:\ 0\ 1
class\ count:\ 212\ 357
\f[]
.fi
.PP
It displays the target model information like model_type, binarize,
feature_count, theta, pi, etc.
values on the trained model which is currently present on the server.
.PP
\f[B]Return Value\f[]
.PD 0
.P
.PD
It returns nothing.
.SS 11. release()
.PP
\f[B]Purpose\f[]
.PD 0
.P
.PD
It can be used to release the in\-memory model at frovedis server.
.PP
For example,
.IP
.nf
\f[C]
mnb.release()
\f[]
.fi
.PP
This will reset the after\-fit populated attributes to None, along with
releasing server side memory.
.PP
\f[B]Return Value\f[]
.PD 0
.P
.PD
It returns nothing.
.SS 12. is_fitted()
.PP
\f[B]Purpose\f[]
.PD 0
.P
.PD
It can be used to confirm if the model is already fitted or not.
In case, predict() is used before training the model, then it can prompt
the user to train the naive bayes model first.
.PP
\f[B]Return Value\f[]
.PD 0
.P
.PD
It returns ‘True', if the model is already fitted otherwise, it returns
‘False'.
.SH SEE ALSO
.PP
rowmajor_matrix, crs_matrix, dvector
