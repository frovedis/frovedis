.\" Automatically generated by Pandoc 2.17.1.1
.\"
.\" Define V font for inline verbatim, using C font in formats
.\" that render this, and otherwise B font.
.ie "\f[CB]x\f[]"x" \{\
. ftr V B
. ftr VI BI
. ftr VB B
. ftr VBI BI
.\}
.el \{\
. ftr V CR
. ftr VI CI
. ftr VB CB
. ftr VBI CBI
.\}
.TH "Multinomial Naive Bayes" "" "" "" ""
.hy
.SH NAME
.PP
Multinomial Naive Bayes - One of the variations of Naive Bayes
algorithm.
It is a multinomial classification algorithm.
.SH SYNOPSIS
.IP
.nf
\f[C]
class frovedis.mllib.naive_bayes.MultinomialNB(alpha=1.0, fit_prior=True, class_prior=None, 
                                               verbose=0)  
\f[R]
.fi
.SS Public Member Functions
.PP
fit(X, y, sample_weight = None)
.PD 0
.P
.PD
predict(X)
.PD 0
.P
.PD
predict_proba(X)
.PD 0
.P
.PD
score(X, y, sample_weight = None)
.PD 0
.P
.PD
get_params(deep = True)
.PD 0
.P
.PD
set_params(**params)
.PD 0
.P
.PD
debug_print()
.PD 0
.P
.PD
load(fname, dtype = None)
.PD 0
.P
.PD
save(fname)
.PD 0
.P
.PD
release()
.PD 0
.P
.PD
is_fitted()
.SH DESCRIPTION
.PP
Naive Bayes classifier for multinomial models.
The multinomial Naive Bayes classifier is suitable for classification
with discrete features (e.g., word counts for text classification).
.PP
This module provides a client-server implementation, where the client
application is a normal python program.
The frovedis interface is almost same as Scikit-learn MultinomialNB
interface, but it doesn\[cq]t have any dependency with Scikit-learn.
It can be used simply even if the system doesn\[cq]t have Scikit-learn
installed.
Thus, in this implementation, a python client can interact with a
frovedis server sending the required python data for training at
frovedis side.
Python data is converted into frovedis compatible data internally and
the python ML call is linked with the respective frovedis ML call to get
the job done at frovedis server.
.PP
Python side calls for MultinomialNB on the frovedis server.
Once the training is completed with the input data at the frovedis
server, it returns an abstract model with a unique model ID to the
client python program.
.PP
When prediction-like request would be made on the trained model, python
program will send the same request to the frovedis server.
After the request is served at the frovedis server, the output would be
sent back to the python client.
.SS Detailed Description
.SS 1. MultinomialNB()
.PP
\f[B]Parameters\f[R]
.PD 0
.P
.PD
\f[B]\f[BI]alpha\f[B]\f[R]: A positive double (float64) smoothing
parameter.
It must be greater than or equal to 1.
(Default: 1.0)
.PD 0
.P
.PD
\f[B]\f[BI]fit_prior\f[B]\f[R]: A boolean parameter specifying whether
to learn class prior probabilities or not.
If False, a uniform prior will be used.
(Default: True)
.PD 0
.P
.PD
\f[B]\f[BI]class_prior\f[B]\f[R]: A numpy ndarray of double (float64)
type values and must be of shape \f[B](n_classes,)\f[R].
It gives prior probabilities of the classes.
(Default: None)
.PD 0
.P
.PD
When it is None (not specified explicitly), the priors are adjusted
according to the data.
.PD 0
.P
.PD
\f[B]\f[BI]verbose\f[B]\f[R]: An integer parameter specifying the log
level to use.
Its value is 0 by default (for INFO mode and not specified explicitly).
But it can be set to 1 (for DEBUG mode) or 2 (for TRACE mode) for
getting training time logs from frovedis server.
.PP
\f[B]Attributes\f[R]
.PD 0
.P
.PD
\f[B]\f[BI]class_log_prior_\f[B]\f[R]: A python ndarray of double
(float64) type values and has shape \f[B](n_classes,)\f[R].
It contains log probability of each class (smoothed).
.PD 0
.P
.PD
\f[B]\f[BI]feature_log_prob_\f[B]\f[R]: A python ndarray of double
(float64) type values and has shape \f[B](n_classes, n_features)\f[R].
It contains empirical log probability of features given a class.
.PD 0
.P
.PD
\f[B]\f[BI]class_count_\f[B]\f[R]: A python ndarray of double (float64)
type values and has shape \f[B](n_classes,)\f[R].
It contains the number of samples encountered for each class during
fitting.
This value is weighted by the sample weight when provided.
.PD 0
.P
.PD
\f[B]\f[BI]classes_\f[B]\f[R]: A python ndarray of double (float64) type
values and has shape \f[B](n_classes,)\f[R].
It contains the of unique labels given to the classifier during
training.
.PD 0
.P
.PD
\f[B]\f[BI]feature_count_\f[B]\f[R]: A python ndarray of double
(float64) type values and has shape \f[B](n_classes, n_features)\f[R].
It contains the number of samples encountered for each (class, feature)
during fitting.
This value is weighted by the sample weight when provided.
.PD 0
.P
.PD
\f[B]\f[BI]coef_\f[B]\f[R]: A python ndarray of double (float64) type
values.
.PD 0
.P
.PD
- If `classes_' is 2, then the shape \f[B](1, n_features)\f[R]
.PD 0
.P
.PD
- If `classes_' is more then 2, then the shape is \f[B](n_classes,
n_features)\f[R].
.PP
It mirrors `feature_log_prob_' for interpreting MultinomialNB as a
linear model.
.PD 0
.P
.PD
\f[B]\f[BI]intercept_\f[B]\f[R]: A python ndarray of double (float64)
type values.
.PD 0
.P
.PD
- If `classes_' are 2, then the shape \f[B](1,)\f[R]
.PD 0
.P
.PD
- If `classes_' is more then 2, then the shape is
\f[B](n_classes,)\f[R].
.PP
It mirrors `class_log_prior_' for interpreting MultinomialNB as a linear
model.
.PP
\f[B]Purpose\f[R]
.PD 0
.P
.PD
It initializes a MultinomialNB object with the given parameters.
.PP
\f[B]Return Value\f[R]
.PD 0
.P
.PD
It simply returns \[lq]self\[rq] reference.
.SS 2. fit(X, y, sample_weight = None)
.PP
\f[B]Parameters\f[R]
.PD 0
.P
.PD
\f[B]\f[BI]X\f[B]\f[R]: A numpy dense or scipy sparse matrix or any
python array-like object or an instance of FrovedisCRSMatrix for sparse
data and FrovedisRowmajorMatrix for dense data.
It has shape \f[B](n_samples, n_features)\f[R].
.PD 0
.P
.PD
\f[I]\f[BI]y\f[I]\f[R]: Any python array-like object or an instance of
FrovedisDvector containing the target labels.
It has shape \f[B](n_samples,)\f[R].
.PD 0
.P
.PD
\f[B]\f[BI]sample_weight\f[B]\f[R]: A python ndarray containing the
intended weights for each input samples and it should be the shape of
\f[B](n_samples,)\f[R].
(Default: None)
.PD 0
.P
.PD
When it is None (not specified explicitly), an uniform weight vector is
assigned on each input sample.
.PP
\f[B]Purpose\f[R]
.PD 0
.P
.PD
It accepts the training matrix (X) with labels (y) and trains a
MultinomialNB model.
.PP
For example,
.IP
.nf
\f[C]
# loading sample matrix and labels data
from sklearn.datasets import load_breast_cancer
mat, lbl = load_breast_cancer(return_X_y = True)

# fitting input matrix and label on MultinomialNB object
from frovedis.mllib.naive_bayes import MultinomialNB
mnb = MultinomialNB().fit(mat,lbl)  
\f[R]
.fi
.PP
When native python data is provided, it is converted to frovedis-like
inputs and sent to frovedis server which consumes some data transfer
time.
Pre-constructed frovedis-like inputs can be used to speed up the
training time, especially when same data would be used for multiple
executions.
.PP
For example,
.IP
.nf
\f[C]
# loading sample matrix and labels data
from sklearn.datasets import load_breast_cancer
mat, lbl = load_breast_cancer(return_X_y = True)

# Since \[dq]mat\[dq] is numpy dense data, we have created FrovedisRowmajorMatrix. 
# For scipy sparse data, FrovedisCRSMatrix should be used instead.
from frovedis.matrix.dense import FrovedisRowmajorMatrix
from frovedis.matrix.dvector import FrovedisDvector
rmat = FrovedisRowmajorMatrix(mat)
dlbl = FrovedisDvector(lbl)

# MultinomialNB with pre-constructed frovedis-like inputs
from frovedis.mllib.naive_bayes import MultinomialNB
mnb = MultinomialNB().fit(rmat, dlbl)  
\f[R]
.fi
.PP
\f[B]Return Value\f[R]
.PD 0
.P
.PD
It simply returns \[lq]self\[rq] reference.
.SS 3. predict(X)
.PP
\f[B]Parameters\f[R]
.PD 0
.P
.PD
\f[B]\f[BI]X\f[B]\f[R]: A numpy dense or scipy sparse matrix or any
python array-like object or an instance of FrovedisCRSMatrix for sparse
data and FrovedisRowmajorMatrix for dense data.
It has shape \f[B](n_samples, n_features)\f[R].
.PP
\f[B]Purpose\f[R]
.PD 0
.P
.PD
It accepts the test feature matrix (X) in order to make prediction on
the trained model at frovedis server.
.PP
For example,
.IP
.nf
\f[C]
# predicting on MultinomialNB model
mnb.predict(mat)
\f[R]
.fi
.PP
Output
.IP
.nf
\f[C]
[1 1 1 1 1]
\f[R]
.fi
.PP
Like in fit(), frovedis-like input can be used to speed-up the
prediction making on the trained model at server side.
.PP
For example,
.IP
.nf
\f[C]
# Since \[dq]mat\[dq] is numpy dense data, we have created FrovedisRowmajorMatrix.
# For scipy sparse data, FrovedisCRSMatrix should be used instead.
from frovedis.matrix.dense import FrovedisRowmajorMatrix
rmat = FrovedisRowmajorMatrix(mat)

# predicting on MultinomialNB model using pre-constructed input
mnb.predict(rmat)
\f[R]
.fi
.PP
Output
.IP
.nf
\f[C]
[1 1 1 1 1]
\f[R]
.fi
.PP
\f[B]Return Value\f[R]
.PD 0
.P
.PD
It returns a numpy array of long (int64) type and of shape
\f[B](n_samples,)\f[R] containing the predicted outputs.
.SS 4. predict_proba(X)
.PP
\f[B]Parameters\f[R]
.PD 0
.P
.PD
\f[B]\f[BI]X\f[B]\f[R]: A numpy dense or scipy sparse matrix or any
python array-like object or an instance of FrovedisCRSMatrix for sparse
data and FrovedisRowmajorMatrix for dense data.
It has shape \f[B](n_samples, n_features)\f[R].
.PP
\f[B]Purpose\f[R]
.PD 0
.P
.PD
Perform classification on an array and return probability estimates for
the test vector X.
.PP
It accepts the test feature matrix (X) in order to make prediction on
the trained model at frovedis server.
Unlike sklearn, it performs the classification on an array and returns
the probability estimates for the test feature matrix (X).
.PP
For example,
.IP
.nf
\f[C]
# finds the probablity sample for each class in the model
mnb.predict_proba(mat)
\f[R]
.fi
.PP
Output
.IP
.nf
\f[C]
[[1.00000000e+00 1.31173349e-73]
[1.00000000e+00 3.02940294e-46]
[1.00000000e+00 1.60233859e-37]
\&...
[9.99537526e-01 4.62474254e-04]
[1.00000000e+00 2.74000590e-29]
[3.87284789e-18 1.00000000e+00]]
\f[R]
.fi
.PP
Like in fit(), frovedis-like input can be used to speed-up the
prediction making on the trained model at server side.
.PP
For example,
.IP
.nf
\f[C]
# Since \[dq]mat\[dq] is numpy dense data, we have created FrovedisRowmajorMatrix.
# For scipy sparse data, FrovedisCRSMatrix should be used instead.
from frovedis.matrix.dense import FrovedisRowmajorMatrix
rmat = FrovedisRowmajorMatrix(mat)

# finds the probablity sample for each class in the model
mnb.predict_proba(rmat)
\f[R]
.fi
.PP
Output
.IP
.nf
\f[C]
[[1.00000000e+00 1.31173349e-73]
[1.00000000e+00 3.02940294e-46]
[1.00000000e+00 1.60233859e-37]
\&...
[9.99537526e-01 4.62474254e-04]
[1.00000000e+00 2.74000590e-29]
[3.87284789e-18 1.00000000e+00]]
\f[R]
.fi
.PP
\f[B]Return Value\f[R]
.PD 0
.P
.PD
It returns a numpy array of float or double (float64) type and of shape
\f[B](n_samples, n_classes)\f[R] containing the predicted probability
values.
.SS 5. score(X, y, sample_weight = None)
.PP
\f[B]Parameters\f[R]
.PD 0
.P
.PD
\f[B]\f[BI]X\f[B]\f[R]: A numpy dense or scipy sparse matrix or any
python array-like object or an instance of FrovedisCRSMatrix for sparse
data and FrovedisRowmajorMatrix for dense data.
It has shape \f[B](n_samples, n_features)\f[R].
.PD 0
.P
.PD
\f[I]\f[BI]y\f[I]\f[R]: Any python array-like object containing the
target labels.
It has shape \f[B](n_samples,)\f[R].
.PD 0
.P
.PD
\f[B]\f[BI]sample_weight\f[B]\f[R]: A python ndarray containing the
intended weights for each input samples and it should be the shape of
\f[B](n_samples,)\f[R].
(Default: None)
.PD 0
.P
.PD
When it is None (not specified explicitly), an uniform weight vector is
assigned on each input sample.
.PP
\f[B]Purpose\f[R]
.PD 0
.P
.PD
Calculate mean accuracy on the given test data and labels i.e.\ mean
accuracy of self.predict(X) wrt.
y.
.PP
For example,
.IP
.nf
\f[C]
mnb.score(mat,lbl)
\f[R]
.fi
.PP
Output
.IP
.nf
\f[C]
0.89 
\f[R]
.fi
.PP
\f[B]Return Value\f[R]
.PD 0
.P
.PD
It returns an accuracy score of double (float64) type.
.SS 6. get_params(deep = True)
.PP
\f[B]Parameters\f[R]
.PD 0
.P
.PD
\f[I]\f[BI]deep\f[I]\f[R]: A boolean parameter, used to get parameters
and their values for an estimator.
If True, will return the parameters for an estimator and contained
subobjects that are estimators.
(Default: True)
.PP
\f[B]Purpose\f[R]
.PD 0
.P
.PD
This method belongs to the BaseEstimator class inherited by
MultinomialNB.
It is used to get parameters and their values of MultinomialNB class.
.PP
For example,
.IP
.nf
\f[C]
print(mnb.get_params())
\f[R]
.fi
.PP
Output
.IP
.nf
\f[C]
{\[aq]alpha\[aq]: 1.0, \[aq]class_prior\[aq]: None, \[aq]fit_prior\[aq]: True, \[aq]verbose\[aq]: 0}
\f[R]
.fi
.PP
\f[B]Return Value\f[R]
.PD 0
.P
.PD
A dictionary of parameter names mapped to their values.
.SS 7. set_params(**params)
.PP
\f[B]Parameters\f[R]
.PD 0
.P
.PD
\f[I]\f[BI]**params\f[I]\f[R]: All the keyword arguments are passed this
function as dictionary.
This dictionary contains parameters of an estimator with its given
values to set.
.PP
\f[B]Purpose\f[R]
.PD 0
.P
.PD
This method belongs to the BaseEstimator class inherited by
MultinomialNB, used to set parameter values.
.PP
For example,
.IP
.nf
\f[C]
print(\[dq]Get parameters before setting:\[dq])
print(mnb.get_params())
# User just needs to provide the arguments and internally it will create a 
dictionary over the arguments given by user    
mnb.set_params(fit_prior = False)
print(\[dq]Get parameters after setting:\[dq])
print(mnb.get_params())
\f[R]
.fi
.PP
Output
.IP
.nf
\f[C]
Get parameters before setting: 
{\[aq]alpha\[aq]: 1.0, \[aq]class_prior\[aq]: None, \[aq]fit_prior\[aq]: True, \[aq]verbose\[aq]: 0}
Get parameters after setting: 
{\[aq]alpha\[aq]: 1.0, \[aq]class_prior\[aq]: None, \[aq]fit_prior\[aq]: False, \[aq]verbose\[aq]: 0}
\f[R]
.fi
.PP
\f[B]Return Value\f[R]
.PD 0
.P
.PD
It simply returns \[lq]self\[rq] reference.
.SS 8. load(fname, dtype = None)
.PP
\f[B]Parameters\f[R]
.PD 0
.P
.PD
\f[B]\f[BI]fname\f[B]\f[R]: A string object containing the name of the
file having model information such as theta, cls_count, feature_count,
label, pi, type to be loaded.
.PD 0
.P
.PD
\f[B]\f[BI]dtype\f[B]\f[R]: A data-type is inferred from the input data.
Currently, expected input data-type is either float or double (float64).
(Default: None)
.PP
\f[B]Purpose\f[R]
.PD 0
.P
.PD
It loads the model stored previously from the specified file (having
little-endian binary data).
.PP
For example,
.IP
.nf
\f[C]
mnb.load(\[dq]./out/MNBModel\[dq], dtype = np.float64)
\f[R]
.fi
.PP
\f[B]Return Value\f[R]
.PD 0
.P
.PD
It simply returns \[lq]self\[rq] reference.
.SS 9. save(fname)
.PP
\f[B]Parameters\f[R]
.PD 0
.P
.PD
\f[B]\f[BI]fname\f[B]\f[R]: A string object containing the name of the
file on which the target model is to be saved.
.PP
\f[B]Purpose\f[R]
.PD 0
.P
.PD
On success, it writes the model information(label_map, metadata and
model) in the specified file as little-endian binary data.
Otherwise, it throws an exception.
.PP
For example,
.IP
.nf
\f[C]
# To save the MultinomailNB model
mnb.save(\[dq]./out/MNBModel\[dq])
\f[R]
.fi
.PP
The MNBModel contains below directory structure:
.PD 0
.P
.PD
\f[B]MNBModel\f[R]
.PD 0
.P
.PD
|\[em]\[em]label_map
.PD 0
.P
.PD
|\[em]\[em]metadata
.PD 0
.P
.PD
|\[em]\[em]\f[B]model\f[R]
.PD 0
.P
.PD
\ \ \ \ \ \ \ \ |\[em]\[em]cls_count
.PD 0
.P
.PD
\ \ \ \ \ \ \ \ |\[em]\[em]feature_count
.PD 0
.P
.PD
\ \ \ \ \ \ \ \ |\[em]\[em]label
.PD 0
.P
.PD
\ \ \ \ \ \ \ \ |\[em]\[em]pi
.PD 0
.P
.PD
\ \ \ \ \ \ \ \ |\[em]\[em]\f[B]theta\f[R]
.PD 0
.P
.PD
\ \ \ \ \ \ \ \ |\[em]\[em]type
.PP
`label_map' contains information about labels mapped with their encoded
value.
.PD 0
.P
.PD
`metadata' represents the detail about model_kind and datatype of
training vector.
.PD 0
.P
.PD
Here, the \f[B]model\f[R] directory contains information about
cls_count, feature_count, label, pi, \f[B]theta\f[R] and type.
.PP
This will save the naive bayes model on the path `/out/MNBModel'.
It would raise exception if the directory already exists with same name.
.PP
\f[B]Return Value\f[R]
.PD 0
.P
.PD
It returns nothing.
.SS 10. debug_print()
.PP
\f[B]Purpose\f[R]
.PD 0
.P
.PD
It shows the target model information on the server side user terminal.
It is mainly used for debugging purpose.
.PP
For example,
.IP
.nf
\f[C]
mnb.debug_print() 
\f[R]
.fi
.PP
Output
.IP
.nf
\f[C]
model_type: multinomial
binarize: 0
feature_count: 3702.12 4580.24 24457.5 207416 21.8145  ... 65.2141 59.3469 26.5766 96.4778 28.3608
theta: node = 0, local_num_row = 2, local_num_col = 30, val = -5.08709 -4.8743 -3.19929 -1.06154 
-10.1766     
\&... 
-8.83939 -8.93218 -9.71532 -8.45266 -9.65263
pi: -0.987294 -0.466145
label: 0 1
class count: 212 357
\f[R]
.fi
.PP
This output will be visible on server side.
It displays the target model information like model_type, binarize,
feature_count, theta, pi, etc.
values on the trained model which is currently present on the server.
.PP
\f[B]No such output will be visible on client side.\f[R]
.PP
\f[B]Return Value\f[R]
.PD 0
.P
.PD
It returns nothing.
.SS 11. release()
.PP
\f[B]Purpose\f[R]
.PD 0
.P
.PD
It can be used to release the in-memory model at frovedis server.
.PP
For example,
.IP
.nf
\f[C]
mnb.release()
\f[R]
.fi
.PP
This will reset the after-fit populated attributes to None, along with
releasing server side memory.
.PP
\f[B]Return Value\f[R]
.PD 0
.P
.PD
It returns nothing.
.SS 12. is_fitted()
.PP
\f[B]Purpose\f[R]
.PD 0
.P
.PD
It can be used to confirm if the model is already fitted or not.
In case, predict() is used before training the model, then it can prompt
the user to train the naive bayes model first.
.PP
\f[B]Return Value\f[R]
.PD 0
.P
.PD
It returns `True', if the model is already fitted otherwise, it returns
`False'.
.SH SEE ALSO
.IP \[bu] 2
\f[B]Introduction to FrovedisRowmajorMatrix\f[R]
.PD 0
.P
.PD
.IP \[bu] 2
\f[B]Introduction to FrovedisCRSMatrix\f[R]
.PD 0
.P
.PD
.IP \[bu] 2
\f[B]Introduction to FrovedisDvector\f[R]
.PD 0
.P
.PD
.IP \[bu] 2
\f[B]Bernoulli Naive Bayes in Frovedis\f[R]
