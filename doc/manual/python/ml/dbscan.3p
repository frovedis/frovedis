.\" Automatically generated by Pandoc 2.17.1.1
.\"
.\" Define V font for inline verbatim, using C font in formats
.\" that render this, and otherwise B font.
.ie "\f[CB]x\f[]"x" \{\
. ftr V B
. ftr VI BI
. ftr VB B
. ftr VBI BI
.\}
.el \{\
. ftr V CR
. ftr VI CI
. ftr VB CB
. ftr VBI CBI
.\}
.TH "DBSCAN" "" "" "" ""
.hy
.SH NAME
.PP
DBSCAN clustering - Density-Based Spatial Clustering of Applications
with Noise (DBSCAN) is a clustering algorithm commonly used in EDA
(exploratory data analysis).
It is a base algorithm for density-based clustering, which can discover
clusters of different shapes and sizes from a large amount of data,
containing noise and outliers.
.SH SYNOPSIS
.IP
.nf
\f[C]
class frovedis.mllib.cluster.DBSCAN(eps=0.5, min_samples=5, metric=\[oq]euclidean\[cq],  
                                    metric_params=None, algorithm=\[oq]auto\[cq],  
                                    leaf_size=30, p=None, n_jobs=None,  
                                    batch_fraction=None, verbose=0)  
\f[R]
.fi
.SS Public Member Functions
.PP
fit(X, y = None, sample_weight = None)
.PD 0
.P
.PD
fit_predict(X, sample_weight = None)
.PD 0
.P
.PD
score(X, y, sample_weight = None)
.PD 0
.P
.PD
get_params(deep = True)
.PD 0
.P
.PD
set_params(**params)
.PD 0
.P
.PD
release()
.PD 0
.P
.PD
is_fitted()
.SH DESCRIPTION
.PP
DBSCAN is a Density-Based Clustering unsupervised learning algorithm
that identifies distinctive groups/clusters in the data, based on the
idea that a cluster in data space is a contiguous region of high
point-density, separated from other such clusters by contiguous regions
of low point-density.
.PP
It is able to find arbitrary shaped clusters and clusters with noise
(i.e.\  outliers).
The main idea behind DBSCAN is that a point belongs to a cluster if it
is close to many points from that cluster.
.PD 0
.P
.PD
DBSCAN algorithm requires two key parameters: \f[B]eps\f[R] and
\f[B]min_samples\f[R].
.PP
Based on these two parameters, the points are classified as core point,
border point, or outlier:
.PD 0
.P
.PD
- \f[B]Core point\f[R]: A point is a core point if there are at least
minPts number of points (including the point itself) in its surrounding
area with radius eps.
.PD 0
.P
.PD
- \f[B]Border point\f[R]: A point is a border point if it is reachable
from a core point and there are less than minPts number of points within
its surrounding area.
.PD 0
.P
.PD
- \f[B]Outlier\f[R]: A point is an outlier if it is not a core point and
not reachable from any core points.
.PP
The main advantage of using DBSCAN is that it is able to find
arbitrarily size and arbitrarily shaped clusters and identify noise data
while clustering.
.PP
This module provides a client-server implementation, where the client
application is a normal python program.
Frovedis is almost same as Scikit-learn clustering module providing
DBSCAN support, but it doesn\[cq]t have any dependency with
Scikit-learn.
It can be used simply even if the system doesn\[cq]t have Scikit-learn
installed.
Thus, in this implementation, a python client can interact with a
frovedis server sending the required python data for training at
frovedis side.
Python data is converted into frovedis compatible data internally and
the python ML call is linked with the respective frovedis ML call to get
the job done at frovedis server.
.PP
Python side calls for DBSCAN on the frovedis server.
Once the training is completed with the input data at the frovedis
server, it returns an abstract model with a unique model ID to the
client python program.
.PP
When prediction-like request would be made on the trained model, the
python program will send the same request to the frovedis server.
After the request is served at the frovedis server, the output would be
sent back to the python client.
.SS Detailed Description
.SS 1. DBSCAN()
.PP
\f[B]Parameters\f[R]
.PP
\f[I]\f[BI]eps\f[I]\f[R]: A positive double (float64) parameter
containing the epsilon value or distance that specifies the
neighborhoods.
(Default: 0.5)
.PD 0
.P
.PD
Two points are considered to be neighbors if the distance between them
is less than or equal to eps.
.PD 0
.P
.PD
\f[I]\f[BI]min_samples\f[I]\f[R]: A positive integer parameter which
specifies the number of samples in a neighborhood for a point to be
considered as a core point.
.PD 0
.P
.PD
This includes the point itself.
(Default: 5)
.PD 0
.P
.PD
\f[I]\f[BI]metric\f[I]\f[R]: A string object parameter used when
calculating distance between instances in a feature array.
(Default: `euclidean')
.PD 0
.P
.PD
It only supports `euclidean' distance.
.PD 0
.P
.PD
\f[I]\f[BI]metric_params\f[I]\f[R]: It is unused parameter which is an
additional keyword arguments for the metric function.
(Default: None)
.PD 0
.P
.PD
\f[I]\f[BI]algorithm\f[I]\f[R]: A string object parameter, used to
compute pointwise distances and find nearest neighbors.
(Default: `auto')
.PD 0
.P
.PD
When it is `auto', it will be set as `brute'(brute-force search
approach).
Unlike Scikit-learn, currently it supports only `brute'.
.PD 0
.P
.PD
\f[I]\f[BI]leaf_size\f[I]\f[R]: An unused parameter, which is used to
affect the speed of the construction and query.
(Default: 30)
.PD 0
.P
.PD
\f[I]\f[BI]p\f[I]\f[R]: An unused parameter specifying the power of the
Minkowski metric to be used to calculate distance between points.
(Default: None)
.PD 0
.P
.PD
\f[I]\f[BI]n_jobs\f[I]\f[R]: An unused parameter specifying the number
of parallel jobs to run.
(Default: None)
.PD 0
.P
.PD
\f[I]\f[BI]batch_fraction\f[I]\f[R]: A positive double (float64)
parameter used to calculate the batches of specific size.
These batches are used to construct the distance matrix.
(Default: None)
.PD 0
.P
.PD
It must be within the range of 0.0 to 1.0.
When it is None (not specified explicitly), it will be set as
np.finfo(np.float64).max value.
.PD 0
.P
.PD
\f[I]\f[BI]verbose\f[I]\f[R]: An integer parameter specifying the log
level to use.
Its value is set as 0 by default (for INFO mode).
But it can be set to 1 (for DEBUG mode) or 2 (for TRACE mode) for
getting training time logs from frovedis server.
.PP
\f[B]Attributes\f[R]
.PD 0
.P
.PD
\f[I]\f[BI]labels_\f[I]\f[R]: It is a python ndarray, containing int64
typed values and has shape \f[B](n_samples,)\f[R].
These are the coordinates of cluster centers.
.PD 0
.P
.PD
\f[I]\f[BI]core_sample_indices_\f[I]\f[R]: It is a python ndarray,
containing int32 or int64 typed values and has shape
\f[B](n_samples,)\f[R].
These are the core samples indices.
.PD 0
.P
.PD
\f[I]\f[BI]components_\f[I]\f[R]: It is a numpy array or
FrovedisRowmajorMatrix, containing float or double (float64) typed
values and has shape \f[B](n_samples, n_features)\f[R].
.PD 0
.P
.PD
These are the copy of each core sample found by training.
.PP
\f[B]Purpose\f[R]
.PD 0
.P
.PD
It initializes a DBSCAN object with the given parameters.
.PP
The parameters: \[lq]metric_params\[rq], \[lq]leaf_size\[rq],
\[lq]p\[rq] and \[lq]n_jobs\[rq] are simply kept to make the interface
uniform to Scikit-learn DBSCAN clustering module.
They are not used anywhere within frovedis implementation.
.PP
\f[B]Return Value\f[R]
.PD 0
.P
.PD
It simply returns \[lq]self\[rq] reference.
.SS 2. fit(X, y = None, sample_weight = None)
.PP
\f[B]Parameters\f[R]
.PD 0
.P
.PD
\f[I]\f[BI]X\f[I]\f[R]: A numpy dense or scipy sparse matrix or any
python array-like object or an instance of FrovedisCRSMatrix for sparse
data and FrovedisRowmajorMatrix for dense data of float or double
(float64) type.
It has shape \f[B](n_samples, n_features)\f[R].
.PD 0
.P
.PD
\f[I]\f[BI]y\f[I]\f[R]: None or any python array-like object (any
shape).
It is simply ignored in frovedis implementation, like in Scikit-learn.
.PD 0
.P
.PD
\f[I]\f[BI]sample_weight\f[I]\f[R]: Python array-like containing the
intended weights for each input samples and it should be the shape of
\f[B](n_samples, )\f[R].
.PD 0
.P
.PD
When it is None (not specified explicitly), an uniform weight vector is
assigned on each input sample.
.PP
\f[B]Purpose\f[R]
.PP
It clusters the given data points (X).
.PP
For example,
.IP
.nf
\f[C]
# loading sample matrix data
train_mat = np.loadtxt(\[dq]sample_data.txt\[dq])

# fitting input matrix on DBSCAN object
from frovedis.mllib.cluster import DBSCAN
dbm = DBSCAN(eps = 5, min_samples = 2).fit(train_mat)   
\f[R]
.fi
.PP
When native python data is provided, it is converted to frovedis-like
inputs and sent to frovedis server which consumes some data transfer
time.
Pre-constructed frovedis-like inputs can be used to speed up the
training time, especially when same data would be used for multiple
executions.
.PP
For example,
.IP
.nf
\f[C]
# loading sample matrix data
train_mat = np.loadtxt(\[dq]sample_data.txt\[dq])

# Since \[dq]train_mat\[dq] is numpy dense data, we have created FrovedisRowmajorMatrix.
# For scipy sparse data, FrovedisCRSMatrix should be used instead.   
from frovedis.matrix.dense import FrovedisRowmajorMatrix
rmat = FrovedisRowmajorMatrix(train_mat)

# DBSCAN with pre-constructed Frovedis-like inputs
from frovedis.mllib.cluster import DBSCAN
dbm = DBSCAN(eps = 5, min_samples = 2).fit(rmat)
\f[R]
.fi
.PP
\f[B]Return Value\f[R]
.PD 0
.P
.PD
It simply returns \[lq]self\[rq] reference.
.SS 3. fit_predict(X, sample_weight = None)
.PP
\f[B]Parameters\f[R]
.PD 0
.P
.PD
\f[I]\f[BI]X\f[I]\f[R]: A numpy dense or scipy sparse matrix or any
python array-like object or an instance of FrovedisCRSMatrix for sparse
data and FrovedisRowmajorMatrix for dense data of float or double
(float64) type.
It has shape \f[B](n_samples, n_features)\f[R].
.PD 0
.P
.PD
\f[I]\f[BI]sample_weight\f[I]\f[R]: Python array-like containing the
intended weights for each input samples and it should be the shape of
\f[B](n_samples, )\f[R].
.PD 0
.P
.PD
When it is None (not specified explicitly), an uniform weight vector is
assigned on each input sample.
.PP
\f[B]Purpose\f[R]
.PP
It computes the clusters from the given data points (X) or distance
matrix and predict labels.
.PP
For example,
.IP
.nf
\f[C]
# loading sample matrix data
train_mat = np.loadtxt(\[dq]sample_data.txt\[dq])

# fitting input matrix on DBSCAN object
from frovedis.mllib.cluster import DBSCAN
dbm = DBSCAN(eps = 5, min_samples = 2)
print(dbm.fit_predict(train_mat))    
\f[R]
.fi
.PP
Output
.IP
.nf
\f[C]
[0 0 1 1 1]
\f[R]
.fi
.PP
Like in fit() frovedis-like input can be used to speed-up training at
server side.
.PP
For example,
.IP
.nf
\f[C]
# loading sample matrix data
train_mat = np.loadtxt(\[dq]sample_data.txt\[dq])

# Since \[dq]train_mat\[dq] is numpy dense data, we have created FrovedisRowmajorMatrix.
# For scipy sparse data, FrovedisCRSMatrix should be used instead.   
from frovedis.matrix.dense import FrovedisRowmajorMatrix
rmat = FrovedisRowmajorMatrix(train_mat)

# using pre-constructed input matrix
from frovedis.mllib.cluster import DBSCAN
dbm = DBSCAN(eps = 5, min_samples = 2)
print(dbm.fit_predict(rmat))    
\f[R]
.fi
.PP
Output
.IP
.nf
\f[C]
[0 0 1 1 1]
\f[R]
.fi
.PP
\f[B]Return Value\f[R]
.PD 0
.P
.PD
It returns a numpy array of int64 type containing the cluster labels,
with shape \f[B](n_samples,)\f[R].
.SS 4. score(X, y, sample_weight = None)
.PP
\f[I]\f[BI]X\f[I]\f[R]: A numpy dense or scipy sparse matrix or any
python array-like object or an instance of FrovedisCRSMatrix for sparse
data and FrovedisRowmajorMatrix for dense data of float or double
(float64) type.
It has shape \f[B](n_samples, n_features)\f[R].
.PD 0
.P
.PD
\f[I]\f[BI]y\f[I]\f[R]: A python ndarray or an instance of
FrovedisVector containing the true labels for X.
It has shape \f[B](n_samples,)\f[R].
.PD 0
.P
.PD
\f[I]\f[BI]sample_weight\f[I]\f[R]: An unused parameter whose default
value is None.
It is simply ignored in frovedis implementation, like in Scikit-learn as
well.
.PP
\f[B]Purpose\f[R]
.PD 0
.P
.PD
It calculates homogeneity score on given test data and labels i.e
homogeneity score of self.predict(X, y) wrt.
y.
.PP
For example,
.IP
.nf
\f[C]
dbm.score(train_mat, [0 0 1 1 1])
\f[R]
.fi
.PP
Output
.IP
.nf
\f[C]
1.0
\f[R]
.fi
.PP
\f[B]Return Value\f[R]
.PD 0
.P
.PD
It returns a score of float type.
.SS 5. get_params(deep = True)
.PP
\f[B]Parameters\f[R]
.PD 0
.P
.PD
\f[I]\f[BI]deep\f[I]\f[R]: A boolean parameter, used to get parameters
and their values for an estimator.
If True, will return the parameters for an estimator and contained
subobjects that are estimators.
(Default: True)
.PP
\f[B]Purpose\f[R]
.PD 0
.P
.PD
This method belongs to the BaseEstimator class inherited by DBSCAN.
It is used to get parameters and their values of DBSCAN class.
.PP
For example,
.IP
.nf
\f[C]
print(dbm.get_params())
\f[R]
.fi
.PP
Output
.IP
.nf
\f[C]
{\[aq]algorithm\[aq]: \[aq]auto\[aq], \[aq]batch_fraction\[aq]: None, \[aq]eps\[aq]: 5, \[aq]leaf_size\[aq]: 30, 
\[aq]metric\[aq]: \[aq]euclidean\[aq], \[aq]metric_params\[aq]: None, \[aq]min_samples\[aq]: 2, \[aq]n_jobs\[aq]: None, 
\[aq]p\[aq]: None, \[aq]verbose\[aq]: 0}
\f[R]
.fi
.PP
\f[B]Return Value\f[R]
.PD 0
.P
.PD
A dictionary of parameter names mapped to their values.
.SS 6. set_params(**params)
.PP
\f[B]Parameters\f[R]
.PD 0
.P
.PD
\f[I]\f[BI]**params\f[I]\f[R]: All the keyword arguments are passed to
this function as dictionary.
This dictionary contains parameters of an estimator with its given
values to set.
.PP
\f[B]Purpose\f[R]
.PD 0
.P
.PD
This method belongs to the BaseEstimator class inherited by DBSCAN, used
to set parameter values.
.PP
For example,
.IP
.nf
\f[C]
print(\[dq]Get parameters before setting:\[dq]) 
print(kmeans.get_params())
# User just needs to provide the arguments and internally it will create a 
dictionary over the arguments given by user
kmeans.set_params(n_clusters=4, n_init=5)
print(\[dq]Get parameters after setting:\[dq]) 
print(kmeans.get_params())
\f[R]
.fi
.PP
Output
.IP
.nf
\f[C]
Get parameters before setting: 
{\[aq]algorithm\[aq]: \[aq]auto\[aq], \[aq]copy_x\[aq]: True, \[aq]init\[aq]:\[aq]random\[aq], \[aq]max_iter\[aq]: 300, 
\[aq]n_clusters\[aq]: 2, \[aq]n_init\[aq]: 1, \[aq]n_jobs\[aq]: 1, \[aq]precompute_distances\[aq]: \[aq]auto\[aq],
\[aq]random_state\[aq]: None, \[aq]tol\[aq]: 0.0001, \[aq]use_shrink\[aq]: False, \[aq]verbose\[aq]: 0}
Get parameters after setting: 
{\[aq]algorithm\[aq]: \[aq]auto\[aq], \[aq]copy_x\[aq]: True, \[aq]init\[aq]: \[aq]random\[aq], \[aq]max_iter\[aq]: 300, 
\[aq]n_clusters\[aq]: 4, \[aq]n_init\[aq]: 5, \[aq]n_jobs\[aq]: 1, \[aq]precompute_distances\[aq]: \[aq]auto\[aq], 
\[aq]random_state\[aq]: None, \[aq]tol\[aq]: 0.0001, \[aq]use_shrink\[aq]: False, \[aq]verbose\[aq]: 0}
\f[R]
.fi
.PP
\f[B]Return Value\f[R]
.PD 0
.P
.PD
It simply returns \[lq]self\[rq] reference.
.SS 7. release()
.PP
\f[B]Purpose\f[R]
.PD 0
.P
.PD
It can be used to release the in-memory model at frovedis server.
.PP
For example,
.IP
.nf
\f[C]
dbm.release()
\f[R]
.fi
.PP
This will reset the after-fit populated attributes to None, along with
releasing server side memory.
.PP
\f[B]Return Value\f[R]
.PD 0
.P
.PD
It returns nothing.
.SS 8. is_fitted()
.PP
\f[B]Purpose\f[R]
.PD 0
.P
.PD
It can be used to confirm if the model is already fitted or not.
In case, fit_predict() is used before training the model, then it can
prompt the user to train the clustering model first.
.PP
\f[B]Return Value\f[R]
.PD 0
.P
.PD
It returns `True', if the model is already fitted otherwise, it returns
`False'.
.SH SEE ALSO
.IP \[bu] 2
\f[B]Introduction to FrovedisRowmajorMatrix\f[R]
.PD 0
.P
.PD
.IP \[bu] 2
\f[B]Introduction to FrovedisCRSMatrix\f[R]
.PD 0
.P
.PD
.IP \[bu] 2
\f[B]Agglomerative Clustering in Frovedis\f[R]
.PD 0
.P
.PD
.IP \[bu] 2
\f[B]Spectral Clustering in Frovedis\f[R]
.PD 0
.P
.PD
.IP \[bu] 2
\f[B]KMeans in Frovedis\f[R]
