.\" Automatically generated by Pandoc 2.17.1.1
.\"
.\" Define V font for inline verbatim, using C font in formats
.\" that render this, and otherwise B font.
.ie "\f[CB]x\f[]"x" \{\
. ftr V B
. ftr VI BI
. ftr VB B
. ftr VBI BI
.\}
.el \{\
. ftr V CR
. ftr VI CI
. ftr VB CB
. ftr VBI CBI
.\}
.TH "SGDClassifier" "" "" "" ""
.hy
.SH NAME
.PP
SGDClassifier - A classification algorithm used to predict the labels
with various loss functions.
This estimator implements regularized linear models with stochastic
gradient descent (SGD) learning.
.SH SYNOPSIS
.IP
.nf
\f[C]
class frovedis.mllib.linear_model.SGDClassifier(loss=\[aq]hinge\[aq], penalty=\[aq]l2\[aq], alpha=0.0001,  
                                                l1_ratio=0.15, fit_intercept=True,  
                                                max_iter=1000, tol=1e-3,  
                                                shuffle=True, verbose=0,  
                                                epsilon=0.1, n_jobs=None,  
                                                random_state=None,  
                                                learning_rate=\[dq]invscaling\[dq],  
                                                eta0=1.0, power_t=0.5,  
                                                early_stopping=False,  
                                                validation_fraction=0.1,  
                                                n_iter_no_change=5,  
                                                class_weight=None,  
                                                warm_start=False,  
                                                average=False)  
                                                
\f[R]
.fi
.SS Public Member Functions
.PP
fit(X, y, coef_init = None, intercept_init = None, sample_weight = None)
.PD 0
.P
.PD
predict(X)
.PD 0
.P
.PD
predict_proba(X)
.PD 0
.P
.PD
score(X, y, sample_weight = None)
.PD 0
.P
.PD
load(fname, dtype = None)
.PD 0
.P
.PD
save(fname)
.PD 0
.P
.PD
get_params(deep = True)
.PD 0
.P
.PD
set_params(**params)
.PD 0
.P
.PD
debug_print()
.PD 0
.P
.PD
release()
.PD 0
.P
.PD
is_fitted()
.SH DESCRIPTION
.PP
Stochastic Gradient Descent (SGD) is used for discriminative learning of
linear classifiers under convex loss functions such as SVM and Logistic
regression.
It has been successfully applied to large-scale datasets because the
update to the coefficients is performed for each training instance,
rather than at the end of instances.
\f[B]Frovedis supports both binary and multinomial Stochastic Gradient
Descent (SGD) classifier algorithms.\f[R]
.PP
Stochastic Gradient Descent (SGD) classifier basically implements a
plain SGD learning routine supporting various loss functions and
penalties for classification.
It implements regularized linear models with stochastic gradient descent
(SGD) learning: the gradient of the loss is estimated each sample at a
time and the model is updated along the way with a decreasing strength
schedule.
It is a linear method which uses the following loss functions:
.PD 0
.P
.PD
\f[B]1) hinge\f[R]
.PD 0
.P
.PD
\f[B]2) log\f[R]
.PD 0
.P
.PD
\f[B]3) squared_loss\f[R]
.PP
\f[B]It supports ZERO, L1 and L2 regularization to address the overfit
problem.\f[R]
.PP
During training, the input \f[B]X\f[R] is the training data and
\f[B]y\f[R] are their corresponding label values (Frovedis supports any
values as for labels, but internally it encodes the input binary labels
to -1 and 1, before training at Frovedis server) which we want to
predict.
.PP
This module provides a client-server implementation, where the client
application is a normal python program.
The frovedis interface is almost same as Scikit-learn SGDClassifier
(Stochastic Gradient Descent Classification) interface, but it
doesn\[cq]t have any dependency with Scikit-learn.
It can be used simply even if the system doesn\[cq]t have Scikit-learn
installed.
Thus in this implementation, a python client can interact with a
frovedis server sending the required python data for training at
frovedis side.
Python data is converted into frovedis compatible data internally and
the python ML call is linked with the respective frovedis ML call to get
the job done at frovedis server.
.PP
Python side calls for SGDClassifier on the frovedis server.
Once the training is completed with the input data at the frovedis
server, it returns an abstract model with a unique model ID to the
client python program.
.PP
When prediction-like request would be made on the trained model, python
program will send the same request to the frovedis server.
After the request is served at the frovedis server, the output would be
sent back to the python client.
.SS Detailed Description
.SS 1. SGDClassifier()
.PP
\f[B]Parameters\f[R]
.PD 0
.P
.PD
\f[I]\f[BI]loss\f[I]\f[R]: A string object parameter containing the loss
function type to use.
Currently, frovedis supports `hinge', `log\[cq]and \[oq]squared_loss'
functions.
(Default: `hinge')
.PD 0
.P
.PD
\f[I]\f[BI]penalty\f[I]\f[R]: A string object parameter containing the
regularizer type to use.
Currently none, l1 and l2 are supported by Frovedis.
(Default: `l2')
.PD 0
.P
.PD
If it is None (not specified explicitly), it will be set as `ZERO'
regularization type.
.PD 0
.P
.PD
\f[I]\f[BI]alpha\f[I]\f[R]: Zero or a positive double (float64)
smoothing parameter.
(Default: 0.0001)
.PD 0
.P
.PD
\f[I]\f[BI]l1_ratio\f[I]\f[R]: An unused parameter.
(Default: 0.15)
.PD 0
.P
.PD
\f[I]\f[BI]fit_intercept\f[I]\f[R]: A boolean parameter specifying
whether a constant (intercept) should be added to the decision function.
(Default: True)
.PD 0
.P
.PD
\f[I]\f[BI]max_iter\f[I]\f[R]: A positive integer parameter specifying
maximum iteration count.
(Default: 1000)
.PD 0
.P
.PD
\f[I]\f[BI]tol\f[I]\f[R]: A double (float64) parameter specifying the
convergence tolerance value.
It must be zero or a positive value.
(Default: 1e-3)
.PD 0
.P
.PD
\f[I]\f[BI]shuffle\f[I]\f[R]: An unused parameter.
(Default: True)
.PD 0
.P
.PD
\f[I]\f[BI]verbose\f[I]\f[R]: An integer parameter specifying the log
level to use.
Its value is set as 0 by default (for INFO mode).
But it can be set to 1 (for DEBUG mode) or 2 (for TRACE mode) for
getting training time logs from frovedis server.
.PD 0
.P
.PD
\f[I]\f[BI]epsilon\f[I]\f[R]: An unused parameter.
(Default: 0.1)
.PD 0
.P
.PD
\f[I]\f[BI]n_jobs\f[I]\f[R]: An unused parameter.
(Default: None)
.PD 0
.P
.PD
\f[I]\f[BI]random_state\f[I]\f[R]: An unused parameter.
(Default: None)
.PD 0
.P
.PD
\f[I]\f[BI]learning_rate\f[I]\f[R]: A string object parameter containing
the learning rate.
(Default: `invscaling')
.PD 0
.P
.PD
Unlike sklearn, Frovedis only supports `invscaling' learning rate.
`invscaling' gradually decreases the learning rate
\f[B]`learning_rate_'\f[R] at each time step \f[B]`t'\f[R] using an
inverse scaling exponent of \f[B]`power_t'\f[R].
.PD 0
.P
.PD
\f[B]learning_rate_ = eta0 / pow(t, power_t)\f[R]
.PD 0
.P
.PD
\f[I]\f[BI]eta0\f[I]\f[R]: A double (float64) parameter specifying the
initial learning rate for the `invscaling' schedules.
(Default: 1.0)
.PD 0
.P
.PD
\f[I]\f[BI]power_t\f[I]\f[R]: A double (float64) parameter specifying
the exponent for inverse scaling learning rate.
(Default: 0.5)
.PD 0
.P
.PD
\f[I]\f[BI]early_stopping\f[I]\f[R]: An unused parameter.
(Default: False)
.PD 0
.P
.PD
\f[I]\f[BI]validation_fraction\f[I]\f[R]: An unused parameter.
(Default: 0.1)
.PD 0
.P
.PD
\f[I]\f[BI]n_iter_no_change\f[I]\f[R]: An unused parameter.
(Default: 5)
.PD 0
.P
.PD
\f[I]\f[BI]class_weight\f[I]\f[R]: An unused parameter.
(Default: None)
.PD 0
.P
.PD
\f[I]\f[BI]warm_start\f[I]\f[R]: A boolean parameter which when set to
True, reuses the solution of the previous call to fit as initialization,
otherwise, just erase the previous solution.
(Default: False)
.PD 0
.P
.PD
\f[I]\f[BI]average\f[I]\f[R]: An unused parameter.
(Default: False)
.PP
\f[B]Attributes\f[R]
.PD 0
.P
.PD
\f[I]\f[BI]coef_\f[I]\f[R]: It is a python ndarray(containing float or
double (float64) typed values depending on data-type of input matrix
(X)).
It is the weights assigned to the features.
.PD 0
.P
.PD
Shape of this attribute depends on the n_classes.
.PD 0
.P
.PD
- If `classes_' is 2, then the shape \f[B](1, n_features)\f[R]
.PD 0
.P
.PD
- If `classes_' is more then 2, then the shape is \f[B](n_classes,
n_features)\f[R].
.PP
\f[I]\f[BI]intercept_\f[I]\f[R]: It is a python ndarray(float or double
(float64) values depending on input matrix data type) and has shape
\f[B](1,)\f[R].
It specifies the constants in decision function.
.PD 0
.P
.PD
\f[I]\f[BI]classes_\f[I]\f[R]: It is a python ndarray(any type) of
unique labels given to the classifier during training.
It has shape \f[B](n_classes,)\f[R].
This attribute is not available for \f[B]squared_loss\f[R].
.PD 0
.P
.PD
\f[I]\f[BI]n_iter\f[I]\f[R]: An integer value used to get the actual
iteration point at which the problem is converged.
.PP
\f[B]Purpose\f[R]
.PD 0
.P
.PD
It initializes a SGDClassifier object with the given parameters.
.PP
The parameters: \[lq]l1_ratio\[rq], \[lq]shuffle\[rq],
\[lq]epsilon\[rq], \[lq]n_jobs\[rq], \[lq]random_state\[rq],
\[lq]early_stopping\[rq], \[lq]validation_fraction\[rq],
\[lq]n_iter_no_change\[rq], \[lq]class_weight\[rq] and \[lq]average\[rq]
are simply kept to make the interface uniform to Scikit-learn
SGDClassifier module.
They are not used anywhere within frovedis implementation.
.PP
\f[B]Return Value\f[R]
.PD 0
.P
.PD
It simply returns \[lq]self\[rq] reference.
.SS 2. fit(X, y, coef_init = None, intercept_init = None, sample_weight = None)
.PP
\f[B]Parameters\f[R]
.PD 0
.P
.PD
\f[I]\f[BI]X\f[I]\f[R]: A numpy dense or scipy sparse matrix or any
python array-like object or an instance of FrovedisCRSMatrix for sparse
data and FrovedisColmajorMatrix for dense data.
It has shape \f[B](n_samples, n_features)\f[R].
.PD 0
.P
.PD
\f[I]\f[BI]y\f[I]\f[R]: Any python array-like object or an instance of
FrovedisDvector containing the target labels.
It has shape \f[B](n_samples,)\f[R].
.PD 0
.P
.PD
\f[I]\f[BI]coef_init\f[I]\f[R]: An unused parameter that specifies the
initial coefficients to warm-start the optimization.
(Default: None)
.PD 0
.P
.PD
\f[I]\f[BI]intercept_init\f[I]\f[R]: An unused parameter that specifies
the initial intercept to warm-start the optimization.
(Default: None)
.PD 0
.P
.PD
\f[I]\f[BI]sample_weight\f[I]\f[R]: A python ndarray containing the
intended weights for each input samples and it should be the shape of
\f[B](n_samples,)\f[R].
.PD 0
.P
.PD
When it is None (not specified explicitly), an uniform weight vector is
assigned on each input sample.
(Default: None)
.PP
\f[B]Purpose\f[R]
.PD 0
.P
.PD
It accepts the training feature matrix (X) and corresponding output
labels (y) as inputs from the user and trains a SGDClassifier model with
specified regularization with those data at frovedis server.
.PP
For example,
.IP
.nf
\f[C]
# loading a sample matrix and labels data
from sklearn.datasets import load_breast_cancer
mat, lbl = load_breast_cancer(return_X_y = True)

# fitting input matrix and label on SGDClassifier object
from frovedis.mllib.linear_model import SGDClassifier
sgd_clf = SGDClassifier().fit(mat, lbl)
\f[R]
.fi
.PP
When native python data is provided, it is converted to frovedis-like
inputs and sent to frovedis server which consumes some data transfer
time.
Pre-constructed frovedis-like inputs can be used to speed up the
training time, especially when same data would be used for multiple
executions.
.PP
For example,
.IP
.nf
\f[C]
# loading a sample matrix and labels data
from sklearn.datasets import load_breast_cancer
mat, lbl = load_breast_cancer(return_X_y = True)

# Since \[dq]mat\[dq] is numpy dense data, we have created FrovedisColmajorMatrix.
and for scipy sparse data, FrovedisCRSMatrix should be used. 
from frovedis.matrix.dense import FrovedisColmajorMatrix
from frovedis.matrix.dvector import FrovedisDvector
cmat = FrovedisColmajorMatrix(mat)
dlbl = FrovedisDvector(lbl)

# Linear SVC with pre-constructed frovedis-like inputs
from frovedis.mllib.linear_model import SGDClassifier
sgd_clf = SGDClassifier().fit(cmat,dlbl)
\f[R]
.fi
.PP
\f[B]Return Value\f[R]
.PD 0
.P
.PD
It simply returns \[lq]self\[rq] reference.
.SS 3. predict(X)
.PP
\f[B]Parameters\f[R]
.PD 0
.P
.PD
\f[I]\f[BI]X\f[I]\f[R]: A numpy dense or scipy sparse matrix or any
python array-like object or an instance of FrovedisCRSMatrix for sparse
data and FrovedisRowmajorMatrix for dense data.
It has shape \f[B](n_samples, n_features)\f[R].
.PP
\f[B]Purpose\f[R]
.PD 0
.P
.PD
It accepts the test feature matrix (X) in order to make prediction on
the trained model at frovedis server.
.PP
For example,
.IP
.nf
\f[C]
sgd_clf.predict(mat)  
\f[R]
.fi
.PP
Output:
.IP
.nf
\f[C]
[0 0 0 1 . . . . 0 0 0 1]
\f[R]
.fi
.PP
Like in fit(), frovedis-like input can be used to speed-up the
prediction making on the trained model at server side.
.PP
For example,
.IP
.nf
\f[C]
# Since \[dq]cmat\[dq] is FrovedisColmajorMatrix, we have created FrovedisRowmajorMatrix.
# predicting on SGDClassifier using frovedis-like input 
sgd_clf.predict(cmat.to_frovedis_rowmatrix())
\f[R]
.fi
.PP
Output
.IP
.nf
\f[C]
[0 0 0 1 . . . . 0 0 0 1]
\f[R]
.fi
.PP
\f[B]Return Value\f[R]
.PD 0
.P
.PD
For \f[B]squared_loss\f[R] loss, it returns a numpy array of \f[B]double
(float64)\f[R] type and for other loss functions it returns a numpy
array of \f[B]int64\f[R] type containing the predicted outputs.
It has shape \f[B](n_samples,)\f[R].
.SS 4. predict_proba(X)
.PP
\f[B]Parameters\f[R]
.PD 0
.P
.PD
\f[B]\f[BI]X\f[B]\f[R]: A numpy dense or scipy sparse matrix or any
python array-like object or an instance of FrovedisCRSMatrix for sparse
data and FrovedisRowmajorMatrix for dense data.
It has shape \f[B](n_samples, n_features)\f[R].
.PP
\f[B]Purpose\f[R]
.PD 0
.P
.PD
Perform classification on an array and return probability estimates for
the test vector X.
.PP
It accepts the test feature matrix (X) in order to make prediction on
the trained model at frovedis server.
Unlike sklearn, it performs the classification on an array and returns
the probability estimates for the test feature matrix (X).
.PP
\f[B]This method is not available for \[lq]hinge\[rq] and
\[lq]squared_loss\[rq] function.\f[R]
.PP
For example,
.IP
.nf
\f[C]
# finds the probablity sample for each class in the model
sgd_clf.predict_proba(mat)
\f[R]
.fi
.PP
Output
.IP
.nf
\f[C]
[[0. 1.]
[0. 1.]
[0. 1.]
\&...
[0. 1.]
[0. 1.]
[0. 1.]]
\f[R]
.fi
.PP
Like in fit(), frovedis-like input can be used to speed-up the
prediction making on the trained model at server side.
.PP
For example,
.IP
.nf
\f[C]
# Since \[dq]mat\[dq] is numpy dense data, we have created FrovedisRowmajorMatrix.
# For scipy sparse data, FrovedisCRSMatrix should be used instead.
from frovedis.matrix.dense import FrovedisRowmajorMatrix
rmat = FrovedisRowmajorMatrix(mat)

# finds the probablity sample for each class in the model
sgd_clf.predict_proba(rmat)
\f[R]
.fi
.PP
Output
.IP
.nf
\f[C]
[[0. 1.]
[0. 1.]
[0. 1.]
\&...
[0. 1.]
[0. 1.]
[0. 1.]]
\f[R]
.fi
.PP
\f[B]Return Value\f[R]
.PD 0
.P
.PD
It returns a numpy array of float or double (float64) type and of shape
\f[B](n_samples, n_classes)\f[R] containing the predicted probability
values.
.SS 5. score(X, y, sample_weight = None)
.PP
\f[B]Parameters\f[R]
.PD 0
.P
.PD
\f[B]X\f[R]: A numpy dense or scipy sparse matrix or any python
array-like object or an instance of FrovedisCRSMatrix for sparse data
and FrovedisRowmajorMatrix for dense data.
It has shape \f[B](n_samples, n_features)\f[R].
.PD 0
.P
.PD
\f[I]\f[BI]y\f[I]\f[R]: Any python array-like object containing the
target labels.
It has shape \f[B](n_samples,)\f[R].
.PD 0
.P
.PD
\f[B]sample_weight\f[R]: A python narray containing the intended weights
for each input samples and it should be the shape of
\f[B](n_samples,)\f[R].
.PD 0
.P
.PD
When it is None (not specified explicitly), an uniform weight vector is
assigned on each input sample.
(Default: None)
.PP
\f[B]Purpose\f[R]
.PD 0
.P
.PD
Calculate mean accuracy on the given test data and labels i.e.\ mean
accuracy of self.predict(X) wrt.
y.
.PP
\f[B]For `log' and `hinge' loss, `accuracy_score' is calculated and for
`squared_loss', `r2_score' is calculated.\f[R]
.PP
For example,
.IP
.nf
\f[C]
# calculate mean accuracy score on given test data and labels
sgd_clf.score(mat, lbl)
 
\f[R]
.fi
.PP
Output
.IP
.nf
\f[C]
0.91  
\f[R]
.fi
.PP
\f[B]Return Value\f[R]
.PD 0
.P
.PD
For `log' and `hinge' loss, it returns `accuracy_score' and for
`squared_loss', it returns `r2_score' of double (float64) type.
.SS 6. load(fname, dtype = None)
.PP
\f[B]Parameters\f[R]
.PD 0
.P
.PD
\f[B]fname\f[R]: A string object containing the name of the file having
model information to be loaded.
.PD 0
.P
.PD
\f[B]dtype\f[R]: A data-type is inferred from the input data.
Currently, expected input data-type is either float or double (float64).
(Default: None)
.PD 0
.P
.PD
\f[B]For `squared_loss' this method doesn\[cq]t load the saved file
`label_map'.\f[R]
.PP
\f[B]Purpose\f[R]
.PD 0
.P
.PD
It loads the model from the specified file(having little-endian binary
data).
.PP
For example,
.IP
.nf
\f[C]
# loading the SGDClassifier model
sgd_clf.load(\[dq]./out/SCLFModel\[dq])
\f[R]
.fi
.PP
\f[B]Return Value\f[R]
.PD 0
.P
.PD
It simply returns \[lq]self\[rq] instance.
.SS 7. save(fname)
.PP
\f[B]Parameters\f[R]
.PD 0
.P
.PD
\f[B]fname\f[R]: A string object containing the name of the file on
which the target model is to be saved.
.PP
\f[B]Purpose\f[R]
.PD 0
.P
.PD
On success, it writes the model information (label_map, metadata and
model) in the specified file as little-endian binary data.
Otherwise, it throws an exception.
.PP
For example,
.IP
.nf
\f[C]
# saving the model
sgd_clf.save(\[dq]./out/SCLFModel\[dq])
\f[R]
.fi
.PP
The SCLFModel contains below directory structure:
.PD 0
.P
.PD
\f[B]SCLFModel\f[R]
.PD 0
.P
.PD
|\[em]\[em]label_map
.PD 0
.P
.PD
|\[em]\[em]metadata
.PD 0
.P
.PD
|\[em]\[em]model
.PP
`label_map' contains information about labels mapped with their encoded
value.
\f[B]This information is not saved for `squared_loss' loss
function.\f[R]
.PP
`metadata' represents the detail about loss function, model_kind and
datatype of training vector.
.PD 0
.P
.PD
Here, the model file contains information about model_id, model_kind and
datatype of training vector.
.PP
This will save the SGDClassifier model on the path `/out/SCLFModel'.
It would raise exception if the directory already exists with same name.
.PP
\f[B]Return Value\f[R]
.PD 0
.P
.PD
It returns nothing.
.SS 8. get_params(deep = True)
.PP
\f[B]Parameters\f[R]
.PD 0
.P
.PD
\f[I]\f[BI]deep\f[I]\f[R]: A boolean parameter, used to get parameters
and their values for an estimator.
If True, will return the parameters for an estimator and contained
subobjects that are estimators.
(Default: True)
.PP
\f[B]Purpose\f[R]
.PD 0
.P
.PD
This method belongs to the BaseEstimator class inherited by
SGDClassifier.
It is used to get parameters and their values of SGDClassifier class.
.PP
For example,
.IP
.nf
\f[C]
print(sgd_clf.get_params())
\f[R]
.fi
.PP
Output
.IP
.nf
\f[C]
{\[aq]alpha\[aq]: 0.0001, \[aq]average\[aq]: False, \[aq]class_weight\[aq]: None, 
\[aq]early_stopping\[aq]: False, \[aq]epsilon\[aq]: 0.1, \[aq]eta0\[aq]: 1.0, \[aq]fit_intercept\[aq]: True, 
\[aq]l1_ratio\[aq]: 0.15, \[aq]learning_rate\[aq]: \[aq]invscaling\[aq], \[aq]loss\[aq]: \[aq]hinge\[aq], \[aq]max_iter\[aq]: 1000, 
\[aq]n_iter_no_change\[aq]: 5, \[aq]n_jobs\[aq]: None, \[aq]penalty\[aq]: \[aq]l2\[aq], \[aq]power_t\[aq]: 0.5, 
\[aq]random_state\[aq]: None, \[aq]shuffle\[aq]: True, \[aq]tol\[aq]: 0.001, \[aq]validation_fraction\[aq]: 0.1, 
\[aq]verbose\[aq]: 0, \[aq]warm_start\[aq]: False}
\f[R]
.fi
.PP
\f[B]Return Value\f[R]
.PD 0
.P
.PD
A dictionary of parameter names mapped to their values.
.SS 9. set_params(**params)
.PP
\f[B]Parameters\f[R]
.PD 0
.P
.PD
\f[I]\f[BI]**params\f[I]\f[R]: All the keyword arguments are passed this
function as dictionary.
This dictionary contains parameters of an estimator with its given
values to set.
.PP
\f[B]Purpose\f[R]
.PD 0
.P
.PD
This method belongs to the BaseEstimator class inherited by
SGDClassifier, used to set parameter values.
.PP
For example,
.IP
.nf
\f[C]
print(\[dq]Get parameters before setting:\[dq])
print(sgd_clf.get_params())
# User just needs to provide the arguments and internally it will create a 
dictionary over the arguments given by user
sgd_clf.set_params(penalty = \[aq]l1\[aq], fit_intercept = False)
print(\[dq]Get parameters before setting:\[dq])
print(sgd_clf.get_params()) 
\f[R]
.fi
.PP
Output
.IP
.nf
\f[C]
Get parameters before setting: 
{\[aq]alpha\[aq]: 0.0001, \[aq]average\[aq]: False, \[aq]class_weight\[aq]: None, \[aq]early_stopping\[aq]: False, 
\[aq]epsilon\[aq]: 0.1, \[aq]eta0\[aq]: 1.0, \[aq]fit_intercept\[aq]: True, \[aq]l1_ratio\[aq]: 0.15, 
\[aq]learning_rate\[aq]: \[aq]invscaling\[aq], \[aq]loss\[aq]: \[aq]hinge\[aq], \[aq]max_iter\[aq]: 1000, 
\[aq]n_iter_no_change\[aq]: 5, \[aq]n_jobs\[aq]: None, \[aq]penalty\[aq]: \[aq]l2\[aq], \[aq]power_t\[aq]: 0.5, 
\[aq]random_state\[aq]: None, \[aq]shuffle\[aq]: True, \[aq]tol\[aq]: 0.001, \[aq]validation_fraction\[aq]: 0.1, 
\[aq]verbose\[aq]: 0, \[aq]warm_start\[aq]: False}
Get parameters before setting: 
{\[aq]alpha\[aq]: 0.0001, \[aq]average\[aq]: False, \[aq]class_weight\[aq]: None, \[aq]early_stopping\[aq]: False, 
\[aq]epsilon\[aq]: 0.1, \[aq]eta0\[aq]: 1.0, \[aq]fit_intercept\[aq]: False, \[aq]l1_ratio\[aq]: 0.15, 
\[aq]learning_rate\[aq]: \[aq]invscaling\[aq], \[aq]loss\[aq]: \[aq]hinge\[aq], \[aq]max_iter\[aq]: 1000, 
\[aq]n_iter_no_change\[aq]: 5, \[aq]n_jobs\[aq]: None, \[aq]penalty\[aq]: \[aq]l1\[aq], \[aq]power_t\[aq]: 0.5, 
\[aq]random_state\[aq]: None, \[aq]shuffle\[aq]: True, \[aq]tol\[aq]: 0.001, \[aq]validation_fraction\[aq]: 0.1, 
\[aq]verbose\[aq]: 0, \[aq]warm_start\[aq]: False}
\f[R]
.fi
.PP
\f[B]Return Value\f[R]
.PD 0
.P
.PD
It simply returns \[lq]self\[rq] reference.
.SS 10. debug_print()
.PP
\f[B]Purpose\f[R]
.PD 0
.P
.PD
It shows the target model information(weight values, intercept, etc.)
on the server side user terminal.
It is mainly used for debugging purpose.
.PP
For example,
.IP
.nf
\f[C]
sgd_clf.debug_print() 
\f[R]
.fi
.PP
Output:
.IP
.nf
\f[C]
-------- Weight Vector:: --------
14072.2 22454.1 83330.6 45451.2 139.907 -12.3658 -191.893 -82.7364 265.627 109.118 
46.0452 1510.72 -250.729 -38123.1 9.74564 -4.16035 -16.0092 0.837207 26.3526 3.59399 
14821.1 29161.9 85356 -57710.4 183.668 -99.8164 -348.61 -70.554 386.649 113.928
Intercept:: 1845.32
Threshold:: 0
\f[R]
.fi
.PP
This output will be visible on server side.
It displays the weights, intercept and threshold values on the trained
model which is currently present on the server.
.PP
\f[B]No such output will be visible on client side.\f[R]
.PP
\f[B]Return Value\f[R]
.PD 0
.P
.PD
It returns nothing.
.SS 11. release()
.PP
\f[B]Purpose\f[R]
.PD 0
.P
.PD
It can be used to release the in-memory model at frovedis server.
.PP
For example,
.IP
.nf
\f[C]
sgd_clf.release()
\f[R]
.fi
.PP
This will reset the after-fit populated attributes to None, along with
releasing server side memory.
.PP
\f[B]Return Value\f[R]
.PD 0
.P
.PD
It returns nothing.
.SS 12. is_fitted()
.PP
\f[B]Purpose\f[R]
.PD 0
.P
.PD
It can be used to confirm if the model is already fitted or not.
In case, predict() is used before training the model, then it can prompt
the user to train the model first.
.PP
\f[B]Return Value\f[R]
.PD 0
.P
.PD
It returns `True', if the model is already fitted otherwise, it returns
`False'.
.SH SEE ALSO
.IP \[bu] 2
\f[B]Introduction to FrovedisRowmajorMatrix\f[R]
.PD 0
.P
.PD
.IP \[bu] 2
\f[B]Introduction to FrovedisColmajorMatrix\f[R]
.PD 0
.P
.PD
.IP \[bu] 2
\f[B]Introduction to FrovedisCRSMatrix\f[R]
.PD 0
.P
.PD
.IP \[bu] 2
\f[B]Introduction to FrovedisDvector\f[R]
.PD 0
.P
.PD
.IP \[bu] 2
\f[B]SGDRegressor in Frovedis\f[R]
