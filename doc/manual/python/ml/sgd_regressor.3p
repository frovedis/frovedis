.\" Automatically generated by Pandoc 2.17.1.1
.\"
.\" Define V font for inline verbatim, using C font in formats
.\" that render this, and otherwise B font.
.ie "\f[CB]x\f[]"x" \{\
. ftr V B
. ftr VI BI
. ftr VB B
. ftr VBI BI
.\}
.el \{\
. ftr V CR
. ftr VI CI
. ftr VB CB
. ftr VBI CBI
.\}
.TH "SGDRegressor" "" "" "" ""
.hy
.SH NAME
.PP
SGDRegressor - A regression algorithm used to predict the labels with
various loss functions.
This estimator implements regularized linear models with stochastic
gradient descent (SGD) learning.
.SH SYNOPSIS
.IP
.nf
\f[C]
class frovedis.mllib.linear_model.SGDRegressor(loss=\[aq]squared_loss\[aq], penalty=\[aq]l2\[aq], alpha=0.0001,  
                                               l1_ratio=0.15, fit_intercept=True,  
                                               max_iter=1000, tol=1e-3,  
                                               shuffle=True, verbose=0,  
                                               epsilon=0.1, random_state=None,  
                                               learning_rate=\[dq]invscaling\[dq],  
                                               eta0=0.001, power_t=0.25,  
                                               early_stopping=False,  
                                               validation_fraction=0.1,  
                                               n_iter_no_change=5,
                                               warm_start=False,  
                                               average=False)  
                                                
\f[R]
.fi
.SS Public Member Functions
.PP
fit(X, y, coef_init = None, intercept_init = None, sample_weight = None)
.PD 0
.P
.PD
predict(X)
.PD 0
.P
.PD
score(X, y, sample_weight = None)
.PD 0
.P
.PD
load(fname, dtype = None)
.PD 0
.P
.PD
save(fname)
.PD 0
.P
.PD
get_params(deep = True)
.PD 0
.P
.PD
set_params(**params)
.PD 0
.P
.PD
debug_print()
.PD 0
.P
.PD
release()
.PD 0
.P
.PD
is_fitted()
.SH DESCRIPTION
.PP
Stochastic Gradient Descent (SGD) is used for discriminative learning of
linear regressors under convex loss functions such as SVM and Logistic
regression.
It has been successfully applied to large-scale datasets because the
update to the coefficients is performed for each training instance,
rather than at the end of instances.
.PP
Stochastic Gradient Descent (SGD) regressor basically implements a plain
SGD learning routine supporting various loss functions and penalties for
regression.
.PP
It implements regularized linear models with stochastic gradient descent
(SGD) learning: the gradient of the loss is estimated each sample at a
time and the model is updated along the way with a decreasing strength
schedule.
It is a linear method which uses the following loss functions:
.PD 0
.P
.PD
\f[B]1) squared_loss\f[R]
.PD 0
.P
.PD
\f[B]2) epsilon_insensitive\f[R]
.PD 0
.P
.PD
\f[B]3) squared_epsilon_insensitive\f[R]
.PP
\f[B]It supports ZERO, L1 and L2 regularization to address the overfit
problem.\f[R]
.PP
This module provides a client-server implementation, where the client
application is a normal python program.
The frovedis interface is almost same as Scikit-learn SGDRegressor
(Stochastic Gradient Descent Regression) interface, but it doesn\[cq]t
have any dependency with Scikit-learn.
It can be used simply even if the system doesn\[cq]t have Scikit-learn
installed.
Thus in this implementation, a python client can interact with a
frovedis server sending the required python data for training at
frovedis side.
Python data is converted into frovedis compatible data internally and
the python ML call is linked with the respective frovedis ML call to get
the job done at frovedis server.
.PP
Python side calls for SGDRegressor on the frovedis server.
Once the training is completed with the input data at the frovedis
server, it returns an abstract model with a unique model ID to the
client python program.
.PP
When prediction-like request would be made on the trained model, python
program will send the same request to the frovedis server.
After the request is served at the frovedis server, the output would be
sent back to the python client.
.SS Detailed Description
.SS 1. SGDRegressor()
.PP
\f[B]Parameters\f[R]
.PD 0
.P
.PD
\f[I]\f[BI]loss\f[I]\f[R]: A string object parameter containing the loss
function type to use.
Currently, frovedis supports `squared_loss',
`epsilon_insensitive\[cq]and \[cq]squared_epsilon_insensitive'
functions.
(Default: `squared_loss')
.PD 0
.P
.PD
\f[I]\f[BI]penalty\f[I]\f[R]: A string object parameter containing the
regularizer type to use.
Currently none, l1 and l2 are supported by Frovedis.
(Default: `l2')
.PD 0
.P
.PD
If it is None (not specified explicitly), it will be set as `ZERO'
regularization type.
.PD 0
.P
.PD
\f[I]\f[BI]alpha\f[I]\f[R]: Zero or a positive double (float64)
smoothing parameter.
(Default: 0.0001)
.PD 0
.P
.PD
\f[I]\f[BI]l1_ratio\f[I]\f[R]: An unused parameter.
(Default: 0.15)
.PD 0
.P
.PD
\f[I]\f[BI]fit_intercept\f[I]\f[R]: A boolean parameter specifying
whether a constant (intercept) should be added to the decision function.
(Default: True)
.PD 0
.P
.PD
\f[I]\f[BI]max_iter\f[I]\f[R]: A positive integer parameter specifying
maximum iteration count.
(Default: 1000)
.PD 0
.P
.PD
\f[I]\f[BI]tol\f[I]\f[R]: A double (float64) parameter specifying the
convergence tolerance value.
It must be zero or a positive value.
(Default: 1e-3)
.PD 0
.P
.PD
\f[I]\f[BI]shuffle\f[I]\f[R]: An unused parameter.
(Default: True)
.PD 0
.P
.PD
\f[I]\f[BI]verbose\f[I]\f[R]: An integer parameter specifying the log
level to use.
Its value is set as 0 by default (for INFO mode).
But it can be set to 1 (for DEBUG mode) or 2 (for TRACE mode) for
getting training time logs from frovedis server.
.PD 0
.P
.PD
\f[I]\f[BI]epsilon\f[I]\f[R]: A zero or positive double (float64)
parameter used in the epsilon-insensitive loss function.
(Default: 0.1)
.PD 0
.P
.PD
\f[I]\f[BI]random_state\f[I]\f[R]: An unused parameter.
(Default: None)
.PD 0
.P
.PD
\f[I]\f[BI]learning_rate\f[I]\f[R]: A string object parameter containing
the learning rate.
(Default: `invscaling')
.PD 0
.P
.PD
Unlike sklearn, Frovedis only supports `invscaling' learning rate.
`invscaling' gradually decreases the learning rate
\f[B]`learning_rate_'\f[R] at each time step \f[B]`t'\f[R] using an
inverse scaling exponent of \f[B]`power_t'\f[R].
.PD 0
.P
.PD
\f[B]learning_rate_ = eta0 / pow(t, power_t)\f[R]
.PD 0
.P
.PD
\f[I]\f[BI]eta0\f[I]\f[R]: A double (float64) parameter specifying the
initial learning rate for the `invscaling' and `optimal' schedules.
(Default: 0.001)
.PD 0
.P
.PD
\f[I]\f[BI]power_t\f[I]\f[R]: An unused parameter which specifies the
exponent for inverse scaling learning rate.
Although, this parameter is unused in frovedis but it must be of double
(float64) type.
This is simply done to keep the behavior consistent with Scikit-learn.
(Default: 0.25)
.PD 0
.P
.PD
\f[I]\f[BI]early_stopping\f[I]\f[R]: An unused parameter.
(Default: False)
.PD 0
.P
.PD
\f[I]\f[BI]validation_fraction\f[I]\f[R]: An unused parameter.
(Default: 0.1)
.PD 0
.P
.PD
\f[I]\f[BI]n_iter_no_change\f[I]\f[R]: An unused parameter.
(Default: 5)
.PD 0
.P
.PD
\f[I]\f[BI]warm_start\f[I]\f[R]: A boolean parameter which when set to
True, reuses the solution of the previous call to fit as initialization,
otherwise, just erase the previous solution.
(Default: False)
.PD 0
.P
.PD
\f[I]\f[BI]average\f[I]\f[R]: An unused parameter.
(Default: False)
.PP
\f[B]Attributes\f[R]
.PD 0
.P
.PD
\f[I]\f[BI]coef_\f[I]\f[R]: It is a python ndarray (containing float or
double (float64) typed values depending on data-type of input matrix
(X)).
It is the weights assigned to the features.
It is of shape \f[B](n_features,)\f[R].
.PD 0
.P
.PD
\f[I]\f[BI]intercept_\f[I]\f[R]: It is a python ndarray (float or double
(float64) values depending on input matrix data type) and has shape
\f[B](1,)\f[R].
It specifies the constants in decision function.
.PD 0
.P
.PD
_\f[B]n_iter\f[R]_: An integer value used to get the actual iteration
point at which the problem is converged.
.PP
\f[B]Purpose\f[R]
.PD 0
.P
.PD
It initializes a SGDRegressor object with the given parameters.
.PP
The parameters: \[lq]l1_ratio\[rq], \[lq]shuffle\[rq],
\[lq]random_state\[rq], \[lq]early_stopping\[rq],
\[lq]validation_fraction\[rq], \[lq]n_iter_no_change\[rq] and
\[lq]average\[rq] are simply kept to make the interface uniform to
Scikit-learn SGDRegressor module.
They are not used anywhere within frovedis implementation.
.PP
\f[B]Return Value\f[R]
.PD 0
.P
.PD
It simply returns \[lq]self\[rq] reference.
.SS 2. fit(X, y, coef_init = None, intercept_init = None, sample_weight = None)
.PP
\f[B]Parameters\f[R]
.PD 0
.P
.PD
\f[I]\f[BI]X\f[I]\f[R]: A numpy dense or scipy sparse matrix or any
python ndarray or an instance of FrovedisCRSMatrix for sparse data and
FrovedisColmajorMatrix for dense data.
It has shape \f[B](n_samples, n_features)\f[R].
.PD 0
.P
.PD
\f[I]\f[BI]y\f[I]\f[R]: Any python ndarray or an instance of
FrovedisDvector containing the target values.
It has shape \f[B](n_samples,)\f[R].
.PD 0
.P
.PD
\f[I]\f[BI]coef_init\f[I]\f[R]: An unused parameter that specifies the
initial coefficients to warm-start the optimization.
(Default: None)
.PD 0
.P
.PD
\f[I]\f[BI]intercept_init\f[I]\f[R]: An unused parameter that specifies
the initial intercept to warm-start the optimization.
(Default: None)
.PD 0
.P
.PD
\f[I]\f[BI]sample_weight\f[I]\f[R]: A python ndarray containing the
intended weights for each input samples and it should be the shape of
\f[B](n_samples,)\f[R].
(Default: None)
.PD 0
.P
.PD
When it is None (not specified explicitly), an uniform weight vector is
assigned on each input sample.
.PP
\f[B]Purpose\f[R]
.PD 0
.P
.PD
It accepts the training feature matrix (X) and corresponding target
values (y) as inputs from the user and trains a SGDRegressor model with
specified regularization with those data at frovedis server.
.PP
For example,
.IP
.nf
\f[C]
# loading a sample matrix and labels data
from sklearn.datasets import load_diabetes
mat, lbl = load_diabetes(return_X_y = True)

# fitting input matrix and label on SGDRegressor object
from frovedis.mllib.linear_model import SGDRegressor
sgd_reg = SGDRegressor(max_iter = 50000000, loss = \[dq]squared_epsilon_insensitive\[dq],
                       penalty = \[aq]none\[aq], tol = 0.0000001).fit(mat, lbl)
\f[R]
.fi
.PP
When native python data is provided, it is converted to frovedis-like
inputs and sent to frovedis server which consumes some data transfer
time.
Pre-constructed frovedis-like inputs can be used to speed up the
training time, especially when same data would be used for multiple
executions.
.PP
For example,
.IP
.nf
\f[C]
# loading a sample matrix and labels data
from sklearn.datasets import load_diabetes
mat, lbl = load_diabetes(return_X_y = True)

# Since \[dq]mat\[dq] is numpy dense data, we have created FrovedisColmajorMatrix.
and for scipy sparse data, FrovedisCRSMatrix should be used. 
from frovedis.matrix.dense import FrovedisColmajorMatrix
from frovedis.matrix.dvector import FrovedisDvector
cmat = FrovedisColmajorMatrix(mat)
dlbl = FrovedisDvector(lbl)

# SGDRegressor with pre-constructed frovedis-like inputs
from frovedis.mllib.linear_model import SGDRegressor
sgd_reg = SGDRegressor(max_iter = 50000000, loss = \[dq]squared_epsilon_insensitive\[dq],
                       penalty = \[aq]none\[aq], tol = 0.0000001).fit(cmat,dlbl)
                       
\f[R]
.fi
.PP
\f[B]Return Value\f[R]
.PD 0
.P
.PD
It simply returns \[lq]self\[rq] reference.
.SS 3. predict(X)
.PP
\f[B]Parameters\f[R]
.PD 0
.P
.PD
\f[I]\f[BI]X\f[I]\f[R]: A numpy dense or scipy sparse matrix or any
python array-like object or an instance of FrovedisCRSMatrix for sparse
data and FrovedisRowmajorMatrix for dense data.
It has shape \f[B](n_samples, n_features)\f[R].
.PP
\f[B]Purpose\f[R]
.PD 0
.P
.PD
It accepts the test feature matrix (X) in order to make prediction on
the trained model at frovedis server.
.PP
For example,
.IP
.nf
\f[C]
sgd_reg.predict(mat)  
\f[R]
.fi
.PP
Output:
.IP
.nf
\f[C]
[187.30000503 79.39151311 168.59790769 155.75933185 129.99656706
 89.71373962 96.12127367 152.37303585 163.56868847 181.57865709
 .....
 .....
 123.18827921 64.13627628 185.64720615 136.37181437 139.34641795
 185.9899156 72.21133803]
\f[R]
.fi
.PP
Like in fit(), frovedis-like input can be used to speed-up the
prediction making on the trained model at server side.
.PP
For example,
.IP
.nf
\f[C]
# Since \[dq]cmat\[dq] is FrovedisColmajorMatrix, we have created FrovedisRowmajorMatrix.
# predicting on SGDRegressor using frovedis-like input 
sgd_reg.predict(cmat.to_frovedis_rowmatrix())
\f[R]
.fi
.PP
Output
.IP
.nf
\f[C]
[187.30000503 79.39151311 168.59790769 155.75933185 129.99656706
 89.71373962 96.12127367 152.37303585 163.56868847 181.57865709
 .....
 .....
 123.18827921 64.13627628 185.64720615 136.37181437 139.34641795
 185.9899156 72.21133803]
 
\f[R]
.fi
.PP
\f[B]Return Value\f[R]
.PD 0
.P
.PD
It returns a numpy array of double (float64) type containing the
predicted values.
It is of shape \f[B](n_samples,)\f[R].
.SS 4. score(X, y, sample_weight = None)
.PP
\f[B]Parameters\f[R]
.PD 0
.P
.PD
\f[B]X\f[R]: A numpy dense or scipy sparse matrix or any python ndarray
or an instance of FrovedisCRSMatrix for sparse data and
FrovedisRowmajorMatrix for dense data.
It has shape \f[B](n_samples, n_features)\f[R].
.PD 0
.P
.PD
\f[I]\f[BI]y\f[I]\f[R]: Any python ndarray containing the target values.
It has shape \f[B](n_samples,)\f[R].
.PD 0
.P
.PD
\f[B]sample_weight\f[R]: A python ndarray containing the intended
weights for each input samples and it should be the shape of
\f[B](n_samples,)\f[R].
(Default: None)
.PD 0
.P
.PD
When it is None (not specified explicitly), an uniform weight vector is
assigned on each input sample.
.PP
\f[B]Purpose\f[R]
.PD 0
.P
.PD
Calculate the root mean square value on the given test data and labels
i.e.\ R2(r-squared) of self.predict(X) wrt.
y.
.PP
The coefficient `R2' is defined as (1 - (u/v)),
.PD 0
.P
.PD
where `u' is the residual sum of squares ((y_true - y_pred) ** 2).sum()
and
.PD 0
.P
.PD
`v' is the total sum of squares ((y_true - y_true.mean()) ** 2).sum().
.PP
The best possible score is 1.0 and it can be negative (because the model
can be arbitrarily worse).
A constant model that always predicts the expected value of y,
disregarding the input features, would get a R2 score of 0.0.
.PP
For example,
.IP
.nf
\f[C]
# calculate R2 score on given test data and labels
sgd_reg.score(mat, lbl)
 
\f[R]
.fi
.PP
Output
.IP
.nf
\f[C]
0.52  
\f[R]
.fi
.PP
\f[B]Return Value\f[R]
.PD 0
.P
.PD
It returns an R2 score of double (float64) type.
.SS 5. load(fname, dtype = None)
.PP
\f[B]Parameters\f[R]
.PD 0
.P
.PD
\f[B]fname\f[R]: A string object containing the name of the file having
model information to be loaded.
.PD 0
.P
.PD
\f[B]dtype\f[R]: A data-type is inferred from the input data.
Currently, expected input data-type is either float or double (float64).
(Default: None)
.PP
\f[B]Purpose\f[R]
.PD 0
.P
.PD
It loads the model from the specified file(having little-endian binary
data).
.PP
For example,
.IP
.nf
\f[C]
# loading the SGDRegressor model
sgd_reg.load(\[dq]./out/SGDRegressorModel\[dq])
\f[R]
.fi
.PP
\f[B]Return Value\f[R]
.PD 0
.P
.PD
It simply returns \[lq]self\[rq] reference.
.SS 6. save(fname)
.PP
\f[B]Parameters\f[R]
.PD 0
.P
.PD
\f[B]fname\f[R]: A string object containing the name of the file on
which the target model is to be saved.
.PP
\f[B]Purpose\f[R]
.PD 0
.P
.PD
On success, it writes the model information (metadata and model) in the
specified file as little-endian binary data.
Otherwise, it throws an exception.
.PP
For example,
.IP
.nf
\f[C]
# saving the model
sgd_reg.save(\[dq]./out/SGDRegressorModel\[dq])
\f[R]
.fi
.PP
The \f[B]SGDRegressorModel\f[R] contains below directory structure:
.PP
\f[B]SGDRegressorModel\f[R]
.PD 0
.P
.PD
|\[em]\[em]metadata
.PD 0
.P
.PD
|\[em]\[em]model
.PP
`metadata' represents the detail about loss function, model_kind and
datatype of training vector.
.PD 0
.P
.PD
The `model' file contains the SGDRegressor model saved in binary format.
.PP
This will save the SGDRegressor model on the path
`/out/SGDRegressorModel'.
It would raise exception if the directory already exists with same name.
.PP
\f[B]Return Value\f[R]
.PD 0
.P
.PD
It returns nothing.
.SS 7. get_params(deep = True)
.PP
\f[B]Parameters\f[R]
.PD 0
.P
.PD
\f[I]\f[BI]deep\f[I]\f[R]: A boolean parameter, used to get parameters
and their values for an estimator.
If True, will return the parameters for an estimator and contained
subobjects that are estimators.
(Default: True)
.PP
\f[B]Purpose\f[R]
.PD 0
.P
.PD
This method belongs to the BaseEstimator class inherited by
SGDRegressor.
It is used to get parameters and their values of SGDRegressor class.
.PP
For example,
.IP
.nf
\f[C]
print(sgd_reg.get_params())
\f[R]
.fi
.PP
Output
.IP
.nf
\f[C]
{\[aq]alpha\[aq]: 0.0001, \[aq]average\[aq]: False, \[aq]early_stopping\[aq]: False, \[aq]epsilon\[aq]: 0.1, 
\[aq]eta0\[aq]: 0.001, \[aq]fit_intercept\[aq]: True, \[aq]l1_ratio\[aq]: 0.15, \[aq]learning_rate\[aq]: \[aq]invscaling\[aq], 
\[aq]loss\[aq]: \[aq]squared_loss\[aq], \[aq]max_iter\[aq]: 1000, \[aq]n_iter_no_change\[aq]: 5, \[aq]penalty\[aq]: \[aq]l2\[aq], 
\[aq]power_t\[aq]: 0.25, \[aq]random_state\[aq]: None, \[aq]shuffle\[aq]: True, \[aq]tol\[aq]: 0.001, 
\[aq]validation_fraction\[aq]: 0.1, \[aq]verbose\[aq]: 0, \[aq]warm_start\[aq]: False}
\f[R]
.fi
.PP
\f[B]Return Value\f[R]
.PD 0
.P
.PD
A dictionary of parameter names mapped to their values.
.SS 8. set_params(**params)
.PP
\f[B]Parameters\f[R]
.PD 0
.P
.PD
\f[I]\f[BI]**params\f[I]\f[R]: All the keyword arguments are passed this
function as dictionary.
This dictionary contains parameters of an estimator with its given
values to set.
.PP
\f[B]Purpose\f[R]
.PD 0
.P
.PD
This method belongs to the BaseEstimator class inherited by
SGDRegressor, used to set parameter values.
.PP
For example,
.IP
.nf
\f[C]
print(\[dq]get parameters before setting:\[dq])
print(sgd_reg.get_params())
# User just needs to provide the arguments and internally it will create a 
dictionary over the arguments given by user
sgd_reg.set_params(penalty = \[aq]l1\[aq], fit_intercept = False)
print(\[dq]get parameters before setting:\[dq])
print(sgd_reg.get_params()) 
\f[R]
.fi
.PP
Output
.IP
.nf
\f[C]
get parameters before setting: 
{\[aq]alpha\[aq]: 0.0001, \[aq]average\[aq]: False, \[aq]early_stopping\[aq]: False, \[aq]epsilon\[aq]: 0.1, 
\[aq]eta0\[aq]: 0.001, \[aq]fit_intercept\[aq]: True, \[aq]l1_ratio\[aq]: 0.15, \[aq]learning_rate\[aq]: \[aq]invscaling\[aq], 
\[aq]loss\[aq]: \[aq]squared_loss\[aq], \[aq]max_iter\[aq]: 1000, \[aq]n_iter_no_change\[aq]: 5, \[aq]penalty\[aq]: \[aq]l2\[aq], 
\[aq]power_t\[aq]: 0.25, \[aq]random_state\[aq]: None, \[aq]shuffle\[aq]: True, \[aq]tol\[aq]: 0.001, 
\[aq]validation_fraction\[aq]: 0.1, \[aq]verbose\[aq]: 0, \[aq]warm_start\[aq]: False}
get parameters before setting: 
{\[aq]alpha\[aq]: 0.0001, \[aq]average\[aq]: False, \[aq]early_stopping\[aq]: False, \[aq]epsilon\[aq]: 0.1, 
\[aq]eta0\[aq]: 0.001, \[aq]fit_intercept\[aq]: False, \[aq]l1_ratio\[aq]: 0.15, \[aq]learning_rate\[aq]: \[aq]invscaling\[aq], 
\[aq]loss\[aq]: \[aq]squared_loss\[aq], \[aq]max_iter\[aq]: 1000, \[aq]n_iter_no_change\[aq]: 5, \[aq]penalty\[aq]: \[aq]l1\[aq], 
\[aq]power_t\[aq]: 0.25, \[aq]random_state\[aq]: None, \[aq]shuffle\[aq]: True, \[aq]tol\[aq]: 0.001, 
\[aq]validation_fraction\[aq]: 0.1, \[aq]verbose\[aq]: 0, \[aq]warm_start\[aq]: False}
\f[R]
.fi
.PP
\f[B]Return Value\f[R]
.PD 0
.P
.PD
It simply returns \[lq]self\[rq] reference.
.SS 9. debug_print()
.PP
\f[B]Purpose\f[R]
.PD 0
.P
.PD
It shows the target model information (weight values, intercept, etc.)
on the server side user terminal.
It is mainly used for debugging purpose.
.PP
For example,
.IP
.nf
\f[C]
sgd_reg.debug_print() 
\f[R]
.fi
.PP
Output:
.IP
.nf
\f[C]
-------- Weight Vector:: --------
-8.26881e+10 -1.23538e+11 -1.81876e+11 -9.355e+08 -8.27686e+09 -8.80985e+10 -1.0433e+12 
-4.84075e+10 -1.69485e+11 -6.51606e+12 -2.66758e+11 -4.63121e+12 -2.0491e+11
Intercept:: -1.42647e+10
\f[R]
.fi
.PP
This output will be visible on server side.
It displays the weights and intercept values on the trained model which
is currently present on the server.
.PP
\f[B]No such output will be visible on client side.\f[R]
.PP
\f[B]Return Value\f[R]
.PD 0
.P
.PD
It returns nothing.
.SS 10. release()
.PP
\f[B]Purpose\f[R]
.PD 0
.P
.PD
It can be used to release the in-memory model at frovedis server.
.PP
For example,
.IP
.nf
\f[C]
sgd_reg.release()
\f[R]
.fi
.PP
This will reset the after-fit populated attributes (like coef_,
intercept_, n_iter_) to None, along with releasing server side memory.
.PP
\f[B]Return Value\f[R]
.PD 0
.P
.PD
It returns nothing.
.SS 11. is_fitted()
.PP
\f[B]Purpose\f[R]
.PD 0
.P
.PD
It can be used to confirm if the model is already fitted or not.
In case, predict() is used before training the model, then it can prompt
the user to train the model first.
.PP
\f[B]Return Value\f[R]
.PD 0
.P
.PD
It returns `True', if the model is already fitted otherwise, it returns
`False'.
.SH SEE ALSO
.IP \[bu] 2
\f[B]Introduction to FrovedisRowmajorMatrix\f[R]
.PD 0
.P
.PD
.IP \[bu] 2
\f[B]Introduction to FrovedisColmajorMatrix\f[R]
.PD 0
.P
.PD
.IP \[bu] 2
\f[B]Introduction to FrovedisCRSMatrix\f[R]
.PD 0
.P
.PD
.IP \[bu] 2
\f[B]Introduction to FrovedisDvector\f[R]
.PD 0
.P
.PD
.IP \[bu] 2
\f[B]SGDRegressor in Frovedis\f[R]
