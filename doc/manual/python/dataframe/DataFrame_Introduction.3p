.TH "DataFrame" "" "" "" ""
.SH NAME
.PP
DataFrame \- here refers to a Frovedis dataframe.
It is a two\-dimensional, size\-mutable, potentially heterogeneous
tabular data structure.
.SS SYNOPSIS
.IP
.nf
\f[C]
frovedis.dataframe.df.DataFrame(df=None,\ is_series=False)\ \ 
\f[]
.fi
.SS DESCRIPTION
.PP
Dataframe is a two\-dimensional data structure, i.e., data is aligned in
a tabular fashion in rows and columns.
This data structure also contains labeled axes (rows and columns).
Arithmetic operations align on both row and column labels.
It can be thought of as a dict\-like container for Series objects or it
can be thought of as an SQL table or a spreadsheet data representation.
.PP
Features of DataFrame:
.PD 0
.P
.PD
\- Columns can be of different types.
.PD 0
.P
.PD
\- DataFrame is mutable i.e.
the number of rows and columns can be increased or decreased.
.PD 0
.P
.PD
\- DataFrame supports indexing and labeled columns name.
.PD 0
.P
.PD
\- Supports arithmetic operations on rows and columns.
.SS Detailed description
.SS 1. DataFrame(df = None, is_series = False)
.PP
\f[B]Parameters\f[]
.PD 0
.P
.PD
\f[B]\f[I]df\f[]\f[]: A pandas dataframe object.
(Default: None)
.PD 0
.P
.PD
When this parameter is not None (specified explicitly), it will load the
pandas dataframe to perform conversion into frovedis dataframe.
.PP
\f[B]\f[I]is_series\f[]\f[]: It is a boolean parameter which when set to
true indicates that the dataframe consists of single column (Default:
False).
.PP
\f[B]Purpose\f[]
.PD 0
.P
.PD
It is used to create a Frovedis dataframe from the given pandas
dataframe.
.PP
\f[I]For example\f[]:
.IP
.nf
\f[C]
#\ a\ pandas\ dictionary\ having\ key\ and\ values\ pairs
peopleDF\ =\ {
\ \ \ \ \ \ \ \ \[aq]Ename\[aq]\ :\ [\[aq]Michael\[aq],\ \[aq]Andy\[aq],\ \[aq]Tanaka\[aq],\ \[aq]Raul\[aq],\ \[aq]Yuta\[aq]],\ 
\ \ \ \ \ \ \ \ \[aq]Age\[aq]\ :\ [29,\ 30,\ 27,\ 19,\ 31],
\ \ \ \ \ \ \ \ \[aq]Country\[aq]\ :\ [\[aq]USA\[aq],\ \[aq]England\[aq],\ \[aq]Japan\[aq],\ \[aq]France\[aq],\ \[aq]Japan\[aq]],
\ \ \ \ \ \ \ \ \[aq]isMale\[aq]:\ [False,\ False,\ False,\ False,\ True]
\ \ \ \ \ \ \ }

pdf1\ =\ pd.DataFrame(peopleDF)\ #\ a\ pandas\ dataframe\ from\ key\ value\ pair

#\ creating\ frovedis\ dataframe
fdf1\ =\ fd.DataFrame(pdf1)\ #change\ to\ frovedis\ dataframe
\ \ \ \ 
#\ display\ created\ frovedis\ dataframes
fdf1.show()\ 
\f[]
.fi
.PP
\f[I]Output\f[]:
.IP
.nf
\f[C]
index\ \ \ Age\ \ \ \ \ Country\ Ename\ \ \ isMale\ \ 
0\ \ \ \ \ \ \ 29\ \ \ \ \ \ USA\ \ \ \ \ Michael\ 0\ \ 
1\ \ \ \ \ \ \ 30\ \ \ \ \ \ England\ Andy\ \ \ \ 0\ \ 
2\ \ \ \ \ \ \ 27\ \ \ \ \ \ Japan\ \ \ Tanaka\ \ 0\ \ 
3\ \ \ \ \ \ \ 19\ \ \ \ \ \ France\ \ Raul\ \ \ \ 0\ \ 
4\ \ \ \ \ \ \ 31\ \ \ \ \ \ Japan\ \ \ Yuta\ \ \ \ 1\ \ 
\f[]
.fi
.PP
\f[B]Return Value\f[]
.PD 0
.P
.PD
It returns a reference to self.
.PP
\f[B]Attributes\f[]
.PP
\f[B]\f[I]columns\f[]\f[]: Returns a list of string having the column
labels of the Frovedis dataframe in form of a list having columns names
.PP
\f[I]For example\f[]:
.IP
.nf
\f[C]
#\ fdf1\ is\ same\ from\ above\ example
print(fdf1.columns)
\f[]
.fi
.PP
\f[I]Output\f[]:
.IP
.nf
\f[C]
[\[aq]Age\[aq],\ \[aq]Country\[aq],\ \[aq]Ename\[aq],\ \[aq]isMale\[aq]]
\f[]
.fi
.PP
\f[B]\f[I]count\f[]\f[]: Returns an integer value having the number of
rows in the input DataFrame
.PP
\f[I]For example\f[]:
.IP
.nf
\f[C]
#\ fdf1\ is\ same\ from\ above\ example
print(fdf1.count)\ \ 
\f[]
.fi
.PP
\f[I]Output\f[]:
.IP
.nf
\f[C]
5\ \ 
\f[]
.fi
.PP
\f[B]\f[I]dtypes\f[]\f[]: Returns the dtypes in the DataFrame
.PD 0
.P
.PD
The dtype attribute returns a Series object with the data type of each
column.
.PP
\f[I]For example\f[]:
.IP
.nf
\f[C]
#\ fdf1\ is\ same\ from\ above\ example
print(fdf1.dtypes)\ \ 
\f[]
.fi
.PP
\f[I]Output\f[]:
.IP
.nf
\f[C]
Age\ \ \ \ \ \ \ \ \ int64
Country\ \ \ \ object
Ename\ \ \ \ \ \ object
isMale\ \ \ \ \ \ \ bool
dtype:\ object\ \ \ 
\f[]
.fi
.PP
\f[B]\f[I]ndim\f[]\f[]: Returns an integer representing the number of
axes / array dimensions
.PP
\f[I]For example\f[]:
.IP
.nf
\f[C]
#\ fdf1\ is\ same\ from\ above\ example
print(fdf1.ndim)\ \ 
\f[]
.fi
.PP
\f[I]Output\f[]:
.IP
.nf
\f[C]
2\ \ 
\f[]
.fi
.PP
\f[B]\f[I]shape\f[]\f[]: Returns a tuple representing the dimensions of
the DataFrame in form: \f[B](nrows, ncols)\f[]
.PP
\f[I]For example\f[]:
.IP
.nf
\f[C]
#\ fdf1\ is\ same\ from\ above\ example
print(fdf1.shape)\ \ 
\f[]
.fi
.PP
\f[I]Output\f[]:
.IP
.nf
\f[C]
(5,\ 4)\ \ 
\f[]
.fi
.PP
\f[B]\f[I]values\f[]\f[]: Returns a numpy representation of the
DataFrame
.PP
\f[I]For example\f[]:
.IP
.nf
\f[C]
#\ fdf1\ is\ same\ from\ above\ example\ 
print(fdf1.values)\ \ 
\f[]
.fi
.PP
\f[I]Output\f[]:
.IP
.nf
\f[C]
[[\[aq]Michael\[aq]\ \[aq]29\[aq]\ \[aq]USA\[aq]\ \[aq]0\[aq]]
[\[aq]Andy\[aq]\ \[aq]30\[aq]\ \[aq]England\[aq]\ \[aq]0\[aq]]
[\[aq]Tanaka\[aq]\ \[aq]27\[aq]\ \[aq]Japan\[aq]\ \[aq]0\[aq]]
[\[aq]Raul\[aq]\ \[aq]19\[aq]\ \[aq]France\[aq]\ \[aq]0\[aq]]
[\[aq]Yuta\[aq]\ \[aq]31\[aq]\ \[aq]Japan\[aq]\ \[aq]1\[aq]]]\ \ \ 
\f[]
.fi
.SS 2. release()
.PP
\f[B]Purpose\f[]
.PD 0
.P
.PD
This method acts like a destructor.
.PD 0
.P
.PD
It is used to release dataframe pointer from server heap and it resets
all its attributes to None.
.PP
\f[I]For example\f[]:
.IP
.nf
\f[C]
#\ fdf1\ is\ same\ from\ above\ example\ 
#\ releasing\ dataframe\ pointers
fdf1.release()
\f[]
.fi
.PP
\f[I]Output\f[]:
.PD 0
.P
.PD
None
.PP
\f[B]Return Value\f[]
.PD 0
.P
.PD
None
.SS Public Member Functions of DataFrame
.PP
DataFrame provides a lot of utilities to perform various operations.
For simplicity we have categorized them into three lists:
\f[B]\f[I]Basic functions\f[]\f[], \f[B]\f[I]aggregate functions\f[]\f[]
and \f[B]\f[I]binary operator functions\f[]\f[].
.SS a) List of Basic Functions
.PP
\f[B]Basic functions\f[] are further categorized into two sub parts \-
\f[B]\f[I]conversion and sorting functions\f[]\f[] and
\f[B]\f[I]selection and combination functions\f[]\f[].
In the basic functions, we will discuss the common and essential
functionalities of dataframe like conversion of dataframes, sorting of
data, selection of specified data and combining two or more data.
.SS Conversion and Sorting Functions:
.PP
Conversion and sorting functions are essential part of DataFrame which
are basically used to perform conversions to other types and to narrow
down the data as per specification.
.IP " 1." 4
\f[B]asDF()\f[] \- Returns a Frovedis DataFrame after suitable
conversion from other DataFrame types.
.PD 0
.P
.PD
.IP " 2." 4
\f[B]astype()\f[] \- Cast a selected column to a specified dtype.
.PD 0
.P
.PD
.IP " 3." 4
\f[B]copy()\f[] \- Make a copy of this object\[aq]s indices and data.
.PD 0
.P
.PD
.IP " 4." 4
\f[B]dropna()\f[] \- Remove missing values.
.PD 0
.P
.PD
.IP " 5." 4
\f[B]fillna()\f[] \- Fill NA/NaN values using specified values.
.PD 0
.P
.PD
.IP " 6." 4
\f[B]isna()\f[] \- Detect missing values.
.PD 0
.P
.PD
.IP " 7." 4
\f[B]isnull()\f[] \- Is an alias of isna().
.PD 0
.P
.PD
.IP " 8." 4
\f[B]nlargest()\f[] \- Return the first n rows ordered by columns in
descending order.
.PD 0
.P
.PD
.IP " 9." 4
\f[B]nsmallest()\f[] \- Return the first n rows ordered by columns in
ascending order.
.PD 0
.P
.PD
.IP "10." 4
\f[B]sort_index()\f[] \- Sort dataframes according to index.
.PD 0
.P
.PD
.IP "11." 4
\f[B]sort_values()\f[] \- Sort by the values along either axis.
.PD 0
.P
.PD
.IP "12." 4
\f[B]to_dict()\f[] \- Convert the dataframe to a dictionary.
.PD 0
.P
.PD
.IP "13." 4
\f[B]to_frovedis_colmajor_matrix()\f[] \- Converts a frovedis dataframe
to FrovedisColmajorMatrix.
.PD 0
.P
.PD
.IP "14." 4
\f[B]to_frovedis_crs_matrix()\f[] \- Converts a frovedis dataframe to
FrovedisCRSMatrix.
.PD 0
.P
.PD
.IP "15." 4
\f[B]to_frovedis_crs_matrix_using_info()\f[] \- Converts a frovedis
dataframe to FrovedisCRSMatrix provided an info object of
df_to_sparse_info class.
.PD 0
.P
.PD
.IP "16." 4
\f[B]to_frovedis_rowmajor_matrix()\f[] \- Converts a frovedis dataframe
to FrovedisRowmajorMatrix.
.PD 0
.P
.PD
.IP "17." 4
\f[B]to_numpy()\f[] \- Converts a frovedis dataframe to numpy array.
.PD 0
.P
.PD
.IP "18." 4
\f[B]to_pandas_dataframe()\f[] \- Returns a pandas dataframe object from
frovedis dataframe.
.PP
\f[B]For more details about each of the Conversion and Sorting
functions, refer
.PD 0
.P
.PD
DataFrame_ConversionAndSorting.md\f[]
.SS Selection and Combination Functions:
.PP
DataFrame provides various facilities to easily select and combine
together specified values and support join/merge operations.
.IP " 1." 4
\f[B]add_index()\f[] \- Adds index column to the dataframe in\-place.
.PD 0
.P
.PD
.IP " 2." 4
\f[B]append()\f[] \- Union of dataframes according to rows.
.PD 0
.P
.PD
.IP " 3." 4
\f[B]drop()\f[] \- Drop specified labels from rows or columns.
.PD 0
.P
.PD
.IP " 4." 4
\f[B]drop_cols()\f[] \- Drop specified columns.
.PD 0
.P
.PD
.IP " 5." 4
\f[B]drop_duplicates()\f[] \- Return DataFrame with duplicate rows
removed.
.PD 0
.P
.PD
.IP " 6." 4
\f[B]drop_rows()\f[] \- Drop specified rows.
.PD 0
.P
.PD
.IP " 7." 4
\f[B]filter()\f[] \- Subset the dataframe rows or columns according to
the specified index labels.
.PD 0
.P
.PD
.IP " 8." 4
\f[B]get_index_loc()\f[] \- Returns integer location, slice or boolean
mask for specified value in index column.
.PD 0
.P
.PD
.IP " 9." 4
\f[B]head()\f[] \- Return the first n rows.
.PD 0
.P
.PD
.IP "10." 4
\f[B]insert()\f[] \- Insert column into DataFrame at specified location.
.PD 0
.P
.PD
.IP "11." 4
\f[B]join()\f[] \- Join columns of another DataFrame.
.PD 0
.P
.PD
.IP "12." 4
\f[B]merge()\f[] \- Merge dataframes according to specified parameters.
.PD 0
.P
.PD
.IP "13." 4
\f[B]rename()\f[] \- Used to rename column.
.PD 0
.P
.PD
.IP "14." 4
\f[B]rename_index()\f[] \- Renames index field (inplace).
.PD 0
.P
.PD
.IP "15." 4
\f[B]reset_index()\f[] \- Reset the index.
.PD 0
.P
.PD
.IP "16." 4
\f[B]select_frovedis_dataframe()\f[] \- Selects the given columns from
the input dataframe.
.PD 0
.P
.PD
.IP "17." 4
\f[B]set_index()\f[] \- Set the DataFrame index using existing columns.
.PD 0
.P
.PD
.IP "18." 4
\f[B]show()\f[] \- Displays the selected dataframe values on console.
.PD 0
.P
.PD
.IP "19." 4
\f[B]sort()\f[] \- Sort by the values on a column.
.PD 0
.P
.PD
.IP "20." 4
\f[B]tail()\f[] \- Return the last n rows.
.PD 0
.P
.PD
.IP "21." 4
\f[B]update_index()\f[] \- Updates/sets index values.
.PP
\f[B]For more details about each of the selection and combination
functions, refer
.PD 0
.P
.PD
DataFrame_SelectionAndCombinations.md\f[]
.SS b) List of Aggregate Functions
.PP
Aggregate functions of dataframe help to perform computations on the
specified values and helps with efficient summarization of data.
The calculated values gives insight into the nature of potential data.
.IP " 1." 4
\f[B]abs()\f[] \- Return a DataFrame with absolute numeric value of each
element.
.PD 0
.P
.PD
.IP " 2." 4
\f[B]agg()\f[] \- Aggregate using the specified functions and columns.
.PD 0
.P
.PD
.IP " 3." 4
\f[B]apply()\f[] \- Apply a function along an axis of the DataFrame.
.PD 0
.P
.PD
.IP " 4." 4
\f[B]countna()\f[] \- Count NA values for each column/row.
.PD 0
.P
.PD
.IP " 5." 4
\f[B]describe()\f[] \- Generate descriptive statistics.
.PD 0
.P
.PD
.IP " 6." 4
\f[B]groupby()\f[] \- Group dataframe using the specified columns.
.PD 0
.P
.PD
.IP " 7." 4
\f[B]mad()\f[] \- Return the mean absolute deviation of the values over
the requested axis.
.PD 0
.P
.PD
.IP " 8." 4
\f[B]mean()\f[] \- Return the mean of the values over the requested
axis.
.PD 0
.P
.PD
.IP " 9." 4
\f[B]median()\f[] \- Return the median of the values over the requested
axis.
.PD 0
.P
.PD
.IP "10." 4
\f[B]sem()\f[] \- Return unbiased standard error of the mean over
requested axis.
.PD 0
.P
.PD
.IP "11." 4
\f[B]std()\f[] \- Return sample standard deviation over requested axis.
.PD 0
.P
.PD
.IP "12." 4
\f[B]var()\f[] \- Return unbiased variance over requested axis.
.PP
\f[B]For more details about each of the aggregate functions, refer
.PD 0
.P
.PD
DataFrame_AggregateFunctions.md\f[]
.SS c) List of Binary Operator Functions
.PP
DataFrame has methods for carrying out binary operations like add(),
sub(), etc and related functions like radd(), rsub(), etc.
for carrying out reverse binary operations.
.IP " 1." 4
\f[B]add()\f[] \- Get addition of dataframe and other specified value.
It is equivalent to dataframe + other.
.PD 0
.P
.PD
.IP " 2." 4
\f[B]radd()\f[] \- Get addition of other specified value and dataframe.
It is equivalent to other + dataframe.
.PD 0
.P
.PD
.IP " 3." 4
\f[B]div()\f[] \- Get floating division of dataframe and other specified
value.
It is equivalent to dataframe / other.
.PD 0
.P
.PD
.IP " 4." 4
\f[B]rdiv()\f[] \- Get floating division of other specified value and
dataframe.
It is equivalent to other / dataframe.
.PD 0
.P
.PD
.IP " 5." 4
\f[B]floordiv()\f[] \- Get integer division of dataframe and other
specified value.
It is equivalent to dataframe // other.
.PD 0
.P
.PD
.IP " 6." 4
\f[B]rfloordiv()\f[] \- Get integer division of other specified value
and dataframe.
It is equivalent to other // dataframe.
.PD 0
.P
.PD
.IP " 7." 4
\f[B]mod()\f[] \- Get modulo of dataframe and other specified value.
It is equivalent to dataframe % other.
.PD 0
.P
.PD
.IP " 8." 4
\f[B]rmod()\f[] \- Get modulo of other specified value and dataframe.
It is equivalent to other % dataframe.
.PD 0
.P
.PD
.IP " 9." 4
\f[B]mul()\f[] \- Get multiplication of dataframe and other specified
value.
It is equivalent to dataframe * other.
.PD 0
.P
.PD
.IP "10." 4
\f[B]rmul()\f[] \- Get multiplication of other specified value and
dataframe.
It is equivalent to other * dataframe.
.PD 0
.P
.PD
.IP "11." 4
\f[B]pow()\f[] \- Get exponential power of dataframe and other specified
value.
It is equivalent to dataframe ** other.
.PD 0
.P
.PD
.IP "12." 4
\f[B]rpow()\f[] \- Get exponential power of other specified value and
dataframe.
It is equivalent to other ** dataframe.
.PD 0
.P
.PD
.IP "13." 4
\f[B]sub()\f[] \- Get subtraction of dataframe and other specified
value.
It is equivalent to dataframe \- other.
.PD 0
.P
.PD
.IP "14." 4
\f[B]rsub()\f[] \- Get subtraction of other specified value and
dataframe.
It is equivalent to other \- dataframe.
.PD 0
.P
.PD
.IP "15." 4
\f[B]truediv()\f[] \- Get floating division of dataframe and other
specified value.
It is equivalent to dataframe / other.
.PD 0
.P
.PD
.IP "16." 4
\f[B]rtruediv()\f[] \- Get floating division of other specified value
and dataframe.
It is equivalent to other / dataframe.
.PP
\f[B]For more details about each of the binary operator functions, refer
.PD 0
.P
.PD
DataFrame_BinaryOperators.md\f[]
