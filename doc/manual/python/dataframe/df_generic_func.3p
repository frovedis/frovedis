.\" Automatically generated by Pandoc 2.17.1.1
.\"
.\" Define V font for inline verbatim, using C font in formats
.\" that render this, and otherwise B font.
.ie "\f[CB]x\f[]"x" \{\
. ftr V B
. ftr VI BI
. ftr VB B
. ftr VBI BI
.\}
.el \{\
. ftr V CR
. ftr VI CI
. ftr VB CB
. ftr VBI CBI
.\}
.TH "DataFrame Generic Functions" "" "" "" ""
.hy
.SH NAME
.PP
DataFrame Generic Functions - it contains list of all generally used
functions with frovedis dataframe.
.SS DESCRIPTION
.PP
Frovedis dataframe provides various functions which are
generally/frequently used with it to perform operations:
.PD 0
.P
.PD
- Selecting / Filtering / Modifying data in frovedis dataframe.
.PD 0
.P
.PD
- Combining two frovedis dataframes.
.PD 0
.P
.PD
- Dropping data from rows or columns ina frovedis dataframe.
.PD 0
.P
.PD
- Display frovedis dataframe (full/partially)
.SS Public Member Functions
.IP
.nf
\f[C]
1. add_index(name)
2. append(other, ignore_index = False, verify_integrity = False, sort = False)
3. astype(dtype, copy = True, errors = \[aq]raise\[aq], check_bool_like_string = False)
4. between(left, right, inclusive=\[dq]both\[dq])
5. copy(deep = True)
6. countna()
7. describe()        
8. drop(labels = None, axis = 0, index = None, columns = None, level = None, 
        inplace = False, errors = \[aq]raise\[aq])
9. drop_cols(targets, inplace = False)
10. drop_duplicates(subset = None, keep = \[aq]first\[aq], inplace = False, ignore_index = False)
11. dropna(axis = 0, how = \[aq]any\[aq], thresh = None, subset = None, inplace = False)
12. drop_rows(targets, inplace = False)
13. fillna(value = None, method = None, axis = None, inplace = False, limit = None, downcast = None)
14. filter(items = None, like = None, regex = None, axis = None)
15. get_index_loc(value)
16. head(n = 5)
17. insert(loc, column, value, allow_duplicates = False)
18. isna()
19. isnull()
20. join(right, on, how = \[aq]inner\[aq], lsuffix = \[aq]_left\[aq], rsuffix = \[aq]_right\[aq], 
         sort = False, join_type = \[aq]bcast\[aq])
21. merge(right, on = None, how = \[aq]inner\[aq], left_on = None, right_on = None, 
          left_index = False, right_index = False, sort = False, suffixes = (\[aq]_x\[aq], \[aq]_y\[aq]), 
          copy = True, indicator = False, join_type = \[aq]bcast\[aq])
22. rename(columns, inplace = False)
23. rename_index(new_name, inplace = False)
24. reset_index(drop = False, inplace = False)
25. set_index(keys, drop = True, append = False, inplace = False, verify_integrity = False)
26. show()
27. tail(n = 5)
28. update_index(value, key = None, verify_integrity = False, inplace = False) 
\f[R]
.fi
.SS Detailed Description
.SS 1. add_index(name)
.PP
\f[B]Parameters\f[R]
.PD 0
.P
.PD
\f[B]\f[BI]name\f[B]\f[R]: It accepts a string object as parameter which
represents the name of the index label.
.PP
\f[B]Purpose\f[R]
.PD 0
.P
.PD
It adds index column to the Frovedis DataFrame object.
The index added is zero based i.e.\ [0, 1, \&...
n-1] where n is the number of rows.
.PP
For example,
.IP
.nf
\f[C]
import pandas as pd
import frovedis.dataframe as fdf

peopleDF = {
            \[aq]Ename\[aq] : [\[aq]Michael\[aq], \[aq]Andy\[aq], \[aq]Tanaka\[aq], \[aq]Raul\[aq], \[aq]Yuta\[aq]],
            \[aq]Age\[aq] : [29, 30, 27, 19, 31],
            \[aq]Country\[aq] : [\[aq]USA\[aq], \[aq]England\[aq], \[aq]Japan\[aq], \[aq]France\[aq], \[aq]Japan\[aq]],
            \[aq]isMale\[aq]: [False, False, False, False, True]
           }

# create a pandas dataframe
pd_df = pd.DataFrame(peopleDF)

# create a frovedis dataframe
fd_df = fdf.DataFrame(pd_df)

# display the frovedis dataframe
fd_df.show()
\f[R]
.fi
.PP
Output
.IP
.nf
\f[C]
index   Ename   Age     Country isMale
0       Michael 29      USA     0
1       Andy    30      England 0
2       Tanaka  27      Japan   0
3       Raul    19      France  0
4       Yuta    31      Japan   1
\f[R]
.fi
.PP
For example,
.IP
.nf
\f[C]
# add_index() demo
fd_df.add_index(\[dq]SNo\[dq]).show()
\f[R]
.fi
.PP
Output
.IP
.nf
\f[C]
SNo   index   Ename   Age     Country isMale
0     0       Michael 29      USA     0
1     1       Andy    30      England 0
2     2       Tanaka  27      Japan   0
3     3       Raul    19      France  0
4     4       Yuta    31      Japan   1  
\f[R]
.fi
.PP
\f[B]Return Value\f[R]
.PD 0
.P
.PD
It returns a self reference.
.SS 2. append(other, ignore_index = False, verify_integrity = False, sort = False)
.PP
\f[B]Parameters\f[R]
.PD 0
.P
.PD
\f[B]\f[BI]other\f[B]\f[R]: It accepts a Frovedis DataFrame instance or
a Pandas DataFrame instance or a list of Frovedis DataFrame instances
which are to be appended.
.PD 0
.P
.PD
\f[B]\f[BI]ignore_index\f[B]\f[R]: It accepts a boolean type parameter.
If True, old index axis is ignored and a new index axis is added with
values 0 to n - 1, where n is the number of rows in the DataFrame.
(Default: False)
.PD 0
.P
.PD
\f[B]\f[BI]verify_integrity\f[B]\f[R]: It accepts a boolean type as
parameter.
If it is set to True, it checks `index' label for duplicate entries
before appending and when there are duplicate entries in the DataFrame,
it doesn\[cq]t append.
Otherwise duplicate entries in the `index' label will be appended.
It will also append duplicate entries when `ignore_index' = True.
(Default: False)
.PD 0
.P
.PD
\f[B]\f[BI]sort\f[B]\f[R]: It accepts a boolean type as parameter.
It sorts the columns, if the columns of the given DataFrame and other
DataFrame are not aligned.
(Default: False)
.PP
\f[B]Purpose\f[R]
.PD 0
.P
.PD
It is used to append entries of dataframe at the end of another
dataframe.
The columns of other DataFrame instance that are not in the calling
DataFrame instance are added as new columns.
.PP
For example,
.IP
.nf
\f[C]
import pandas as pd
import frovedis.dataframe as fdf

# creating a pandas dataframe
pd_df1 = pd.DataFrame([[1, 2], [3, 4]], columns = list(\[aq]AB\[aq]), index = [\[aq]x\[aq], \[aq]y\[aq]])

# create a frovedis dataframe
fd_df1 = fdf.DataFrame(pd_df1)

# display frovedis dataframe
fd_df1.show()

# create another pandas dataframe
pd_df2 = pd.DataFrame([[5, 6], [7, 8]], columns = list(\[aq]AB\[aq]), index = [\[aq]x\[aq], \[aq]y\[aq]])

# create another frovedis dataframe
fd_df2 = fdf.DataFrame(pd_df2)

# display other frovedis dataframe
fd_df2.show()
\f[R]
.fi
.PP
Output
.IP
.nf
\f[C]
index   A       B
x       1       2
y       3       4

index   A       B
x       5       6
y       7       8
\f[R]
.fi
.PP
For example,
.IP
.nf
\f[C]
# example of using append method with default values
# appending fd_df2 to fd_df1
fd_df1.append(fd_df2).show() 
\f[R]
.fi
.PP
Output
.IP
.nf
\f[C]
index   A       B
x       1       2
y       3       4
x       5       6
y       7       8 
\f[R]
.fi
.PP
For example,
.IP
.nf
\f[C]
# append() demo With ignore_index = True
fd_df1.append(fd_df2, ignore_index = True).show()
\f[R]
.fi
.PP
Output,
.IP
.nf
\f[C]
index   A       B
0       1       2
1       3       4
2       5       6
3       7       8
\f[R]
.fi
.PP
For example,
.IP
.nf
\f[C]
import pandas as pd
import frovedis.dataframe as fdf

# creating a pandas dataframe
pd_df1 = pd.DataFrame([[1, 2], [3, 4]], columns = list(\[aq]AB\[aq]), index = [\[aq]x\[aq], \[aq]y\[aq]])

# create a frovedis dataframe
fd_df1 = fdf.DataFrame(pd_df1)

# display frovedis dataframe
fd_df1.show()

# create another pandas dataframe
pd_df2 = pd.DataFrame([[5, 6], [7, 8]], columns = list(\[aq]CD\[aq]), index = [\[aq]x\[aq], \[aq]y\[aq]])

# create another frovedis dataframe
fd_df2 = fdf.DataFrame(pd_df2)

# display other frovedis dataframe
fd_df2.show()
\f[R]
.fi
.PP
Output
.IP
.nf
\f[C]
index   A       B
x       1       2
y       3       4

index   C       D
x       5       6
y       7       8
\f[R]
.fi
.PP
For example,
.IP
.nf
\f[C]
# append() demo when there are no common columns
fd_df1.append(fd_df2).show() 
\f[R]
.fi
.PP
Output
.IP
.nf
\f[C]
index   A       B       D       C
x       1       2       NULL    NULL
y       3       4       NULL    NULL
x       NULL    NULL    6       5
y       NULL    NULL    8       7
\f[R]
.fi
.PP
For example,
.IP
.nf
\f[C]
import pandas as pd
import frovedis.dataframe as fdf

# creating a pandas dataframe
pd_df1 = pd.DataFrame([[1, 2], [3, 4]], columns=list(\[aq]AB\[aq]), index=[\[aq]x\[aq], \[aq]y\[aq]])

# creating a frovedis dataframe
fd_df1 = fdf.DataFrame(pd_df1)

# display a frovedis dataframe
fd_df1.show()

# creating another pandas dataframe
pd_df2 = pd.DataFrame([[1, 2], [7, 8]], columns=list(\[aq]AB\[aq]), index=[\[aq]u\[aq], \[aq]v\[aq]])    

# creating another frovedis dataframe
fd_df2 = fdf.DataFrame(pd_df2)

# display other frovedis dataframe
fd_df2.show()
\f[R]
.fi
.PP
Output
.IP
.nf
\f[C]
index   A       B
x       1       2
y       3       4

index   A       B
u       1       2
v       7       8
\f[R]
.fi
.PP
For example,
.IP
.nf
\f[C]
# appending fd_df2 to fd_df1 with verify_integrity = True
fd_df1.append(fd_df2, verify_integrity = True).show()
\f[R]
.fi
.PP
Output
.IP
.nf
\f[C]
index   A       B
x       1       2
y       3       4
u       1       2
v       7       8
\f[R]
.fi
.PP
For example,
.IP
.nf
\f[C]
import pandas as pd
import frovedis.dataframe as fdf

# creating a pandas dataframe
pd_df1 = pd.DataFrame([[1, 2], [3, 4]], columns=list(\[aq]YZ\[aq]), index=[\[aq]x\[aq], \[aq]y\[aq]])

# creating a frovedis dataframe
fd_df1 = fdf.DataFrame(pd_df1)

# display a frovedis dataframe
fd_df1.show()

# creating another pandas dataframe
pd_df2 = pd.DataFrame([[1, 2], [7, 8]], columns=list(\[aq]AB\[aq]), index=[\[aq]x\[aq], \[aq]y\[aq]])    

# creating another frovedis dataframe
fd_df2 = fdf.DataFrame(pd_df2)

# display other frovedis dataframe
fd_df2.show()
\f[R]
.fi
.PP
Output
.IP
.nf
\f[C]
index   Y       Z
x       1       2
y       3       4

index   A       B
x       1       2
y       7       8
\f[R]
.fi
.PP
For example,
.IP
.nf
\f[C]
# appending fd_df2 with fd_df1 with sort = True
fd_df1.append(fd_df2, sort = True).show()
\f[R]
.fi
.PP
Output
.IP
.nf
\f[C]
index   A       B       Y       Z
x       NULL    NULL    1       2
y       NULL    NULL    3       4
x       1       2       NULL    NULL
y       7       8       NULL    NULL
\f[R]
.fi
.PP
\f[B]Return Value\f[R]
.PD 0
.P
.PD
It returns a new Frovedis DataFrame consisting of the rows of original
DataFrame object and the rows of other DataFrame object.
.SS 3. astype(dtype, copy = True, errors = `raise', check_bool_like_string = False)
.PP
\f[B]Parameters\f[R]
.PD 0
.P
.PD
\f[B]\f[BI]dtype\f[B]\f[R]: It accepts a string, numpy.dtype or a dict
of column labels to cast entire DataFrame object to same type or one or
more columns to column-specific types.
.PD 0
.P
.PD
\f[B]\f[BI]copy\f[B]\f[R]: It accepts a boolean parameter and returns a
new DataFrame object when it is True.
Currently this parameter will always return a copy.
The original DataFrame is not modified.
(Default: True)
.PD 0
.P
.PD
\f[B]\f[BI]errors\f[B]\f[R]: This is an unused parameter.
(Default: `raise')
.PD 0
.P
.PD
\f[B]\f[BI]check_bool_like_string\f[B]\f[R]: A boolean parameter which
when set to True will cast string columns having boolean like
case-insensitive strings (True, False, yes, No, On, Off, Y, N, T, F) to
boolean columns.
(Default: False)
.PP
\f[B]Purpose\f[R]
.PD 0
.P
.PD
It cast an entire Frovedis DataFrame or selected columns of Frovedis
DataFrame to the specified dtype.
.PP
The parameter: \[lq]errors\[rq] is simply kept in to make the interface
uniform to the pandas DataFrame.astype().
.PD 0
.P
.PD
This is not used anywhere within the frovedis implementation.
.PP
For example,
.IP
.nf
\f[C]
import pandas as pd
import frovedis.dataframe as fdf

# a dictionary
peopleDF = {
            \[aq]Ename\[aq] : [\[aq]Michael\[aq], \[aq]Andy\[aq], \[aq]Tanaka\[aq], \[aq]Raul\[aq], \[aq]Yuta\[aq]],
            \[aq]Age\[aq] : [29, 30, 27, 19, 31],
            \[aq]Country\[aq] : [\[aq]USA\[aq], \[aq]England\[aq], \[aq]Japan\[aq], \[aq]France\[aq], \[aq]Japan\[aq]],
            \[aq]isMale\[aq]: [False, False, False, False, True]
           }
# converting to pandas dataframe  
pd_df = pd.DataFrame(peopleDF)

# converting to frovedis dataframe
fd_df = fdf.DataFrame(pd_df)

# display the datatype of object
print(fd_df.dtypes)
\f[R]
.fi
.PP
Output
.IP
.nf
\f[C]
Ename      object
Age         int64
Country    object
isMale       bool
dtype: object
\f[R]
.fi
.PP
For example,
.IP
.nf
\f[C]
# display the datatype of object after conversion of \[aq]Age\[aq] column
print(fd_df.astype({\[aq]Age\[aq]:\[aq]int32\[aq]}).dtypes)
\f[R]
.fi
.PP
Output
.IP
.nf
\f[C]
Ename      object
Age         int32
Country    object
isMale      int32
dtype: object
\f[R]
.fi
.PP
For example,
.IP
.nf
\f[C]
import pandas as pd
import frovedis.dataframe as fdf

# creating a pandas dataframe
pd_df =  pd.DataFrame({\[aq]col1\[aq]: [1, 2], \[aq]col2\[aq]: [3, 4]})

# creating a frovedis dataframe
fd_df1 = fdf.DataFrame(pf1)

# displaying a frovedis dataframe dtype 
print(fd_df1.dtypes)
\f[R]
.fi
.PP
Output
.IP
.nf
\f[C]
col1    int64
col2    int64
dtype: object
\f[R]
.fi
.PP
For example,
.IP
.nf
\f[C]
# cast all columns to int32:
fd_df2 = fd_df1.astype(\[aq]int32\[aq])

# display dataframe after conversion
print(fd_df2.dtypes)
\f[R]
.fi
.PP
Output
.IP
.nf
\f[C]
col1    int32
col2    int32
dtype: object
\f[R]
.fi
.PP
For example,
.IP
.nf
\f[C]
import pandas as pd
import frovedis.dataframe as fdf

# a dictionary
peopleDF = {
            \[aq]Ename\[aq] : [\[aq]Michael\[aq], \[aq]Andy\[aq], \[aq]Tanaka\[aq], \[aq]Raul\[aq], \[aq]Yuta\[aq]],
            \[aq]Age\[aq] : [29, 30, 27, 19, 31],
            \[aq]Country\[aq] : [\[aq]USA\[aq], \[aq]England\[aq], \[aq]Japan\[aq], \[aq]France\[aq], \[aq]Japan\[aq]],
            \[aq]isMale\[aq]: [\[aq]F\[aq], \[aq]No\[aq], \[aq]Off\[aq], False, \[aq]Y\[aq]]
           }
# converting to pandas dataframe  
pd_df = pd.DataFrame(peopleDF)

# converting to frovedis dataframe
fd_df = fdf.DataFrame(pd_df)

# display the dataframes
fd_df.show()

# display the datatype
print(fd_df.dtypes)
\f[R]
.fi
.PP
Output
.IP
.nf
\f[C]
index   Ename   Age     Country isMale
0       Michael 29      USA     F
1       Andy    30      England No
2       Tanaka  27      Japan   Off
3       Raul    19      France  False
4       Yuta    31      Japan   Y

Ename      object
Age         int64
Country    object
isMale     object
dtype: object
\f[R]
.fi
.PP
For example,
.IP
.nf
\f[C]
# astype() demo with check_bool_like_string = True
fd_df.astype({\[aq]isMale\[aq]:\[aq]bool\[aq]}, check_bool_like_string = True).show()

# display the datatype
print(fd_df.astype({\[aq]isMale\[aq]:\[aq]bool\[aq]}, check_bool_like_string = True).dtypes)
\f[R]
.fi
.PP
Output
.IP
.nf
\f[C]
index   Ename   Age     Country isMale
0       Michael 29      USA     0
1       Andy    30      England 0
2       Tanaka  27      Japan   0
3       Raul    19      France  0
4       Yuta    31      Japan   1

Ename      object
Age         int64
Country    object
isMale       bool
dtype: object
\f[R]
.fi
.PP
\f[B]Return Value\f[R]
.PD 0
.P
.PD
It returns a new DataFrame instance with dtype converted as specified.
.SS 4. between(left, right, inclusive = \[lq]both\[rq])
.PP
\f[B]Parameters\f[R]
.PD 0
.P
.PD
\f[B]\f[BI]left\f[B]\f[R]: It accepts scalar values as parameter.
.PD 0
.P
.PD
\f[B]\f[BI]right\f[B]\f[R]: It accepts scalar values as parameter.
.PD 0
.P
.PD
\f[B]\f[BI]inclusive\f[B]\f[R]: It accepts string object as parameter
tha specifies which boundaries to include, whether to set bounds as open
or closed.
(Default: `both')
.PD 0
.P
.PD
- \f[B]`left'\f[R]: left boundary value is included.
.PD 0
.P
.PD
- \f[B]`right'\f[R]: right boundary value is included.
.PD 0
.P
.PD
- \f[B]`both'\f[R]: boundary values are included.
.PD 0
.P
.PD
- \f[B]`neither'\f[R]: boundary values are excluded.
.PP
\f[B]Purpose\f[R]
.PD 0
.P
.PD
This method performs filtering of rows according to the specified bound
over a single column at a time.
.PP
\f[B]Currently, this method filters data for numeric column data
only.\f[R]
.PP
For example,
.IP
.nf
\f[C]
import pandas as pd
import numpy as np
import frovedis.dataframe as fdf

# a dictionary
peopleDF = {
            \[aq]Name\[aq]:[\[aq]Jai\[aq], \[aq]Anuj\[aq], \[aq]Jai\[aq], \[aq]Princi\[aq], \[aq]Gaurav\[aq], \[aq]Anuj\[aq], \[aq]Princi\[aq], \[aq]Abhi\[aq]],
            \[aq]Age\[aq]:[27, 24, 22, 32, 33, 36, 27, 32],
            \[aq]City\[aq]:[\[aq]Nagpur\[aq], \[aq]Kanpur\[aq], \[aq]Allahabad\[aq], \[aq]Kannuaj\[aq], \[aq]Allahabad\[aq], 
                    \[aq]Kanpur\[aq], \[aq]Kanpur\[aq], \[aq]Kanpur\[aq]],
            \[aq]Qualification\[aq]:[\[aq]B.Tech\[aq], \[aq]Phd\[aq], \[aq]B.Tech\[aq], \[aq]Phd\[aq], \[aq]Phd\[aq], \[aq]B.Tech\[aq], \[aq]Phd\[aq], \[aq]B.Tech\[aq]],
            \[aq]Score\[aq]: [23, 34, 35, 45, np.nan, 50, 52, np.nan]
           }

# create pandas dataframe
pdf1 = pd.DataFrame(peopleDF)

# create frovedis dataframe
fdf1 = fdf.DataFrame(pdf1)

# display the frovedis dataframe
fdf1.show()
\f[R]
.fi
.PP
Output
.IP
.nf
\f[C]
index   Name    Age     City       Qualification   Score
0       Jai     27      Nagpur     B.Tech          23
1       Anuj    24      Kanpur     Phd             34
2       Jai     22      Allahabad  B.Tech          35
3       Princi  32      Kannuaj    Phd             45
4       Gaurav  33      Allahabad  Phd             NULL
5       Anuj    36      Kanpur     B.Tech          50
6       Princi  27      Kanpur     Phd             52
7       Abhi    32      Kanpur     B.Tech          NULL
\f[R]
.fi
.PP
For example,
.IP
.nf
\f[C]
# between() demo used with given column of dataframe
# Also, both boundaries are included
fdf1[\[aq]Score\[aq]].between(40,50)
\f[R]
.fi
.PP
Unlike pandas, it returns an instance of dfoperator \f[B](present in
frovedis only)\f[R] which contains masked boolean data as result of
between operation.
In order to unmask the data, \f[B]to_mask_array()\f[R] must be used.
.IP
.nf
\f[C]
fdf1[\[aq]Score\[aq]].between(40,50).to_mask_array
\f[R]
.fi
.PP
Output
.IP
.nf
\f[C]
[False False False  True False  True False False]
\f[R]
.fi
.PP
This returns a boolean array containing True wherever the corresponding
element is between the boundary values `left' and `right'.
The missing values are treated as False.
.PP
Also, this method can be used in the form of given expression below:
.PP
For example,
.IP
.nf
\f[C]
# between() demo used with given column of dataframe
# Also, both boundaries are included
res = fdf1[fdf1[\[aq]Score\[aq]].between(40,50)]
print(res)
\f[R]
.fi
.PP
Output
.IP
.nf
\f[C]
index   Name    Age     City    Qualification   Score
3       Princi  32      Kannuaj Phd     45
5       Anuj    36      Kanpur  B.Tech  50
\f[R]
.fi
.PP
It can also be expressed as follows:
.PP
For example,
.IP
.nf
\f[C]
print(fdf1[fdf1.Score.between(40,50)])
\f[R]
.fi
.PP
Output
.IP
.nf
\f[C]
index   Name    Age     City    Qualification   Score
3       Princi  32      Kannuaj Phd     45
5       Anuj    36      Kanpur  B.Tech  50
\f[R]
.fi
.PP
Now, when `inclusive' parameter is provided, then,
.PP
For example,
.IP
.nf
\f[C]
# between() demo and only left boundary included
print(fdf1[\[aq]Score\[aq]].between(40,50,inclusive = \[aq]left\[aq]).to_mask_array())
\f[R]
.fi
.PP
Output
.IP
.nf
\f[C]
[False False False  True False False False False]
\f[R]
.fi
.PP
For example,
.IP
.nf
\f[C]
# between() demo and only right boundary included
print(fdf1[\[aq]Score\[aq]].between(40,50,inclusive = \[aq]right\[aq]).to_mask_array())
\f[R]
.fi
.PP
Output
.IP
.nf
\f[C]
[False False False  True False  True False False]
\f[R]
.fi
.PP
For example,
.IP
.nf
\f[C]
# between() demo and both boundaries excluded
print(fdf1[\[aq]Score\[aq]].between(40,50,inclusive = \[aq]neither\[aq]).to_mask_array())
\f[R]
.fi
.PP
Output
.IP
.nf
\f[C]
[False False False  True False False False False]
\f[R]
.fi
.PP
\f[B]Return Value\f[R]
.PD 0
.P
.PD
It returns a dfoperator instance.
.SS 5. copy(deep = True)
.PP
\f[B]Parameters\f[R]
.PD 0
.P
.PD
\f[B]\f[BI]deep\f[B]\f[R]: A boolean parameter to decide the type of
copy operation.
(Default: True)
.PD 0
.P
.PD
When it is True (not specified explicitly), it creates a deep copy
i.e.\ the copy includes copy of the original DataFrame\[cq]s data and
the indices.
\f[B]Currently this parameter doesn\[cq]t support shallow copy (deep =
False).\f[R]
.PP
\f[B]Purpose\f[R]
.PD 0
.P
.PD
It creates a deep copy of the Frovedis DataFrame object\[cq]s indices
and data.
.PP
For example,
.IP
.nf
\f[C]
import pandas as pd
import frovedis.dataframe as fdf

peopleDF = {
            \[aq]Ename\[aq] : [\[aq]Michael\[aq], \[aq]Andy\[aq], \[aq]Tanaka\[aq], \[aq]Raul\[aq], \[aq]Yuta\[aq]],
            \[aq]Age\[aq] : [29, 30, 27, 19, 31],
            \[aq]Country\[aq] : [\[aq]USA\[aq], \[aq]England\[aq], \[aq]Japan\[aq], \[aq]France\[aq], \[aq]Japan\[aq]],
            \[aq]isMale\[aq]: [False, False, False, False, True]
           }
# creating a pandas dataframe
pd_df = pd.DataFrame(peopleDF)

#creating a frovedis dataframe
fd_df = fdf.DataFrame(pd_df)

print(\[aq]displaying original dataframe object\[aq])
fd_df.show()
\f[R]
.fi
.PP
Output
.IP
.nf
\f[C]
displaying original dataframe object
index   Ename   Age     Country isMale
0       Michael 29      USA     0
1       Andy    30      England 0
2       Tanaka  27      Japan   0
3       Raul    19      France  0
4       Yuta    31      Japan   1
\f[R]
.fi
.PP
For example,
.IP
.nf
\f[C]
# creating a deep copy
fd_df_copy = fd_df.copy()

print(\[aq]displaying copied dataframe object\[aq])
fd_df_copy.show()
\f[R]
.fi
.PP
Output
.IP
.nf
\f[C]
displaying copied dataframe object
index   Ename   Age     Country isMale
0       Michael 29      USA     0
1       Andy    30      England 0
2       Tanaka  27      Japan   0
3       Raul    19      France  0
4       Yuta    31      Japan   1
\f[R]
.fi
.PP
For example,
.IP
.nf
\f[C]
# changing column Age to Age2 for the copied object
fd_df_copy.rename({\[aq]Age\[aq]:\[aq]Age2\[aq], inplace = True}

print(\[aq]displaying copied dataframe object\[aq])
fd_df_copy.show()
\f[R]
.fi
.PP
Output
.IP
.nf
\f[C]
displaying copied dataframe object
index   Ename   Age2     Country isMale
0       Michael 29      USA     0
1       Andy    30      England 0
2       Tanaka  27      Japan   0
3       Raul    19      France  0
4       Yuta    31      Japan   1
\f[R]
.fi
.PP
\f[B]NOTE: changes are reflected only in copied DataFrame instance but
not in original DataFrame instance.\f[R]
.PP
\f[B]Return Value\f[R]
.PD 0
.P
.PD
It returns a deep copy of the DataFrame instance of the same type.
.SS 6. countna(axis = 0)
.PP
\f[B]Parameters\f[R]
.PD 0
.P
.PD
\f[B]\f[BI]axis\f[B]\f[R]: It accepts an integer or string object as
parameter.
It is used to decide whether to count missing values along the indices
or by column labels.
(Default: 0)
.PD 0
.P
.PD
- \f[B]0 or `index'\f[R]: count missing values along the indices.
.PD 0
.P
.PD
- \f[B]1 or `columns'\f[R]: count missing values along the columns.
.PP
\f[B]Purpose\f[R]
.PD 0
.P
.PD
It counts number of missing values in the given axis.
.PP
For example,
.IP
.nf
\f[C]
import pandas as pd
import numpy as np
import frovedis.dataframe as fdf

# a dictionary
peopleDF = {
            \[aq]Name\[aq]:[\[aq]Jai\[aq], \[aq]Anuj\[aq], \[aq]Jai\[aq], \[aq]Princi\[aq], \[aq]Gaurav\[aq], \[aq]Anuj\[aq], \[aq]Princi\[aq], \[aq]Abhi\[aq]],
            \[aq]Age\[aq]:[27, 24, 22, 32, 33, 36, 27, 32],
            \[aq]City\[aq]:[\[aq]Nagpur\[aq], \[aq]Kanpur\[aq], \[aq]Allahabad\[aq], \[aq]Kannuaj\[aq], \[aq]Allahabad\[aq], 
                    \[aq]Kanpur\[aq], \[aq]Kanpur\[aq], \[aq]Kanpur\[aq]],
            \[aq]Qualification\[aq]:[\[aq]B.Tech\[aq], \[aq]Phd\[aq], \[aq]B.Tech\[aq], \[aq]Phd\[aq], \[aq]Phd\[aq], \[aq]B.Tech\[aq], \[aq]Phd\[aq], \[aq]B.Tech\[aq]],
            \[aq]Score\[aq]: [23, 34, 35, 45, np.nan, 50, 52, np.nan]
            }

# create pandas dataframe
pdf1 = pd.DataFrame(peopleDF)

# create frovedis dataframe
fdf1 = fdf.DataFrame(pdf1)

# display the frovedis dataframe
fdf1.show()
\f[R]
.fi
.PP
Output
.IP
.nf
\f[C]
index   Name    Age     City       Qualification  Score
0       Jai     27      Nagpur     B.Tech         23
1       Anuj    24      Kanpur     Phd            34
2       Jai     22      Allahabad  B.Tech         35
3       Princi  32      Kannuaj    Phd            45
4       Gaurav  33      Allahabad  Phd            NULL
5       Anuj    36      Kanpur     B.Tech         50
6       Princi  27      Kanpur     Phd            52
7       Abhi    32      Kanpur     B.Tech         NULL
\f[R]
.fi
.PP
For example,
.IP
.nf
\f[C]
# countna() demo
fdf1.countna().show()
\f[R]
.fi
.PP
Output
.IP
.nf
\f[C]
index   count
Name    0
Age     0
City    0
Qualification   0
Score   2
\f[R]
.fi
.PP
For example,
.IP
.nf
\f[C]
# countna() demo using axis = 1
fdf1.countna(axis = 1).show()
\f[R]
.fi
.PP
Output
.IP
.nf
\f[C]
index   count
0       0
1       0
2       0
3       0
4       1
5       0
6       0
7       1
\f[R]
.fi
.PP
\f[B]Return Value\f[R]
.PD 0
.P
.PD
It returns a frovedis DataFrame instance.
.SS 7. describe()
.PP
\f[B]Purpose\f[R]
.PD 0
.P
.PD
It generates descriptive statistics.
Descriptive statistics include count, mean, median, etc, excluding
missing values.
.PP
For example,
.IP
.nf
\f[C]
import pandas as pd
import numpy as np
import frovedis.dataframe as fdf

# a dictionary
peopleDF = {
            \[aq]Name\[aq]:[\[aq]Jai\[aq], \[aq]Anuj\[aq], \[aq]Jai\[aq], \[aq]Princi\[aq], \[aq]Gaurav\[aq], \[aq]Anuj\[aq], \[aq]Princi\[aq], \[aq]Abhi\[aq]],
            \[aq]Age\[aq]:[27, 24, 22, 32, 33, 36, 27, 32],
            \[aq]City\[aq]:[\[aq]Nagpur\[aq], \[aq]Kanpur\[aq], \[aq]Allahabad\[aq], \[aq]Kannuaj\[aq], \[aq]Allahabad\[aq], 
                    \[aq]Kanpur\[aq], \[aq]Kanpur\[aq], \[aq]Kanpur\[aq]],
            \[aq]Qualification\[aq]:[\[aq]B.Tech\[aq], \[aq]Phd\[aq], \[aq]B.Tech\[aq], \[aq]Phd\[aq], \[aq]Phd\[aq], \[aq]B.Tech\[aq], \[aq]Phd\[aq], \[aq]B.Tech\[aq]],
            \[aq]Score\[aq]: [23, 34, 35, 45, np.nan, 50, 52, np.nan]
            }

# create pandas dataframe
pdf1 = pd.DataFrame(peopleDF)

# create frovedis dataframe
fdf1 = fdf.DataFrame(pdf1)

# display the frovedis dataframe
fdf1.show()
\f[R]
.fi
.PP
Output
.IP
.nf
\f[C]
index   Name    Age     City       Qualification  Score
0       Jai     27      Nagpur     B.Tech         23
1       Anuj    24      Kanpur     Phd            34
2       Jai     22      Allahabad  B.Tech         35
3       Princi  32      Kannuaj    Phd            45
4       Gaurav  33      Allahabad  Phd            NULL
5       Anuj    36      Kanpur     B.Tech         50
6       Princi  27      Kanpur     Phd            52
7       Abhi    32      Kanpur     B.Tech         NULL
\f[R]
.fi
.PP
For example,
.IP
.nf
\f[C]
print(fdf1.describe())
\f[R]
.fi
.PP
Output
.IP
.nf
\f[C]
               Age       Score
count     8.000000    6.000000
mean     29.125000   39.833333
median   29.500000   40.000000
var      23.553571  123.766667
mad       4.125000    9.166667
std       4.853202   11.125047
sem       1.715866    4.541781
sum     233.000000  239.000000
min      22.000000   23.000000
max      36.000000   52.000000
\f[R]
.fi
.PP
\f[B]Return Value\f[R]
.PD 0
.P
.PD
It returns a pandas DataFrame instance with the result of the specified
aggregate operation.
.SS 8. drop(labels = None, axis = 0, index = None, columns = None, level = None, inplace = False, errors = `raise')
.PP
\f[B]Parameters\f[R]
.PD 0
.P
.PD
\f[B]\f[BI]labels\f[B]\f[R]: It takes an integer or string type as
argument.
It represents column labels and integer represent index values of rows
to be dropped.
If any of the label is not found in the selected axis, it will raise an
exception.
(Default: None)
.PD 0
.P
.PD
When it is None (not specified explicitly), `index' or `columns'
parameter must be provided.
Otherwise it will drop specific rows of the DataFrame.
.PD 0
.P
.PD
\f[B]\f[BI]axis\f[B]\f[R]: It accepts an integer type parameter where
the value indicates the direction of drop operation according to below
conditions:
.PD 0
.P
.PD
- 0 : The corresponding index labels will be dropped.
.PD 0
.P
.PD
- 1 : The corresponding columns labels will be dropped.
.PP
\f[B]\f[BI]index\f[B]\f[R]: It accepts an integer or string object as
parameter.
It is equivalent to dropping indices along the axis = 0.
(Default: None)
.PD 0
.P
.PD
When it is None (not specified explicitly), `columns' or `labels' must
be provided.
.PD 0
.P
.PD
\f[B]\f[BI]columns\f[B]\f[R]: It accepts a string object or list of
strings.
It is equivalent to dropping columns along the axis = 1.
(Default: None)
.PD 0
.P
.PD
When it is None (not specified explicitly), `index' or `labels' must be
provided.
.PD 0
.P
.PD
\f[B]\f[BI]level\f[B]\f[R]: This is an unsed parameter.
(Default: None)
.PD 0
.P
.PD
\f[B]\f[BI]inplace\f[B]\f[R]: It accepts a boolean as a parameter.
It return a copy of DataFrame instance by default but when explicitly
set to True, it performs operation on original DataFrame.
(Default: False)
.PD 0
.P
.PD
\f[B]\f[BI]errors\f[B]\f[R]: This is an unsed parameter.
(Default: `raise')
.PP
\f[B]Purpose\f[R]
.PD 0
.P
.PD
It is used to drop specified labels from rows or columns.
.PD 0
.P
.PD
Rows or columns can be removed by specifying label names and
corresponding axis, or by specifying index or column names.
.PP
For example,
.IP
.nf
\f[C]
import pandas as pd
import numpy as np
import frovedis.dataframe as fdf

pd_df = pd.DataFrame(np.arange(12).reshape(3, 4), columns = [\[aq]A\[aq], \[aq]B\[aq], \[aq]C\[aq], \[aq]D\[aq]])

# creating a frovedis dataframe
fd_df = fdf.DataFrame(pd_df).

# display frovedis dataframe
fd_df.show()
\f[R]
.fi
.PP
Output
.IP
.nf
\f[C]
index   A       B       C       D
0       0       1       2       3
1       4       5       6       7
2       8       9       10      11
\f[R]
.fi
.PP
For example,
.IP
.nf
\f[C]
# drop() demo with label and axis parameter
fd_df.drop(labels = [\[aq]B\[aq], \[aq]C\[aq]], axis = 1).show()
\f[R]
.fi
.PP
Output
.IP
.nf
\f[C]
index   A       D
0       0       3
1       4       7
2       8       11
\f[R]
.fi
.PP
For example,
.IP
.nf
\f[C]
# drop() demo with columns parameter     
fd_df.drop(columns = [\[aq]B\[aq], \[aq]C\[aq]]).show()
\f[R]
.fi
.PP
Output
.IP
.nf
\f[C]
index   A       D
0       0       3
1       4       7
2       8       11
\f[R]
.fi
.PP
For example,
.IP
.nf
\f[C]
# Drop a row by index
fd_df.drop(labels = [0, 1]).show()
\f[R]
.fi
.PP
Output
.IP
.nf
\f[C]
index   A       B       C       D
2       8       9       10      11
\f[R]
.fi
.PP
\f[B]Return Value\f[R]
.PD 0
.P
.PD
1.
It returns a new of Frovedis DataFrame having remaining entries.
.PD 0
.P
.PD
2.
It returns None when parameter `inplace' = True.
.SS 9. drop_cols(targets, inplace = False)
.PP
\f[B]Parameters\f[R]
.PD 0
.P
.PD
\f[B]\f[BI]targets\f[B]\f[R]: It accepts a string or a list of strings
as parameter.
It is list of names of column labels to drop from the dataframe.
.PD 0
.P
.PD
\f[B]\f[BI]inplace\f[B]\f[R]: It accepts a boolean as a parameter.
It return a copy of DataFrame instance by default but when explicitly
set to True, it performs operation on original DataFrame.
(Default: False)
.PP
\f[B]Purpose\f[R]
.PD 0
.P
.PD
It is used to drop specified columns.
.PP
For example,
.IP
.nf
\f[C]
import pandas as pd
import frovedis.dataframe as fdf

# a dictionary
peopleDF = {
            \[aq]Ename\[aq] : [\[aq]Michael\[aq], \[aq]Andy\[aq], \[aq]Tanaka\[aq], \[aq]Raul\[aq], \[aq]Yuta\[aq]],
            \[aq]Age\[aq] : [29, 30, 27, 19, 31],
            \[aq]Country\[aq] : [\[aq]USA\[aq], \[aq]England\[aq], \[aq]Japan\[aq], \[aq]France\[aq], \[aq]Japan\[aq]],
            \[aq]isMale\[aq]: [False, False, False, False, True]
           }
# creating a pandas dataframe
pd_df = pd.DataFrame(peopleDF)

# creating a frovedis dataframe
fd_df = fdf.DataFrame(pd_df)

# display a frovedis dataframe
fd_df.show()
\f[R]
.fi
.PP
Output
.IP
.nf
\f[C]
index   Ename   Age     Country isMale
0       Michael 29      USA     0
1       Andy    30      England 0
2       Tanaka  27      Japan   0
3       Raul    19      France  0
4       Yuta    31      Japan   1
\f[R]
.fi
.PP
For example,
.IP
.nf
\f[C]
# drop_cols() demo with inplace = True
fd_df.drop_cols(\[aq]Age\[aq], inplace = True)

# display the frovedis dataframe
fd_df.show()
\f[R]
.fi
.PP
Output
.IP
.nf
\f[C]
index   Ename   Country isMale
0       Michael USA     0
1       Andy    England 0
2       Tanaka  Japan   0
3       Raul    France  0
4       Yuta    Japan   1
\f[R]
.fi
.PP
For example,
.IP
.nf
\f[C]
# drop \[aq]Age\[aq] and \[aq]Country\[aq] columns
fd_df.drop_cols([\[aq]Age\[aq], \[aq]Country\[aq]]).show()

# display original frovedis dataframe
# No change in original dataframe as inplace is by default = False
fd_df.show()
\f[R]
.fi
.PP
Output,
.IP
.nf
\f[C]
index   Ename   isMale
0       Michael 0
1       Andy    0
2       Tanaka  0
3       Raul    0
4       Yuta    1

index   Ename   Age     Country isMale
0       Michael 29      USA     0
1       Andy    30      England 0
2       Tanaka  27      Japan   0
3       Raul    19      France  0
4       Yuta    31      Japan   1
\f[R]
.fi
.PP
\f[B]Return Value\f[R]
.PD 0
.P
.PD
1.
It returns a new of Frovedis DataFrame having remaining entries.
.PD 0
.P
.PD
2.
It returns None when parameter `inplace' = True.
.SS 10. drop_duplicates(subset = None, keep = `first', inplace = False, ignore_index = False)
.PP
\f[B]Parameters\f[R]
.PD 0
.P
.PD
\f[B]\f[BI]subset\f[B]\f[R]: It accepts a string object or a list of
strings which only consider certain columns for identifying duplicates.
(Default: None)
.PD 0
.P
.PD
When it is None (not specified explicitly), it will consider all of the
columns.
.PD 0
.P
.PD
\f[B]\f[BI]keep\f[B]\f[R]: It accepts a string object which is used to
determine which duplicates values to keep.
(Default: `first')
.PD 0
.P
.PD
1.
\f[B]`first'\f[R] : Drop duplicates except for the first occurrence.
.PD 0
.P
.PD
2.
\f[B]`last'\f[R] : Drop duplicates except for the last occurrence.
.PP
\f[B]\f[BI]inplace\f[B]\f[R]: It accepts a boolean as a parameter.
It return a copy of DataFrame instance by default but when explicitly
set to True, it performs operation on original DataFrame.
(Default: False)
.PD 0
.P
.PD
\f[B]\f[BI]ignore_index\f[B]\f[R]: It accepts a boolean type parameter.
If True, old index axis is ignored and a new index axis is added with
values 0 to n - 1, where n is the number of rows in the DataFrame.
(Default: False)
.PP
\f[B]Purpose\f[R]
.PD 0
.P
.PD
It is used to remove duplicate rows.
.PP
For example,
.IP
.nf
\f[C]
import pandas as pd
import frovedis.dataframe as fdf

# Consider dataset containing ramen rating.
pd_df = pd.DataFrame({
        \[aq]brand\[aq]: [\[aq]Yum Yum\[aq], \[aq]Yum Yum\[aq], \[aq]Indomie\[aq], \[aq]Indomie\[aq], \[aq]Indomie\[aq]],
        \[aq]style\[aq]: [\[aq]cup\[aq], \[aq]cup\[aq], \[aq]cup\[aq], \[aq]pack\[aq], \[aq]pack\[aq]],
        \[aq]rating\[aq]: [4, 4, 3.5, 15, 5]})

# creating a frovedis dataframe
fd_df = fdf.DataFrame(pd_df)

# display frovedis dataframe
fd_df.show()
\f[R]
.fi
.PP
Output
.IP
.nf
\f[C]
index   brand   style   rating
0       Yum Yum cup     4
1       Yum Yum cup     4
2       Indomie cup     3.5
3       Indomie pack    15
4       Indomie pack    5
\f[R]
.fi
.PP
For example,
.IP
.nf
\f[C]
# drop_duplicates() demo
fd_df.drop_duplicates()
\f[R]
.fi
.PP
Output
.IP
.nf
\f[C]
index   brand   style   rating
0       Yum Yum cup     4
2       Indomie cup     3.5
3       Indomie pack    15
4       Indomie pack    5
\f[R]
.fi
.PP
By default, it removes duplicate rows based on all columns
.PP
For example,
.IP
.nf
\f[C]
# drop_duplicates() demo with subset parameter
fd_df.drop_duplicates(subset = [\[aq]brand\[aq]]).show()
\f[R]
.fi
.PP
Output
.IP
.nf
\f[C]
index   brand   style   rating
0       Yum Yum cup     4
2       Indomie cup     3.5
\f[R]
.fi
.PP
For example,
.IP
.nf
\f[C]
# drop_duplicates() demo with parameters: subset and keep = \[aq]last\[aq]    
fd_df.drop_duplicates(subset = [\[aq]brand\[aq], \[aq]style\[aq]], keep = \[aq]last\[aq]).show()
\f[R]
.fi
.PP
Output
.IP
.nf
\f[C]
index   brand   style   rating
1       Yum Yum cup     4
2       Indomie cup     3.5
4       Indomie pack    5
\f[R]
.fi
.PP
\f[B]Return Value\f[R]
.PD 0
.P
.PD
1.
It returns a new of Frovedis DataFrame having remaining entries.
.PD 0
.P
.PD
2.
It returns None when parameter `inplace' = True.
.SS 11. dropna(axis = 0, how = `any', thresh = None, subset = None, inplace = False)
.PP
\f[B]Parameters\f[R]
.PD 0
.P
.PD
\f[B]\f[BI]axis\f[B]\f[R]: It accepts an integer value that can be 0 or
1.
This parameter is used to determine whether rows or columns containing
missing values are to be removed.
(Default: 0)
.PD 0
.P
.PD
- 0 : Drop rows which contain missing values.
.PD 0
.P
.PD
- 1 : Drop columns which contain missing values.
.PP
\f[B]\f[BI]how\f[B]\f[R]: It accepts a string object to determine if row
or column is removed from DataFrame, when we have at least one `NaN' or
all `NaN'.
(Default: `any')
.PD 0
.P
.PD
- `any' : If any NaN values are present, drop that row or column.
.PD 0
.P
.PD
- `all' : If all values are NaN, drop that row or column.
.PP
\f[B]\f[BI]thresh\f[B]\f[R]: It accepts an integer as parameter which is
the number of NaN values required for rows/columns to be dropped.
(Default: None)
.PD 0
.P
.PD
\f[B]\f[BI]subset\f[B]\f[R]: It accepts a python ndarray.
It is the name of the labels along the other axis which is being
considered.
.PD 0
.P
.PD
For example, if you are dropping rows, then these would be a list of
columns.
(Default: None)
.PD 0
.P
.PD
\f[B]\f[BI]inplace\f[B]\f[R]: This parameter accepts a boolean value.
When it is set to True, then it performs operation on the original
Frovedis DataFrame object itself otherwise operation is performed on a
new Frovedis DataFrame object.
(Default: False)
.PP
\f[B]Purpose\f[R]
.PD 0
.P
.PD
It is used to remove missing values from the Frovedis DataFrame.
.PP
For example,
.IP
.nf
\f[C]
import pandas as pd
import frovedis.dataframe as fdf

# creating a pandas dataframe
pd_df = pd.DataFrame({\[dq]name\[dq]: [\[aq]Alfred\[aq], \[aq]Batman\[aq], \[aq]Catwoman\[aq]],
                   \[dq]toy\[dq]: [np.nan, \[aq]Batmobile\[aq], \[aq]Bullwhip\[aq]],
                   \[dq]born\[dq]: [np.nan, \[dq]1940-04-25\[dq], np.nan]})

# creating a frovedis dataframe from pandas dataframe
fd_df = fdf.DataFrame(pd_df)

# display frovedis dataframe
print(\[dq]Before dropping nan values\[dq])
fd_df.show()
\f[R]
.fi
.PP
Output
.IP
.nf
\f[C]
Before dropping nan values
index   name            toy             born
0       Alfred          NULL            NULL
1       Batman          Batmobile       1940-04-25
2       Catwoman        Bullwhip        NULL
\f[R]
.fi
.PP
For example,
.IP
.nf
\f[C]
# drop the rows where at least one element is missing.
print(\[dq]After dropping nan values\[dq])
fd_df.dropna().show()
\f[R]
.fi
.PP
Output
.IP
.nf
\f[C]
After dropping nan values
index   name    toy             born
1       Batman  Batmobile       1940-04-25
\f[R]
.fi
.PP
For example,
.IP
.nf
\f[C]
# display frovedis dataframe
print(\[dq]Before dropping nan values\[dq])
fd_df.show()

# drop the columns where at least one nan value is present
print(\[dq]After dropping nan values\[dq])
fd_df.dropna(axis=1)
\f[R]
.fi
.PP
Output
.IP
.nf
\f[C]
Before dropping nan values
index   name            toy             born
0       Alfred          NULL            NULL
1       Batman          Batmobile       1940-04-25
2       Catwoman        Bullwhip        NULL

After dropping nan values
index   name
0       Alfred
1       Batman
2       Catwoman
\f[R]
.fi
.PP
For example,
.IP
.nf
\f[C]
# display frovedis dataframe
print(\[dq]Before dropping nan values\[dq])
fd_df.show()

# drop the rows where all elements are missing (how=\[aq]all\[aq])
fd_df.dropna(how=\[aq]all\[aq]).show()
\f[R]
.fi
.PP
Output
.IP
.nf
\f[C]
Before dropping nan values
index   name            toy             born
0       NULL            NULL            NULL
1       Batman          Batmobile       1940-04-25
2       Catwoman        Bullwhip        NULL

index   name            toy             born
1       Batman          Batmobile       1940-04-25
2       Catwoman        Bullwhip        NULL
\f[R]
.fi
.PP
For example,
.IP
.nf
\f[C]
# display frovedis dataframe
print(\[dq]Before dropping nan values\[dq])
fd_df.show()

# example of using drop with parameter \[aq]thresh\[aq]
# dropna() demo with only rows with at least 2 non-NA values (thresh = 2) to keep
fd_df.dropna(thresh=2).show()
\f[R]
.fi
.PP
Output
.IP
.nf
\f[C]
Before dropping nan values
index   name            toy             born
0       Alfred          NULL            NULL
1       Batman          Batmobile       1940-04-25
2       Catwoman        Bullwhip        NULL

index   name            toy             born
1       Batman          Batmobile       1940-04-25
2       Catwoman        Bullwhip        NULL
\f[R]
.fi
.PP
\f[B]NOTE: Since row 0 had 2 NaN values, so it was dropped, but other
rows are not dropped.\f[R]
.PP
For example,
.IP
.nf
\f[C]
# display frovedis dataframe
print(\[dq]Before dropping nan values\[dq])
fd_df.show()

# to drop missing values only from specified columns
fd_df.dropna(subset=[1, 2], axis = 1).show()
\f[R]
.fi
.PP
Output
.IP
.nf
\f[C]
Before dropping nan values
index   name            toy             born
0       Alfred          NULL            NULL
1       Batman          Batmobile       1940-04-25
2       Catwoman        Bullwhip        NULL

index   name            toy
0       Alfred          NULL
1       Batman          Batmobile
2       Catwoman        Bullwhip
\f[R]
.fi
.PP
For example,
.IP
.nf
\f[C]
# display frovedis dataframe
print(\[dq]Before dropping nan values\[dq])
fd_df.show()

# dropna() demo with inplace = True
fd_df.dropna(inplace=True)
fd_df.show()
\f[R]
.fi
.PP
Output
.IP
.nf
\f[C]
Before dropping nan values
index   name            toy     born
0       Alfred          NULL    NULL
1       Batman          Batmobile       1940-04-25
2       Catwoman        Bullwhip        NULL

index   name    toy             born
1       Batman  Batmobile       1940-04-25
\f[R]
.fi
.PP
\f[B]Return Value\f[R]
.PD 0
.P
.PD
1.
If inplace = False, it returns a new Frovedis DataFrame with NA entries
dropped.
.PD 0
.P
.PD
2.
If inplace = True, it returns None.
.SS 12. drop_rows(targets, inplace = False)
.PP
\f[B]Parameters\f[R]
.PD 0
.P
.PD
\f[B]\f[BI]targets\f[B]\f[R]: It accepts a integer or string type as
parameter.
It is the name of the indices to drop from the dataframe.
.PD 0
.P
.PD
\f[B]\f[BI]inplace\f[B]\f[R]: It accepts a boolean as a parameter.
It return a copy of DataFrame instance by default but when explicitly
set to True, it performs operation on original DataFrame.
(Default: False)
.PP
\f[B]Purpose\f[R]
.PD 0
.P
.PD
It is used to drop specified rows.
.PP
For example,
.IP
.nf
\f[C]
import pandas as pd
import frovedis.dataframe as fdf

peopleDF = {
            \[aq]Ename\[aq] : [\[aq]Michael\[aq], \[aq]Andy\[aq], \[aq]Tanaka\[aq], \[aq]Raul\[aq], \[aq]Yuta\[aq]],
            \[aq]Age\[aq] : [29, 30, 27, 19, 31],
            \[aq]Country\[aq] : [\[aq]USA\[aq], \[aq]England\[aq], \[aq]Japan\[aq], \[aq]France\[aq], \[aq]Japan\[aq]],
            \[aq]isMale\[aq]: [False, False, False, False, True]
           }
# creating a pandas dataframe
pd_df = pd.DataFrame(peopleDF)

# creating a frovedis dataframe
fd_df = fdf.DataFrame(pd_df)

# display frovedis dataframe
fd_df.show()
\f[R]
.fi
.PP
Output
.IP
.nf
\f[C]
index   Ename   Age     Country isMale
0       Michael 29      USA     0
1       Andy    30      England 0
2       Tanaka  27      Japan   0
3       Raul    19      France  0
4       Yuta    31      Japan   1
\f[R]
.fi
.PP
For example,
.IP
.nf
\f[C]
# drop_rows(0 demo with index = 2
fd_df.drop_rows(2).show()

# No change in original dataframe
fd_df.show()
\f[R]
.fi
.PP
Output
.IP
.nf
\f[C]
index   Ename   Age     Country isMale
0       Michael 29      USA     0
1       Andy    30      England 0
3       Raul    19      France  0
4       Yuta    31      Japan   1

index   Ename   Age     Country isMale
0       Michael 29      USA     0
1       Andy    30      England 0
2       Tanaka  27      Japan   0
3       Raul    19      France  0
4       Yuta    31      Japan   1
\f[R]
.fi
.PP
For example,
.IP
.nf
\f[C]
# drop_row(0 demo when inplace = True
fd_df.drop_rows([2, 3], inplace = True)

# display the frovedis dataframe
fd_df.show()
\f[R]
.fi
.PP
Output
.IP
.nf
\f[C]
index   Ename   Age     Country isMale
0       Michael 29      USA     0
1       Andy    30      England 0
4       Yuta    31      Japan   1
\f[R]
.fi
.PP
\f[B]Return Value\f[R]
.PD 0
.P
.PD
1.
It returns a new of Frovedis DataFrame having remaining entries.
.PD 0
.P
.PD
2.
It returns None when parameter `inplace' = True.
.SS 13. fillna(value = None, method = None, axis = None, inplace = False, limit = None, downcast = None)
.PP
\f[B]Parameters\f[R]
.PD 0
.P
.PD
\f[B]\f[BI]value\f[B]\f[R]: It accepts a numeric type as parameter which
is used to replace all NA values (e.g.\ 0, NULL).
(Default: None)
.PD 0
.P
.PD
When it is None (not specified explicitly), it must be NaN value or
numeric, non-numeric value otherwise it will raise an exception.
.PD 0
.P
.PD
\f[B]\f[BI]method\f[B]\f[R]: This is an unused parameter.
(Default: None)
.PD 0
.P
.PD
\f[B]\f[BI]axis\f[B]\f[R]: It accepts an integer or string object as
parameter.
It decides the axis along which missing values will be filled.
(Default: None)
.PD 0
.P
.PD
- 0 or `index': Operation will be carried out on rows.
Currently only axis = 0 is supported in Frovedis DataFrame.
.PD 0
.P
.PD
\f[B]\f[BI]inplace\f[B]\f[R]: This parameter accepts a boolean value.
When it is set to True, then it performs operation on the original
Frovedis DataFrame object itself otherwise operation is performed on a
new Frovedis DataFrame object.
(Default: False)
.PD 0
.P
.PD
\f[B]\f[BI]limit\f[B]\f[R]: This is an unused parameter.
(Default: None)
.PD 0
.P
.PD
\f[B]\f[BI]downcast\f[B]\f[R]: This is an unused parameter.
(Default: None)
.PP
\f[B]Purpose\f[R]
.PD 0
.P
.PD
It replaces NA/NaN values with the specified value provided in `value'
parameter in the Frovedis DataFrame.
.PP
The parameters: \[lq]method\[rq], \[lq]limit\[rq] and \[lq]downcast\[rq]
are simply kept in to make the interface uniform to the pandas
DataFrame.fillna().
.PD 0
.P
.PD
This is not used anywhere within the frovedis implementation.
.PP
For example,
.IP
.nf
\f[C]
import pandas as pd
import frovedis.dataframe as fdf

# creating a pandas dataframe
pd_df = pd.DataFrame([[np.nan, 2, np.nan, 0],
                   [3, 4, np.nan, 1],
                   [np.nan, np.nan, np.nan, 5],
                   [np.nan, 3, np.nan, 4]],
                  columns=list(\[dq]ABCD\[dq]))

# creating a frovedis dataframe
fd_df = fdf.DataFrame(pd_df)

# display frovedis dataframe
fd_df.show()
\f[R]
.fi
.PP
Output
.IP
.nf
\f[C]
index   A       B       C       D
0       NULL    2       NULL    0
1       3       4       NULL    1
2       NULL    NULL    NULL    5
3       NULL    3       NULL    4
\f[R]
.fi
.PP
For example,
.IP
.nf
\f[C]
# fillna() demo where NaN will be repaced with 0
fd_df.fillna(0).show()
\f[R]
.fi
.PP
Output
.IP
.nf
\f[C]
index   A       B       C       D
0       0       2       0       0
1       3       4       0       1
2       0       0       0       5
3       0       3       0       4
\f[R]
.fi
.PP
For example,
.IP
.nf
\f[C]
# replace all NaN elements with -1s and inplace = True
fd_df.fillna(-1, inplace = True)

# display after modifying the original object
fd_df.show()
\f[R]
.fi
.PP
Output
.IP
.nf
\f[C]
index   A       B       C       D
0       NULL    2       NULL    0
1       3       4       NULL    1
2       NULL    NULL    NULL    5
3       NULL    3       NULL    4

index   A       B       C       D
0       -1      2       -1      0
1       3       4       -1      1
2       -1      -1      -1      5
3       -1      3       -1      4
\f[R]
.fi
.PP
\f[B]Return Value\f[R]
.PD 0
.P
.PD
1.
It returns a Frovedis DataFrame object with missing values replaced when
`inplace' parameter is False.
.PD 0
.P
.PD
2.
It returns None when `inplace' parameter is set to True.
.SS 14. filter(items = None, like = None, regex = None, axis = None)
.PP
\f[B]Parameters\f[R]
.PD 0
.P
.PD
\f[B]\f[BI]items\f[B]\f[R]: It accepts a list of string as parameter.
It filters only those labels which are mentioned.
(Default: None)
.PD 0
.P
.PD
When it is None (not specified explicitly), `like' or `regex' must be
provided.
.PD 0
.P
.PD
\f[B]\f[BI]like\f[B]\f[R]: It accepts a string object parameter.
It keeps the column labels if `like in label == True'.
(Default: None)
.PD 0
.P
.PD
When it is None (not specified explicitly), `items' or `regex' must be
provided.
.PD 0
.P
.PD
\f[B]\f[BI]regex\f[B]\f[R]: It accepts a regular expression as a string
parameter.
It keeps the column labels if `re.search(regex, label) == True'.
(Default: None)
.PD 0
.P
.PD
When it is None (not specified explicitly), `items' or `like' must be
provided.
.PD 0
.P
.PD
\f[B]\f[BI]axis\f[B]\f[R]: It accepts an integer or string type
parameter.
It specifies the axis on which filter operation will be performed.
(Default: None)
.PD 0
.P
.PD
- 0 or `index' : The corresponding index labels will be filtered.
Currently this is not supported in Frovedis.
.PD 0
.P
.PD
- 1 or `columns': The corresponding columns labels will be filtered.
.PP
When it is None (not specified explicitly), it will filter along axis =
1 or `columns'.
.PP
\f[B]Purpose\f[R]
.PD 0
.P
.PD
It is used to filter the DataFrame according to the specified column
labels.
.PP
For example,
.IP
.nf
\f[C]
import pandas as pd
import frovedis.dataframe as fdf

pd_df = pd.DataFrame(np.array(([1, 2, 3], [4, 5, 6])),
                  index=[\[aq]mouse\[aq], \[aq]rabbit\[aq]],
                  columns=[\[aq]one\[aq], \[aq]two\[aq], \[aq]three\[aq]])
fd_df = fdf.DataFrame(pd_df)

# display the frovedis dataframe
fd_df.show()
\f[R]
.fi
.PP
Output
.IP
.nf
\f[C]
index   one     two     three
mouse   1       2       3
rabbit  4       5       6
\f[R]
.fi
.PP
For example,
.IP
.nf
\f[C]
# filter(0 demo with items parameter
# select columns by name
fd_df.filter(items = [\[aq]one\[aq], \[aq]three\[aq]]).show()
\f[R]
.fi
.PP
Output
.IP
.nf
\f[C]
index   one     three
mouse   1       3
rabbit  4       6
\f[R]
.fi
.PP
For example,
.IP
.nf
\f[C]
# select columns by regular expression
# will display only those columns whose label ends with \[aq]e\[aq]
fd_df.filter(regex=\[aq]e$\[aq], axis=1).show()
\f[R]
.fi
.PP
Output
.IP
.nf
\f[C]
index   one     three
mouse   1       3
rabbit  4       6
\f[R]
.fi
.PP
For example,
.IP
.nf
\f[C]
# select column containing \[aq]hre\[aq]
fd_df.filter(like=\[aq]hre\[aq], axis=1)
\f[R]
.fi
.PP
Output
.IP
.nf
\f[C]
index   three
mouse   3
rabbit  6
\f[R]
.fi
.PP
\f[B]Return Value\f[R]
.PD 0
.P
.PD
It returns a new Frovedis DataFrame instance with the column labels that
matches the given conditions.
.SS 15. get_index_loc(value)
.PP
\f[B]Parameters\f[R]
.PD 0
.P
.PD
\f[B]\f[BI]value\f[B]\f[R]: It accepts an integer or string parameter.
It is the index value whose location is to be determined.
.PP
\f[B]Purpose\f[R]
.PD 0
.P
.PD
It provides integer location, slice or boolean mask for requested label.
.PP
\f[B]It is present only in frovedis\f[R].
.PP
For example,
.IP
.nf
\f[C]
import pandas as pd
import frovedis.dataframe as fdf

peopleDF = {
            \[aq]Ename\[aq] : [\[aq]Michael\[aq], \[aq]Andy\[aq], \[aq]Tanaka\[aq], \[aq]Raul\[aq], \[aq]Yuta\[aq]],
            \[aq]Age\[aq] : [29, 30, 27, 19, 31],
            \[aq]Country\[aq] : [\[aq]USA\[aq], \[aq]England\[aq], \[aq]Japan\[aq], \[aq]France\[aq], \[aq]Japan\[aq]],
            \[aq]isMale\[aq]: [False, False, False, False, True]
           }
pd_df = pd.DataFrame(peopleDF)
pd_df.index = [\[aq]a\[aq], \[aq]b\[aq], \[aq]c\[aq], \[aq]d\[aq], \[aq]e\[aq]]
fd_df = fdf.DataFrame(pd_df)

# display frovedis dataframe
fd_df.show()
\f[R]
.fi
.PP
Output
.IP
.nf
\f[C]
index   Ename   Age     Country isMale
a       Michael 29      USA     0
b       Andy    30      England 0
c       Tanaka  27      Japan   0
d       Raul    19      France  0
e       Yuta    31      Japan   1
\f[R]
.fi
.PP
For example,
.IP
.nf
\f[C]
# get_index_loc() demo when there are unique index
# getting index location of \[aq]d\[aq] index value
fd_df.get_index_loc(\[aq]d\[aq]).show()
\f[R]
.fi
.PP
Output
.IP
.nf
\f[C]
3
\f[R]
.fi
.PP
For example,
.IP
.nf
\f[C]
import pandas as pd
import frovedis.dataframe as fdf

peopleDF = {
            \[aq]Ename\[aq] : [\[aq]Michael\[aq], \[aq]Andy\[aq], \[aq]Tanaka\[aq], \[aq]Raul\[aq], \[aq]Yuta\[aq]],
            \[aq]Age\[aq] : [29, 30, 27, 19, 31],
            \[aq]Country\[aq] : [\[aq]USA\[aq], \[aq]England\[aq], \[aq]Japan\[aq], \[aq]France\[aq], \[aq]Japan\[aq]],
            \[aq]isMale\[aq]: [False, False, False, False, True]
           }
# creating a pandas dataframe
pd_df = pd.DataFrame(peopleDF)
pd_df.index = [\[aq]a\[aq], \[aq]a\[aq], \[aq]d\[aq], \[aq]d\[aq], \[aq]e\[aq]]

# creating a frovedis dataframe
fd_df = fdf.DataFrame(pd_df)

# display a frovedis dataframe
fd_df.show()
\f[R]
.fi
.PP
Output
.IP
.nf
\f[C]
index   Ename   Age     Country isMale
a       Michael 29      USA     0
a       Andy    30      England 0
d       Tanaka  27      Japan   0
d       Raul    19      France  0
e       Yuta    31      Japan   1
\f[R]
.fi
.PP
For example,
.IP
.nf
\f[C]
# get_index_loc(0 demo when there are duplicate index but consecutively
# getting index location of \[aq]d\[aq] index value
fd_df.get_index_loc(\[aq]d\[aq]).show()
\f[R]
.fi
.PP
Output
.IP
.nf
\f[C]
slice(2, 4, None)
\f[R]
.fi
.PP
For example,
.IP
.nf
\f[C]
import pandas as pd
import frovedis.dataframe as fdf

peopleDF = {
            \[aq]Ename\[aq] : [\[aq]Michael\[aq], \[aq]Andy\[aq], \[aq]Tanaka\[aq], \[aq]Raul\[aq], \[aq]Yuta\[aq]],
            \[aq]Age\[aq] : [29, 30, 27, 19, 31],
            \[aq]Country\[aq] : [\[aq]USA\[aq], \[aq]England\[aq], \[aq]Japan\[aq], \[aq]France\[aq], \[aq]Japan\[aq]],
            \[aq]isMale\[aq]: [False, False, False, False, True]
           }
# creating a pandas dataframe
pd_df = pd.DataFrame(peopleDF)   
pd_df.index = [\[aq]a\[aq], \[aq]b\[aq], \[aq]c\[aq], \[aq]d\[aq], \[aq]a\[aq]]

# creating a frovedis dataframe
fd_df = fdf.DataFrame(pd_df)

# display a frovedis dataframe
fd_df.show()
\f[R]
.fi
.PP
Output
.IP
.nf
\f[C]
index   Ename   Age     Country isMale
a       Michael 29      USA     0
b       Andy    30      England 0
c       Tanaka  27      Japan   0
d       Raul    19      France  0
a       Yuta    31      Japan   1
\f[R]
.fi
.PP
For example,
.IP
.nf
\f[C]
# get_index_loc() demo when there are duplicate index but randomly
# getting index location of \[aq]a\[aq] index value
fd_df.get_index_loc(\[aq]a\[aq]).show()
\f[R]
.fi
.PP
Output
.IP
.nf
\f[C]
[ True False False False  True]
\f[R]
.fi
.PP
\f[B]Return Value\f[R]
.PD 0
.P
.PD
It returns the following values:
.PD 0
.P
.PD
1.
\f[B]integer:\f[R] when there is a unique index.
.PD 0
.P
.PD
2.
\f[B]slice:\f[R] when there is a monotonic index i.e.\ repetitive values
in index.
.PD 0
.P
.PD
3.
\f[B]mask:\f[R] it returns a list of boolean values.
.SS 16. head(n = 5)
.PP
\f[B]Parameters\f[R]
.PD 0
.P
.PD
\f[B]\f[BI]n\f[B]\f[R]: It accepts an integer parameter which represents
the number of rows to select.
(Default: 5)
.PP
\f[B]Purpose\f[R]
.PD 0
.P
.PD
This function returns the first n rows for the object based on position.
It is useful for quickly testing if your object has the right type of
data in it.
.PP
\f[B]For negative values of n, this function returns all rows except the
last n rows, equivalent to df[:-n]\f[R].
.PP
For example,
.IP
.nf
\f[C]
import pandas as pd
import frovedis.dataframe as fdf

# creating the dataframe    
pd_df = pd.DataFrame({\[aq]animal\[aq]: [\[aq]alligator\[aq], \[aq]bee\[aq], \[aq]falcon\[aq], \[aq]lion\[aq],
                      \[aq]monkey\[aq], \[aq]parrot\[aq], \[aq]shark\[aq], \[aq]whale\[aq], \[aq]zebra\[aq]]
                     })

#creating frovedis dataframe
fd_df = fdf.DataFrame(pd_df)

# display frovedis dataframe
fd_df.show()
\f[R]
.fi
.PP
Output
.IP
.nf
\f[C]
index   animal
0       alligator
1       bee
2       falcon
3       lion
4       monkey
5       parrot
6       shark
7       whale
8       zebra
\f[R]
.fi
.PP
For example,
.IP
.nf
\f[C]
# head() demo with default n value
fd_df.head().show()
\f[R]
.fi
.PP
Output
.IP
.nf
\f[C]
index   animal
0       alligator
1       bee
2       falcon
3       lion
4       monkey 
\f[R]
.fi
.PP
For example,
.IP
.nf
\f[C]
# head() demo with n = 2
fd_df.head(2).show()
\f[R]
.fi
.PP
Output
.IP
.nf
\f[C]
index   animal
0       alligator
1       bee
\f[R]
.fi
.PP
For example,
.IP
.nf
\f[C]
# head() demo with n = -3
fd_df.head(-3).show()
\f[R]
.fi
.PP
Output
.IP
.nf
\f[C]
index   animal
0       alligator
1       bee
2       falcon
3       lion
4       monkey
5       parrot
\f[R]
.fi
.PP
\f[B]Return Value\f[R]
.PD 0
.P
.PD
1.
It n is positive integer, it returns a new DataFrame with the first n
rows.
.PD 0
.P
.PD
2.
If n is negative integer, it returns a new DataFrame with all rows
except last n rows.
.SS 17. insert(loc, column, value, allow_duplicates = False)
.PP
\f[B]Parameters\f[R]
.PD 0
.P
.PD
\f[B]\f[BI]loc\f[B]\f[R]: It accepts an integer as parameter which
represents the Insertion index.
It must be in range \f[B](0, n - 1)\f[R] where \f[B]n\f[R] is number of
columns in dataframe.
.PD 0
.P
.PD
\f[B]\f[BI]column\f[B]\f[R]: It accepts a string object as parameter.
It is the label of the inserted column.
.PD 0
.P
.PD
\f[B]\f[BI]value\f[B]\f[R]: It accepts an integer or a pandas Series
instance or python ndarray as parameter.
These are the values to be inserted in the specified `column'.
.PD 0
.P
.PD
\f[B]\f[BI]allow_duplicates\f[B]\f[R]: It accepts a boolean value as
parameter.
Currently, frovedis does not support duplicate column names.
(Default: False)
.PP
\f[B]Purpose\f[R]
.PD 0
.P
.PD
It is used to insert column into DataFrame at specified location.
.PP
For example,
.IP
.nf
\f[C]
import pandas as pd
import frovedis.dataframe as fdf

pd_df = pd.DataFrame({\[aq]col1\[aq]: [1, 2], \[aq]col2\[aq]: [3, 4]})
fd_df = fdf.DataFrame(pd_df)
fd_df.show()
\f[R]
.fi
.PP
Output
.IP
.nf
\f[C]
index   col1    col2
0       1       3
1       2       4
\f[R]
.fi
.PP
For example,
.IP
.nf
\f[C]
# inserting \[dq]newcol\[dq] as position 1 with values [99, 99]
fd_df.insert(1, \[dq]newcol\[dq], [99, 99])

# display frovedis dataframe after insertion
fd_df.show()
\f[R]
.fi
.PP
Output
.IP
.nf
\f[C]
index   col1    newcol  col2
0       1       99      3
1       2       99      4
\f[R]
.fi
.PP
For example,
.IP
.nf
\f[C]
# insert() demo with Series object having values [5,6] in \[dq]col0\[dq] at 0th position 
fd_df.insert(0, \[dq]col0\[dq], pd.Series([5, 6])).show()
\f[R]
.fi
.PP
Output
.IP
.nf
\f[C]
index   col0    col1    col2
0       5       1       3
1       6       2       4
\f[R]
.fi
.PP
\f[B]Return Value\f[R]
.PD 0
.P
.PD
It returns a self reference.
.SS 18. isna()
.PP
\f[B]Purpose\f[R]
.PD 0
.P
.PD
This method is used to detect missing values in the frovedis dataframe.
.PP
It returns a boolean same-sized object indicating if the values are NA.
NA values, such as None or numpy.NaN, gets mapped to True values.
Everything else gets mapped to False values.
Characters such as empty strings \[cq]\[cq] or numpy.inf are not
considered NA values.
.PP
For example,
.IP
.nf
\f[C]
import pandas as pd
import frovedis.dataframe as fdf

# show which entries in a DataFrame are NA.
peopleDF = {
        \[aq]Ename\[aq] : [\[aq]Michael\[aq], None, \[aq]Tanaka\[aq], \[aq]Raul\[aq], \[aq]\[aq]],
        \[aq]Age\[aq] : [29, 30, 27, 19, 0],
        \[aq]Country\[aq] : [\[aq]USA\[aq], np.inf, \[aq]Japan\[aq], np.nan, \[aq]Japan\[aq]],
        \[aq]isMale\[aq]: [False, False, False, False, True]
       }

# creating a pandas dataframe
pd_df = pd.DataFrame(peopleDF)

# creating a frovedis dataframe
fd_df = fdf.DataFrame(pd_df)

# to display frovedis dataframe
fd_df.show()
\f[R]
.fi
.PP
Output
.IP
.nf
\f[C]
index   Ename   Age     Country isMale
0       Michael 29      USA     0
1       NULL    30      inf     0
2       Tanaka  27      Japan   0
3       Raul    19      NULL    0
4               0       Japan   1
\f[R]
.fi
.PP
For example,
.IP
.nf
\f[C]
# isna() demo to display fields which are only NA    
fd_df.isna().show()
\f[R]
.fi
.PP
Output
.IP
.nf
\f[C]
index   Ename   Age     Country isMale
0       0       0       0       0
1       1       0       0       0
2       0       0       0       0
3       0       0       1       0
4       0       0       0       0
\f[R]
.fi
.PP
For example,
.IP
.nf
\f[C]
import pandas as pd
import frovedis.dataframe as fdf

# frovedis dataframe from a Series object.
ser = pd.Series([5, 6, np.NaN])

# creating a frovedis dataframe
fd_df = fdf.DataFrame(ser)

# display frovedis dataframe
fd_df.show()
\f[R]
.fi
.PP
Output
.IP
.nf
\f[C]
index   0
0       5
1       6
2       NULL
\f[R]
.fi
.PP
For example,
.IP
.nf
\f[C]
# isna() demo to display na values mapped to corresponding dataframe
fd_df.isna().show()
\f[R]
.fi
.PP
Output
.IP
.nf
\f[C]
index   0
0       0
1       0
2       1
\f[R]
.fi
.PP
\f[B]Return Value\f[R]
.PD 0
.P
.PD
It returns a new Frovedis DataFrame having all boolean values (0, 1)
corresponding to each of the Frovedis DataFrame values depending on
whether it is a valid NaN (True i.e.\ 1) value or not (False i.e.\ 0).
.SS 19. isnull()
.PP
\f[B]Purpose\f[R]
.PD 0
.P
.PD
This method is used to detect missing values in the frovedis dataframe.
It is an alias of isna().
.PP
It returns a boolean same-sized object indicating if the values are NA.
NA values, such as None or numpy.NaN, gets mapped to True values.
Everything else gets mapped to False values.
Characters such as empty strings \[cq]\[cq] or numpy.inf are not
considered NA values.
.PP
For example,
.IP
.nf
\f[C]
import pandas as pd
import frovedis.dataframe as fdf

# show which entries in a DataFrame are NA.
peopleDF = {
            \[aq]Ename\[aq] : [\[aq]Michael\[aq], None, \[aq]Tanaka\[aq], \[aq]Raul\[aq], \[aq]\[aq]],
            \[aq]Age\[aq] : [29, 30, 27, 19, 0],
            \[aq]Country\[aq] : [\[aq]USA\[aq], \[aq]England\[aq], \[aq]Japan\[aq], np.nan, \[aq]Japan\[aq]],
            \[aq]isMale\[aq]: [False, False, False, False, True]
           }
           
# creating a pandas dataframe
pd_df = pd.DataFrame(peopleDF)

# convert to frovedis dataframe
fd_df = fdf.DataFrame(pd_df)

# display frovedis dataframe
fd_df.show()
\f[R]
.fi
.PP
Output
.IP
.nf
\f[C]
index   Ename   Age     Country isMale
0       Michael 29      USA     0
1       NULL    30      England 0
2       Tanaka  27      Japan   0
3       Raul    19      NULL    0
4               0       Japan   1
\f[R]
.fi
.PP
For example,
.IP
.nf
\f[C]
# isnull() demo
fd_df.isnull().show()
\f[R]
.fi
.PP
Output
.IP
.nf
\f[C]
index   Ename   Age     Country isMale
0       0       0       0       0
1       1       0       0       0
2       0       0       0       0
3       0       0       1       0
4       0       0       0       0
\f[R]
.fi
.PP
For example,
.IP
.nf
\f[C]
import pandas as pd
import frovedis.dataframe as fdf

# frovedis dataframe from a Series object.
ser = pd.Series([5, 6, np.NaN])

# creating a frovedis dataframe
fd_df = fdf.DataFrame(ser)

# display frovedis dataframe
fd_df.show()
\f[R]
.fi
.PP
Output
.IP
.nf
\f[C]
index   0
0       5
1       6
2       NULL
\f[R]
.fi
.PP
For example,
.IP
.nf
\f[C]
# isnull() demo on a frovedis dataframe converted from Series object
fd_df.isnull().show()
\f[R]
.fi
.PP
Output
.IP
.nf
\f[C]
index   0
0       0
1       0
2       1
\f[R]
.fi
.PP
\f[B]Return Value\f[R]
.PD 0
.P
.PD
It returns a Frovedis DataFrame having boolean values (0, 1)
corresponding to each of the Frovedis DataFrame value depending of
whether it is a valid NaN (True i.e.\ 1) value or not (False i.e.\ 0).
.SS 20. join(right, on, how = `inner', lsuffix = `_left', rsuffix = `_right', sort = False, join_type = `bcast')
.PP
\f[B]Parameters\f[R]
.PD 0
.P
.PD
\f[B]\f[BI]right\f[B]\f[R]: It accepts a Frovedis DataFrame instance or
a pandas DataFrame instance or a list of DataFrame instances as
parameter.
Index should be similar to one of the columns in this one.
If a pandas Series instance is passed, its name attribute must be set,
and that will be used as the column name in the resulting joined
dataframe.
.PD 0
.P
.PD
\f[B]\f[BI]on\f[B]\f[R]: It accepts a string object or a list of strings
as parameter.
It is the column or index name(s) in the caller to join on the index in
other, otherwise joins index-on-index.
\f[B]This parameter must be provided.
It can not be None.\f[R]
.PD 0
.P
.PD
\f[B]\f[BI]how\f[B]\f[R]: It accepts a string object as parameter that
specifies how to handle the operation of the two dataframes.
(Default: `inner')
.PD 0
.P
.PD
1.
\f[B]`left'\f[R]: form union of calling dataframe\[cq]s index (or column
if `on' is specified) with other dataframe\[cq]s index, and sort it
lexicographically.
.PD 0
.P
.PD
2.
\f[B]`inner'\f[R]: form intersection of calling dataframe\[cq]s index
(or column if `on' is specified) with other dataframe\[cq]s index,
preserving the order of the calling\[cq]s one.
.PP
\f[B]\f[BI]lsuffix\f[B]\f[R]: It accepts a string object as parameter.
It adds the suffix to left DataFrame\[cq]s overlapping columns.
(Default: `_left')
.PD 0
.P
.PD
\f[B]\f[BI]rsuffix\f[B]\f[R]: It accepts a string object as parameter.
It adds the suffix to right DataFrame\[cq]s overlapping columns.
(Default: `_right')
.PD 0
.P
.PD
\f[B]\f[BI]sort\f[B]\f[R]: It accepts a boolean type value.
It orders resultant dataframe lexicographically by the join key.
If False, the order of the join key depends on the join type (`how'
keyword).
(Default: False)
.PD 0
.P
.PD
\f[B]\f[BI]join_type\f[B]\f[R]: It accepts a string type object as
parameter.
It represents the type of join to be used internally.
It can be specified as `bcast' for broadcast join or `hash' for hash
join.
(Default: `bcast')
.PP
\f[B]Purpose\f[R]
.PD 0
.P
.PD
It joins columns of another dataframe.
.PP
It joins columns with other dataframe either on index or on a key
column.
Efficiently join multiple DataFrame instances by index at once by
passing a list.
.PP
\f[B]Note:- Parameters `on', `lsuffix', and `rsuffix' are not supported
when passing a list of DataFrame instances.\f[R]
.PP
For example,
.IP
.nf
\f[C]
import pandas as pd
import frovedis.dataframe as fdf

# creating a pandas dataframe
pd_df1 = pd.DataFrame({\[aq]key\[aq]: [\[aq]K0\[aq], \[aq]K1\[aq], \[aq]K2\[aq], \[aq]K3\[aq], \[aq]K4\[aq], \[aq]K5\[aq]],
                       \[aq]A\[aq]: [\[aq]A0\[aq], \[aq]A1\[aq], \[aq]A2\[aq], \[aq]A3\[aq], \[aq]A4\[aq], \[aq]A5\[aq]]})

# creating a frovedis dataframe
fd_df1 = fdf.DataFrame(pd_df1)

# display frovedis dataframe
fd_df1.show()

# creating another pandas dataframe
pd_df2 = pd.DataFrame({\[aq]key\[aq]: [\[aq]K0\[aq], \[aq]K1\[aq], \[aq]K2\[aq]],
                      \[aq]B\[aq]: [\[aq]B0\[aq], \[aq]B1\[aq], \[aq]B2\[aq]]})

# creating another frovedis dataframe
fd_df2 = fdf.DataFrame(pd_df2)

# display other frovedis dataframe
fd_df2.show()
\f[R]
.fi
.PP
Output
.IP
.nf
\f[C]
index   key     A
0       K0      A0
1       K1      A1
2       K2      A2
3       K3      A3
4       K4      A4
5       K5      A5

index   key     B
0       K0      B0
1       K1      B1
2       K2      B2
\f[R]
.fi
.PP
For example,
.IP
.nf
\f[C]
# join() demo with lsuffix, rsuffix and index parameters
fd_df1.join(fd_df2, \[aq]index\[aq], lsuffix = \[aq]_caller\[aq], rsuffix = \[aq]_other\[aq]).show()
\f[R]
.fi
.PP
Output
.IP
.nf
\f[C]
index   key_caller      A       key_other       B
0       K0              A0      K0              B0
1       K1              A1      K1              B1
2       K2              A2      K2              B2
\f[R]
.fi
.PP
For example,
.IP
.nf
\f[C]
# join() demo using the \[aq]key\[aq] columns,
# \[aq]key\[aq] to be available in both fd_df1 and fd_df2
fd_df1.join(fd_df2, on = \[aq]key\[aq]).show()
\f[R]
.fi
.PP
Output
.IP
.nf
\f[C]
index   key     A       B
0       K0      A0      B0
1       K1      A1      B1
2       K2      A2      B2
\f[R]
.fi
.PP
For example,
.IP
.nf
\f[C]
# join(0 demo with parameter how = \[aq]left\[aq]
fd_df1.join(fd_df2, \[aq]key\[aq], how = \[aq]left\[aq]).show()
\f[R]
.fi
.PP
Output,
.IP
.nf
\f[C]
index   key     A       B
0       K0      A0      B0
1       K1      A1      B1
2       K2      A2      B2
3       K3      A3      NULL
4       K4      A4      NULL
5       K5      A5      NULL
\f[R]
.fi
.PP
\f[B]Return Value\f[R]
.PD 0
.P
.PD
It returns a new Frovedis DataFrame containing columns from both the
DataFrame instances.
.SS 21. merge(right, on = None, how = `inner', left_on = None, right_on = None, left_index = False, right_index = False, sort = False, suffixes = (`_x', `_y'), copy = True, indicator = False, join_type = `bcast')
.PP
\f[B]Parameters\f[R]
.PD 0
.P
.PD
\f[B]\f[BI]right\f[B]\f[R]: It accepts a Frovedis DataFrame instance or
a pandas DataFrame instance or a list of Frovedis DataFrame instances as
parameter.
Index should be similar to one of the columns in this one.
If a panads Series instance is passed, its name attribute must be set,
and that will be used as the column name in the resulting joined
dataframe.
.PD 0
.P
.PD
\f[B]\f[BI]on\f[B]\f[R]: It accepts a string object or a list of strings
as parameter.
It is the column or index level names to join on.
These must be present in both dataframes.
(Default: None)
.PD 0
.P
.PD
When it is None and not merging on indexes then this defaults to the
intersection of the columns in both dataframes.
.PD 0
.P
.PD
\f[B]\f[BI]how\f[B]\f[R]: It accepts a string object as parameter.
It informs the type of merge operation on the two objects.
(Default: `inner')
.PD 0
.P
.PD
1.
\f[B]`left'\f[R]: form union of calling dataframe\[cq]s index (or column
if `on' is specified) with other\[cq]s index and sort it
lexicographically.
.PD 0
.P
.PD
2.
\f[B]`inner'\f[R]: form intersection of calling dataframe\[cq]s index
(or column if `on' is specified) with other\[cq]s index, preserving the
order of the calling\[cq]s one.
.PP
\f[B]\f[BI]left_on\f[B]\f[R]: It accepts a string object or a list of
strings as parameter.
It represents column names to join on in the left dataframe.
It can also be an array or list of arrays of the length of the left
dataframe.
These arrays are treated as if they are columns.
(Default: None)
.PD 0
.P
.PD
\f[B]\f[BI]right_on\f[B]\f[R]: It accepts a string object or a list of
strings as parameter.
It represents column names to join on in the right dataframe.
It can also be an array or list of arrays of the length of the right
dataframe.
These arrays are treated as if they are columns.
(Default: None)
.PD 0
.P
.PD
\f[B]\f[BI]left_index\f[B]\f[R]: It accepts a boolean value as
parameter.
It is used to specify whether to use the index from the left dataframe
as the join key.
\f[B]Either parameter `left_on' or `left_index' can be used, but not
combination of both.\f[R] (Default: False)
.PD 0
.P
.PD
\f[B]\f[BI]right_index\f[B]\f[R]: It accepts a boolean value as
parameter.
It is used to specify whether to use the index from the right dataframe
as the join key.
\f[B]Either parameter `right_on' or `right_index' can be used, but not
combination of both.\f[R] (Default: False)
.PD 0
.P
.PD
\f[B]\f[BI]sort\f[B]\f[R]: It accepts a boolean value.
When this is explicitly set to True, it sorts the join keys
lexicographically in the resultant dataframe.
When it is False, the order of the join keys depends on the join type
(`how' parameter).
(Default: False)
.PD 0
.P
.PD
\f[B]\f[BI]suffixes\f[B]\f[R]: It accepts a list like (list or tuple)
object of strings of length two as parameter.
It indicates the suffix to be added to the overlapping column names in
left and right respectively.
Need to explicitly pass a value of None instead of a string to indicate
that the column name from left or right should be left as-it is, with no
suffix.
At least one of the values must not be None.
(Default: (\[lq]_x\[rq], \[lq]_y\[rq]))
.PP
\f[B]Note:- During merging two DataFrames, the overlapping column names
should be different.
For example: suffixes = (False, False), then the overlapping columns
would have the same name so merging operation will fail.
Also when there is no overlapping column, then this parameter is ignored
automatically.\f[R]
.PP
\f[B]\f[BI]copy\f[B]\f[R]: It is an unused parameter.
(Default: True)
.PD 0
.P
.PD
\f[B]\f[BI]indicator\f[B]\f[R]: It is an unused parameter.
(Default: False)
.PD 0
.P
.PD
\f[B]\f[BI]join_type\f[B]\f[R]: It accepts a string type object as
parameter.
It represents the type of join to be used internally.
It can be specified as `bcast' for broadcast join or `hash' for hash
join.
(Default: `bcast')
.PP
\f[B]Purpose\f[R]
.PD 0
.P
.PD
It is a utility to merge dataframe objects with a database-style join.
.PP
The join is done on columns or indexes.
If joining columns on columns, the DataFrame indexes will be ignored.
Otherwise if joining indexes on indexes or indexes on a column or
columns, the index will be passed on.
.PP
For example,
.IP
.nf
\f[C]
import pandas as pd
import frovedis.dataframe as fdf

# creating a pandas dataframe
pd_df1 = pd.DataFrame({\[aq]lkey\[aq]: [\[aq]foo\[aq], \[aq]bar\[aq], \[aq]baz\[aq], \[aq]foo\[aq]],
                    \[aq]value\[aq]: [1, 2, 3, 5]})

# creating another pandas dataframe
pd_df2 = pd.DataFrame({\[aq]rkey\[aq]: [\[aq]foo\[aq], \[aq]bar\[aq], \[aq]baz\[aq], \[aq]foo\[aq]],
                    \[aq]value\[aq]: [5, 6, 7, 8]})

# creating a frovedis dataframe
fd_df1 = fdf.DataFrame(pd_df1)

# display frovedis dataframe
fd_df1.show()

# creating another frovedis dataframe
fd_df2 = fdf.DataFrame(pd_df2)

# display other frovedis dataframe
fd_df2.show()
\f[R]
.fi
.PP
Output
.IP
.nf
\f[C]
index   lkey    value
0       foo     1
1       bar     2
2       baz     3
3       foo     5

index   rkey    value
0       foo     5
1       bar     6
2       baz     7
3       foo     8
\f[R]
.fi
.PP
For example,
.IP
.nf
\f[C]
# merge() demo with parameters left_on and right_on
fd_df1.merge(fd_df2, left_on = \[aq]lkey\[aq], right_on = \[aq]rkey\[aq]).show()
\f[R]
.fi
.PP
Output
.IP
.nf
\f[C]
index   lkey    value_x rkey    value_y
0       foo     1       foo     8
1       foo     1       foo     5
2       bar     2       bar     6
3       baz     3       baz     7
4       foo     5       foo     8
5       foo     5       foo     5
\f[R]
.fi
.PP
For example,
.IP
.nf
\f[C]
# merge() demo with parameters left_on , right_on and suffixes
fd_df1.merge(fd_df2, left_on = \[aq]lkey\[aq], right_on = \[aq]rkey\[aq], suffixes = (\[aq]_left\[aq], \[aq]_right\[aq])).show()
\f[R]
.fi
.PP
Output
.IP
.nf
\f[C]
index   lkey    value_left      rkey    value_right
0       foo     1               foo     8
1       foo     1               foo     5
2       bar     2               bar     6
3       baz     3               baz     7
4       foo     5               foo     8
5       foo     5               foo     5
\f[R]
.fi
.PP
For example,
.IP
.nf
\f[C]
import pandas as pd
import frovedis.dataframe as fdf

# creating a pandas dataframe
pd_df1 = pd.DataFrame({\[aq]lkey\[aq]: [\[aq]foo\[aq], \[aq]bar\[aq], \[aq]baz\[aq], \[aq]foo\[aq]],
                    \[aq]left_value\[aq]: [1, 2, 3, 5]})

# creating another pandas dataframe
pd_df2 = pd.DataFrame({\[aq]rkey\[aq]: [\[aq]foo\[aq], \[aq]bar\[aq], \[aq]baz\[aq], \[aq]foo\[aq]],
                    \[aq]right_value\[aq]: [5, 6, 7, 8]})

# creating a frovedis dataframe
fd_df1 = fdf.DataFrame(pd_df1)

# display a frovedis dataframe
fd_df1.show()

# creating another frovedis dataframe
fd_df2 = fdf.DataFrame(pd_df2)

# display other frovedis dataframe
fd_df2.show()     
\f[R]
.fi
.PP
Output
.IP
.nf
\f[C]
index   lkey    left_value
0       foo     1
1       bar     2
2       baz     3
3       foo     5

index   rkey    right_value
0       foo     5
1       bar     6
2       baz     7
3       foo     8
\f[R]
.fi
.PP
For example,
.IP
.nf
\f[C]
# merge(0 demo with same suffixes on \[aq]lkey\[aq] and \[aq]rkey\[aq]
fd_df1.merge(fd_df2, left_on = \[aq]lkey\[aq], right_on = \[aq]rkey\[aq], suffixes = (\[aq]_test\[aq], \[aq]_test\[aq])).show()
\f[R]
.fi
.PP
Output
.IP
.nf
\f[C]
index   lkey    left_value      rkey    right_value
0       foo     1               foo     8
1       foo     1               foo     5
2       bar     2               bar     6
3       baz     3               baz     7
4       foo     5               foo     8
5       foo     5               foo     5
\f[R]
.fi
.PP
\f[B]Note:-\f[R] In above example, suffix is ignored as merging column
labels are different.
To have suffix, the column name must be same in both dataframes but then
the suffixes must be different.
.PP
For example,
.IP
.nf
\f[C]
import pandas as pd
import frovedis.dataframe as fdf

# creating two pandas datfarames
pd_df1 = pd.DataFrame({\[aq]lkey\[aq]: [\[aq]foo\[aq], \[aq]bar\[aq], \[aq]baz\[aq], \[aq]foo\[aq]],
                    \[aq]value\[aq]: [1, 2, 3, 5]})
pd_df2 = pd.DataFrame({\[aq]rkey\[aq]: [\[aq]foo\[aq], \[aq]bar\[aq], \[aq]baz\[aq], \[aq]foo\[aq]],
                                        \[aq]value\[aq]: [5, 6, 7, 8]})

# creating a frovedis dataframe
fd_df1 = fdf.DataFrame(pd_df1)

# update index values of fd_df1
fd_df1.update_index([\[aq]a\[aq],\[aq]b\[aq], \[aq]c\[aq], \[aq]d\[aq]], key = \[aq]index\[aq], inplace = True)

# display frovedis dataframe
fd_df1.show()

# creating another frovedis dataframe
fd_df2 = fdf.DataFrame(pd_df2)

# update index values of fd_df2
fd_df2.update_index([\[aq]a\[aq],\[aq]b\[aq], \[aq]c\[aq], \[aq]d\[aq]], key = \[aq]index\[aq], inplace = True)

# display frovedis dataframe
fd_df2.show()
\f[R]
.fi
.PP
Output
.IP
.nf
\f[C]
index   lkey    value
a       foo     1
b       bar     2
c       baz     3
d       foo     5

index   rkey    value
a       foo     5
b       bar     6
c       baz     7
d       foo     8
\f[R]
.fi
.PP
For example,
.IP
.nf
\f[C]
# merge(0 demo with left_index = True and right_index = True
fd_df1.merge(fd_df2, left_index = True, right_index = True).show()
\f[R]
.fi
.PP
Output
.IP
.nf
\f[C]
index   lkey    value_x rkey    value_y
a       foo     1       foo     5
b       bar     2       bar     6
c       baz     3       baz     7
d       foo     5       foo     8
\f[R]
.fi
.PP
For example,
.IP
.nf
\f[C]
import pandas as pd
import frovedis.dataframe as fdf

# creating two pandas datframes
pd_df1 = pd.DataFrame({\[aq]a\[aq]: [\[aq]foo\[aq], \[aq]bar\[aq]], \[aq]b\[aq]: [1, 2]})
pd_df2 = pd.DataFrame({\[aq]a\[aq]: [\[aq]foo\[aq], \[aq]baz\[aq]], \[aq]c\[aq]: [3, 4]})

# creating two frovedis datframes
fd_df1 = fdf.DataFrame(pd_df1)
fd_df2 = fdf.DataFrame(pd_df2)

# display frovedis dataframes
fd_df1.show()
fd_df2.show()
\f[R]
.fi
.PP
Output
.IP
.nf
\f[C]
index   a       b
0       foo     1
1       bar     2

index   a       c
0       foo     3
1       baz     4
\f[R]
.fi
.PP
For example,
.IP
.nf
\f[C]
# merge() demo with how = \[aq]inner\[aq] and \[aq]on\[aq] parameter
fd_df1.merge(fd_df2, how = \[aq]inner\[aq], on = \[aq]a\[aq]).show()
\f[R]
.fi
.PP
Output
.IP
.nf
\f[C]
index   a       b       c
0       foo     1       3
\f[R]
.fi
.PP
For example,
.IP
.nf
\f[C]
# merge using \[aq]how\[aq] = left and \[aq]on\[aq] parameter
fd_df1.merge(fd_df2, how = \[aq]left\[aq], on = \[aq]a\[aq]).show()
\f[R]
.fi
.PP
Output,
.IP
.nf
\f[C]
index   a       b       c
0       foo     1       3
1       bar     2       NULL
\f[R]
.fi
.PP
\f[B]Return Value\f[R]
.PD 0
.P
.PD
It returns a new Frovedis DataFrame instance with the merged entries of
the two DataFrame instances.
.SS 22. rename(columns, inplace = False)
.PP
\f[B]Parameters\f[R]
.PD 0
.P
.PD
\f[B]\f[BI]columns\f[B]\f[R]: It accepts a dictionary object as
parameter.
It contains the key as the name of the labels to be renamed and values
as the final names.
.PD 0
.P
.PD
\f[B]\f[BI]inplace.\f[B]\f[R]: It accepts a boolean object as parameter
which specify whether to modify the original DataFrame instance or to
return a copy.
When it is set to True then the original DataFrame instance is modified.
(Default: False)
.PP
\f[B]Purpose\f[R]
.PD 0
.P
.PD
It is used to set the name of the columns.
.PP
For example,
.IP
.nf
\f[C]
import pandas as pd
import frovedis.dataframe as fdf

# creating a pandas dataframe
pd_df = pd.DataFrame({\[dq]A\[dq]: [1, 2, 3], \[dq]B\[dq]: [4, 5, 6]})

# creating a frovedis dataframe
fd_df = fdf.DataFrame(pd_df)

# display frovedis dataframe
fd_df.show()
\f[R]
.fi
.PP
Output
.IP
.nf
\f[C]
index   A       B
0       1       4
1       2       5
2       3       6
\f[R]
.fi
.PP
For example,
.IP
.nf
\f[C]
# rename columns \[aq]A\[aq] and \[aq]B\[aq] to \[aq]a\[aq] and \[aq]c\[aq] respectively
fd_df.rename(columns={\[dq]A\[dq]: \[dq]a\[dq], \[dq]B\[dq]: \[dq]c\[dq]}).show()
\f[R]
.fi
.PP
Output
.IP
.nf
\f[C]
index   a       c
0       1       4
1       2       5
2       3       6
\f[R]
.fi
.PP
For example,
.IP
.nf
\f[C]
# rename() demo with implace = True
fd_df.rename(columns={\[dq]A\[dq]: \[dq]X\[dq], \[dq]B\[dq]: \[dq]Y\[dq]}, inplace = True)
\f[R]
.fi
.PP
Output,
.IP
.nf
\f[C]
index   X       Y
0       1       4
1       2       5
2       3       6
\f[R]
.fi
.PP
\f[B]Return Value\f[R]
.PD 0
.P
.PD
1.
It returns a new Frovedis DataFrame with the updated label name for the
specified columns.
.PD 0
.P
.PD
2.
It returns None when `inplace' parameter is set to True.
.SS 23. rename_index(new_name, inplace = False)
.PP
\f[B]Parameters\f[R]
.PD 0
.P
.PD
\f[B]\f[BI]new_name\f[B]\f[R]: It accepts a string object as parameter.
It renames the index for which the value is provided.
.PD 0
.P
.PD
\f[B]\f[BI]inplace\f[B]\f[R]: It accepts a boolean values as parameter.
When it is explicitly set to True, it modifies the original object
directly instead of creating a copy of DataFrame instance.
(Default: False)
.PP
\f[B]Purpose\f[R]
.PD 0
.P
.PD
It is used to rename the index label.
.PP
For example,
.IP
.nf
\f[C]
import pandas as pd
import frovedis.dataframe as fdf

peopleDF = {
            \[aq]Ename\[aq] : [\[aq]Michael\[aq], \[aq]Andy\[aq], \[aq]Tanaka\[aq], \[aq]Raul\[aq], \[aq]Yuta\[aq]],
            \[aq]Age\[aq] : [29, 30, 27, 19, 31],
            \[aq]Country\[aq] : [\[aq]USA\[aq], \[aq]England\[aq], \[aq]Japan\[aq], \[aq]France\[aq], \[aq]Japan\[aq]],
            \[aq]isMale\[aq]: [False, False, False, False, True]
           }

# creating a pandas dataframe
pd_df = pd.DataFrame(peopleDF)

# creating a frovedis dataframe
fd_df = fdf.DataFrame(pd_df)

# display a frovedis dataframe
fd_df.show()
\f[R]
.fi
.PP
Output
.IP
.nf
\f[C]
index   Ename   Age     Country isMale
0       Michael 29      USA     0
1       Andy    30      England 0
2       Tanaka  27      Japan   0
3       Raul    19      France  0
4       Yuta    31      Japan   1
\f[R]
.fi
.PP
For example,
.IP
.nf
\f[C]
# rename_index() demo where renaming index to \[dq]SNo\[dq]
fd_df.rename_index(\[dq]SNo\[dq]).show()
\f[R]
.fi
.PP
Output
.IP
.nf
\f[C]
SNo     Ename   Age     Country isMale
0       Michael 29      USA     0
1       Andy    30      England 0
2       Tanaka  27      Japan   0
3       Raul    19      France  0
4       Yuta    31      Japan   1
\f[R]
.fi
.PP
\f[B]Return Value\f[R]
.PD 0
.P
.PD
1.
It returns a new Frovedis DataFrame with the updated label for the Index
label.
.PD 0
.P
.PD
2.
It returns None when inplace parameter is set to True.
.SS 24. reset_index(drop = False, inplace = False)
.PP
\f[B]Parameters\f[R]
.PD 0
.P
.PD
\f[B]\f[BI]drop\f[B]\f[R]: It accepts a boolean value as parameter.
Do not try to insert index into dataframe columns.
This resets the index to the default integer index.
(Default: False)
.PD 0
.P
.PD
\f[B]\f[BI]inplace\f[B]\f[R]: It accepts a boolean values as parameter.
When it is explicitly set to True, it modifies the original object
directly instead of creating a copy of DataFrame object.
(Default: False)
.PP
\f[B]Purpose\f[R]
.PD 0
.P
.PD
It is used to reset the Index label of the DataFrame.
A new Index label is inserted with default integer values from 0 to n-1
where n is the number of rows.
.PP
\f[B]Note:- MultiIndex is not supported by Frovedis DataFrame.\f[R]
.PP
For example,
.IP
.nf
\f[C]
import pandas as pd
import frovedis.dataframe as fdf

peopleDF = {
            \[aq]Ename\[aq] : [\[aq]Michael\[aq], \[aq]Andy\[aq], \[aq]Tanaka\[aq], \[aq]Raul\[aq], \[aq]Yuta\[aq]],
            \[aq]Age\[aq] : [29, 30, 27, 19, 31],
            \[aq]Country\[aq] : [\[aq]USA\[aq], \[aq]England\[aq], \[aq]Japan\[aq], \[aq]France\[aq], \[aq]Japan\[aq]],
            \[aq]isMale\[aq]: [False, False, False, False, True]
           }

# creating a pandas dataframe
pd_df = pd.DataFrame(peopleDF)

# updating the index values of pandas dataframe
pd_df.index = [\[aq]a\[aq], \[aq]b\[aq], \[aq]c\[aq], \[aq]d\[aq], \[aq]a\[aq]]

# creating frovedis dataframe
fd_df = fdf.DataFrame(pd_df)

# display the frovedid dataframe
fd_df.show()
\f[R]
.fi
.PP
Output
.IP
.nf
\f[C]
index   Ename   Age     Country isMale
a       Michael 29      USA     0
b       Andy    30      England 0
c       Tanaka  27      Japan   0
d       Raul    19      France  0
a       Yuta    31      Japan   1
\f[R]
.fi
.PP
For example,
.IP
.nf
\f[C]
# reset_index() demo
fd_df.reset_index().show
\f[R]
.fi
.PP
Output
.IP
.nf
\f[C]
label_0 index_col       Ename   Age     Country isMale
0       a               Michael 29      USA     0
1       b               Andy    30      England 0
2       c               Tanaka  27      Japan   0
3       d               Raul    19      France  0
4       a               Yuta    31      Japan   1
\f[R]
.fi
.PP
When we reset the index, the old index is added as a column, and a new
sequential index is used.
.PP
For example,
.IP
.nf
\f[C]
# reset_index() demo with drop parameter 
fd_df.reset_index(drop = True).show()
\f[R]
.fi
.PP
Output
.IP
.nf
\f[C]
index   Ename   Age     Country isMale
0       Michael 29      USA     0
1       Andy    30      England 0
2       Tanaka  27      Japan   0
3       Raul    19      France  0
4       Yuta    31      Japan   1
\f[R]
.fi
.PP
We can use the drop parameter to avoid the old index being added as a
column.
.PP
\f[B]Return Value\f[R]
.PD 0
.P
.PD
1.
It returns a new Frovedis DataFrame with the default sequence in Index
label.
.PD 0
.P
.PD
2.
It returns None if `inplace' parameter is set to True.
.SS 25. set_index(keys, drop = True, append = False, inplace = False, verify_integrity = False)
.PP
\f[B]Parameters\f[R]
.PD 0
.P
.PD
\f[B]\f[BI]keys\f[B]\f[R]: It accepts a string object as parameter.
This parameter can be a single column key.
.PD 0
.P
.PD
\f[B]\f[BI]drop\f[B]\f[R]: It accepts a boolean value as parameter.
When it is set to True, it will remove the column which is selected as
new index.
\f[B]Currently, Frovedis doesn\[cq]t support drop = False.\f[R]
(Default: True)
.PD 0
.P
.PD
\f[B]\f[BI]append\f[B]\f[R]: It accepts a boolean value as parameter.
It will decide whether to append columns to existing index.
\f[B]Currently, Frovedis doesn\[cq]t support append = True.\f[R]
(Default: False)
.PD 0
.P
.PD
\f[B]\f[BI]inplace\f[B]\f[R]: It accepts a boolean values as parameter
which is when explicitly set to True, it modifies the original object
directly instead of creating a copy of DataFrame instance.
(Default: False)
.PD 0
.P
.PD
\f[B]\f[BI]verify_integrity\f[B]\f[R]: It accepts a boolean value as
parameter.
When it is set to True, it checks the new index for duplicates.
Performance of this method will be better when it is set to False.
(Default: False)
.PP
\f[B]Purpose\f[R]
.PD 0
.P
.PD
It is used to set the frovedis dataframe index using existing columns.
The index will replace the existing index.
.PP
\f[B]Note:- Frovedis DataFrame does not support Multi Index.\f[R]
.PP
For example,
.IP
.nf
\f[C]
import pandas as pd
import frovedis.dataframe as fdf

# creating a pandas dataframe
pd_df = pd.DataFrame({\[aq]month\[aq]: [1, 4, 1, 10],
                   \[aq]year\[aq]: [2012, 2014, 2013, 2014],
                   \[aq]sale\[aq]: [55, 40, 84, 31]})

# creating a frovedis dataframe
fd_df = fdf.DataFrame(pd_df)

# display frovedis dataframe
fd_df.show()
\f[R]
.fi
.PP
Output
.IP
.nf
\f[C]
index   month   year    sale
0       1       2012    55
1       4       2014    40
2       1       2013    84
3       10      2014    31
\f[R]
.fi
.PP
For example,
.IP
.nf
\f[C]
# set_index() demo where \[oq]month\[cq] column is set as index
fd_df.set_index(\[aq]month\[aq]).show()
\f[R]
.fi
.PP
Output
.IP
.nf
\f[C]
month   year    sale
1       2012    55
4       2014    40
1       2013    84
10      2014    31
\f[R]
.fi
.PP
For example,
.IP
.nf
\f[C]
# set_index() demo with verify_integrity = True
fd_df.set_index(\[aq]month\[aq], verify_integrity = True).show()
\f[R]
.fi
.PP
Output
.IP
.nf
\f[C]
month   year    sale
1       2012    55
4       2014    40
7       2013    84
10      2014    31
\f[R]
.fi
.PP
\f[B]Note:-\f[R] In above example, the column which is being selected as
index must have unique values.
.PP
\f[B]Return Value\f[R]
.PD 0
.P
.PD
1.
It returns a new Frovedis DataFrame where the Index column label is
replace with specified column label.
.PD 0
.P
.PD
2.
It returns None when `inplace' parameter is set to True.
.SS 26. show()
.PP
\f[B]Purpose\f[R]
.PD 0
.P
.PD
This method is used to display the Frovedis DataFrame on the console.
It can display full dataframe or some selected columns of the DataFrame
(single or multi-column).
.PP
It can be used either with any method which returns a Frovedis DataFrame
instance type compatible with string type.
.PP
For example,
.IP
.nf
\f[C]
import pandas as pd
import frovedis.dataframe as fdf

# creating the dataframe    
peopleDF = {
        \[aq]Ename\[aq] : [\[aq]Michael\[aq], \[aq]Andy\[aq], \[aq]Tanaka\[aq], \[aq]Raul\[aq], \[aq]Yuta\[aq]], 
        \[aq]Age\[aq] : [29, 30, 27, 19, 31],
        \[aq]Country\[aq] : [\[aq]USA\[aq], \[aq]England\[aq], \[aq]Japan\[aq], \[aq]France\[aq], \[aq]Japan\[aq]],
        \[aq]isMale\[aq]: [False, False, False, False, True]
       }

pdf = pd.DataFrame(peopleDF)

# creating a frovedis dataframe
fd_df = fdf.DataFrame(pdf)

# display frovedis dataframe
print(\[dq]Displaying complete frovedis dataframe\[dq])
fd_df.show() 
\f[R]
.fi
.PP
Output
.IP
.nf
\f[C]
Displaying complete frovedis dataframe
index   Ename   Age     Country isMale
0       Michael 29      USA     0
1       Andy    30      England 0
2       Tanaka  27      Japan   0
3       Raul    19      France  0
4       Yuta    31      Japan   1
\f[R]
.fi
.PP
For example,
.IP
.nf
\f[C]
# Display dataframe by selecting single column
print(\[dq]Displaying frovedis dataframe with just Ename column\[dq])
fd_df[\[dq]Ename\[dq]].show()         # single column
\f[R]
.fi
.PP
Output
.IP
.nf
\f[C]
Displaying frovedis dataframe with just Ename column
index   Ename
0       Michael
1       Andy
2       Tanaka
3       Raul
4       Yuta 
\f[R]
.fi
.PP
For example,
.IP
.nf
\f[C]
# Selecting multiple columns
print(\[dq]Displaying frovedis dataframe with Ename  and Age columns\[dq])
fd_df[[\[dq]Ename\[dq],\[dq]Age\[dq]]].show() # multiple column
\f[R]
.fi
.PP
Output
.IP
.nf
\f[C]
Displaying frovedis dataframe with Ename  and Age columns
index   Ename   Age
0       Michael 29
1       Andy    30
2       Tanaka  27
3       Raul    19
4       Yuta    31
\f[R]
.fi
.PP
For example,
.IP
.nf
\f[C]
# With slicing operator
print(\[dq]Displaying frovedis dataframe using condition based slicing operator\[dq])
fd_df[fd_df.Age > 19].show()  
\f[R]
.fi
.PP
Output
.IP
.nf
\f[C]
Displaying frovedis dataframe using condition based slicing operator
index   Ename   Age     Country isMale
0       Michael 29      USA     0
1       Andy    30      England 0
2       Tanaka  27      Japan   0
4       Yuta    31      Japan   1
\f[R]
.fi
.PP
For example,
.IP
.nf
\f[C]
# With slicing operator
print(\[dq]Displaying frovedis dataframe using chaining of methods\[dq])
fd_df[fd_df.Country.str.contains(\[dq]a\[dq])].show()
\f[R]
.fi
.PP
Output
.IP
.nf
\f[C]
Displaying frovedis dataframe using chaining of methods
index   Ename   Age     Country isMale
1       Andy    30      England 0
2       Tanaka  27      Japan   0
3       Raul    19      France  0
4       Yuta    31      Japan   1
\f[R]
.fi
.PP
\f[B]Return Value\f[R]
.PD 0
.P
.PD
It return nothing.
.SS 27. tail(n = 5)
.PP
\f[B]Parameters\f[R]
.PD 0
.P
.PD
\f[B]\f[BI]n\f[B]\f[R]: It accepts an integer as parameter.
It represents the number of rows which is to be selected.
(Default: 5)
.PP
\f[B]Purpose\f[R]
.PD 0
.P
.PD
This utility is used to return the last \f[B]n\f[R] rows from the
DataFrame.
.PP
It is useful for quickly verifying data, for example, after sorting or
appending rows.
.PP
For negative values of n, this function returns all rows except the
first n rows, equivalent to \f[B]fdf[n:]\f[R].
.PP
For example,
.IP
.nf
\f[C]
import pandas as pd
import frovedis.dataframe as fdf

# creating a pandas dataframe
pd_df = pd.DataFrame({\[aq]animal\[aq]: [\[aq]alligator\[aq], \[aq]bee\[aq], \[aq]falcon\[aq], \[aq]lion\[aq],
               \[aq]monkey\[aq], \[aq]parrot\[aq], \[aq]shark\[aq], \[aq]whale\[aq], \[aq]zebra\[aq]]})

# creating a frovedis dataframe
fd_df = fdf.DataFrame(pd_df)

print(\[dq]Viewing all entries of dataframe\[dq])
fd_df.show()
\f[R]
.fi
.PP
Output
.IP
.nf
\f[C]
Viewing all entries of dataframe
index   animal
0       alligator
1       bee
2       falcon
3       lion
4       monkey
5       parrot
6       shark
7       whale
8       zebra
\f[R]
.fi
.PP
For example,
.IP
.nf
\f[C]
# tail() demo
print(\[dq]Viewing the last 5 lines\[dq])
fd_df.tail().show()
\f[R]
.fi
.PP
Output
.IP
.nf
\f[C]
Viewing the last 5 lines
index   animal
4       monkey
5       parrot
6       shark
7       whale
8       zebra    
\f[R]
.fi
.PP
For example,
.IP
.nf
\f[C]
# tail(0 demo with n = 3
print(\[dq]Viewing the last 3 lines\[dq])
fd_df.tail(3).show()
\f[R]
.fi
.PP
Output
.IP
.nf
\f[C]
Viewing the last 3 lines
index   animal
6       shark
7       whale
8       zebra
\f[R]
.fi
.PP
For example,
.IP
.nf
\f[C]
# tail() demo with n = -2
print(\[dq]For negative values of n\[dq])
fd_df.tail(-2).show()
\f[R]
.fi
.PP
Output
.IP
.nf
\f[C]
For negative values of n
index   animal
2       falcon
3       lion
4       monkey
5       parrot
6       shark
7       whale
8       zebra
\f[R]
.fi
.PP
\f[B]Return Value\f[R]
.PD 0
.P
.PD
It returns a new Frovedis DataFrame instance with last \f[B]n\f[R] rows.
.SS 28. update_index(value, key = None, verify_integrity = False, inplace = False)
.PP
\f[B]Parameters\f[R]
.PD 0
.P
.PD
\f[B]\f[BI]value\f[B]\f[R]: It accepts a list-like object (list or
tuple) as parameter.
It contains the entries of the new index label.
.PD 0
.P
.PD
\f[B]\f[BI]key\f[B]\f[R]: It accepts a string object as parameter.
It is the name of the index label.
(Default: None)
.PD 0
.P
.PD
When it is None (not specified explicitly), it will not update the index
entries and it will raise an exception.
.PD 0
.P
.PD
\f[B]\f[BI]verify_integrity\f[B]\f[R]: It accepts a boolean value as
parameter.
When it is explicitly set to True, it checks the new index for
duplicates values before update and it will not update the index when
there are duplicate values.
Performance of this method will be improved when it is set to False.
(Default: False)
.PD 0
.P
.PD
\f[B]\f[BI]inplace\f[B]\f[R]: It accepts a boolean as a parameter.
It return a copy of DataFrame instance by default but when explicitly
set to True, it performs operation on original DataFrame.
(Default: False)
.PP
\f[B]Purpose\f[R]
.PD 0
.P
.PD
It sets the DataFrame index using existing columns.
The index can replace the existing index or can expand it.
.PP
For example,
.IP
.nf
\f[C]
import pandas as pd
import frovedis.dataframe as fdf

# creating a pandas dataframe
pd_df = pd.DataFrame({\[aq]month\[aq]: [1, 4, 7, 10],
                     \[aq]year\[aq]: [2012, 2014, 2013, 2014],
                     \[aq]sale\[aq]: [55, 40, 84, 31]})

# creating a frovedis dataframe
fd_df = fdf.DataFrame(pd_df)

# display frovedis dataframe
fd_df.show()
\f[R]
.fi
.PP
Output
.IP
.nf
\f[C]
index   month   year    sale
0       1       2012    55
1       4       2014    40
2       7       2013    84
3       10      2014    31
\f[R]
.fi
.PP
For example,
.IP
.nf
\f[C]
# update_index() demo
fd_df.update_index([\[aq]a\[aq],\[aq]b\[aq],\[aq]a\[aq],\[aq]d\[aq]], key = \[aq]index\[aq]).show()
\f[R]
.fi
.PP
Output
.IP
.nf
\f[C]
index   month   year    sale
a       1       2012    55
b       4       2014    40
a       7       2013    84
d       10      2014    31
\f[R]
.fi
.PP
For example,
.IP
.nf
\f[C]
# update_index() demo with verify_integrity = True
fd_df.update_index([\[aq]a\[aq],\[aq]b\[aq],\[aq]c\[aq],\[aq]d\[aq]], key = \[aq]index\[aq], verify_integrity = True).show()
\f[R]
.fi
.PP
Output
.IP
.nf
\f[C]
index   month   year    sale
a       1       2012    55
b       4       2014    40
c       7       2013    84
d       10      2014    31
\f[R]
.fi
.PP
\f[B]Note:-\f[R] Values used to update `index' must be different when
parameter `verify_integrity' = True.
.PP
\f[B]Return Value\f[R]
.PD 0
.P
.PD
1.
It returns a new Frovedis DataFrame with updated row values for index
field along with specified label.
.PD 0
.P
.PD
2.
It returns None when `inplace' parameter is set to True.
.SH SEE ALSO
.IP \[bu] 2
\f[B]DataFrame - Introduction\f[R]
.PD 0
.P
.PD
.IP \[bu] 2
\f[B]DataFrame - Conversion Functions\f[R]
.PD 0
.P
.PD
.IP \[bu] 2
\f[B]DataFrame - Sorting Functions\f[R]
.PD 0
.P
.PD
.IP \[bu] 2
\f[B]DataFrame - Math Functions\f[R]
.PD 0
.P
.PD
.IP \[bu] 2
\f[B]DataFrame - Aggregate Functions\f[R]
