.\" Automatically generated by Pandoc 2.17.1.1
.\"
.\" Define V font for inline verbatim, using C font in formats
.\" that render this, and otherwise B font.
.ie "\f[CB]x\f[]"x" \{\
. ftr V B
. ftr VI BI
. ftr VB B
. ftr VBI BI
.\}
.el \{\
. ftr V CR
. ftr VI CI
. ftr VB CB
. ftr VBI CBI
.\}
.TH "DataFrame Sorting Functions" "" "" "" ""
.hy
.SH NAME
.PP
DataFrame Sorting Functions - this manual contains list of all functions
related to sorting operations performed on frovedis dataframe.
.SS DESCRIPTION
.PP
Frovedis datafrme provides various sorting functions such as
sort_index(), sort_values(), etc.
.PP
These can be used to sort data along rows or columns of frovedis
dataframe, either in ascending or descending order.
.PP
\f[B]Currently, sorting opertaions will be performed on a copy of
frovedis dataframe.
Inplace sorting is not supported yet.\f[R]
.SS Public Member Functions
.IP
.nf
\f[C]
1. nlargest(n, columns, keep = \[aq]first\[aq])
2. nsmallest(n, columns, keep = \[aq]first\[aq])
3. sort(columns = None, axis = 0, ascending = True, inplace = False, kind = \[aq]radixsort\[aq], 
         na_position = \[aq]last\[aq], **kwargs)
4. sort_index(axis = 0, ascending = True, inplace = False, kind = \[aq]quicksort\[aq], na_position = \[aq]last\[aq])
5. sort_values(by, axis = 0, ascending = True, inplace = False, kind = \[aq]radixsort\[aq], na_position = \[aq]last\[aq])
\f[R]
.fi
.SS Detailed Description
.SS 1. DataFrame.nlargest(n, columns, keep = `first')
.PP
\f[B]Parameters\f[R]
.PD 0
.P
.PD
\f[B]\f[BI]n\f[B]\f[R]: It accepts an integer parameter which represents
the number of rows to return.
.PD 0
.P
.PD
\f[B]\f[BI]columns\f[B]\f[R]: It accepts a string type or list of
strings type parameter which represents the column label(s) to order by.
.PD 0
.P
.PD
\f[B]\f[BI]keep\f[B]\f[R]: It accepts a string object parameter.
This parameter is used when there are duplicate values.
(Default: `first')
.PD 0
.P
.PD
- \f[B]`first'\f[R] : it prioritizes the first occurrence(s).
.PD 0
.P
.PD
- \f[B]`last'\f[R] : it prioritizes the last occurrence(s).
.PD 0
.P
.PD
- \f[B]`all'\f[R] : it is used to not drop any duplicates, even when it
means selecting more than \f[B]n\f[R] items.
.PP
\f[B]Purpose\f[R]
.PD 0
.P
.PD
It is used to return the \f[B]top n rows\f[R] ordered by the specified
columns in descending order.
The columns that are not specified are returned as well, but not used
for ordering.
.PP
This method is equivalent to DataFrame.sort_values(columns, ascending =
False).head(n), but it is more efficient.
.PP
For example,
.IP
.nf
\f[C]
import pandas as pd
import frovedis.dataframe as fdf

pd_df = pd.DataFrame({\[aq]population\[aq]: [59000000, 65000000, 434000, 434000, 
                                    434000, 337000, 11300, 11300, 11300],
                      \[aq]GDP\[aq]: [1937894, 2583560 , 12011, 4520, 12128,
                              17036, 182, 38, 311],
                      \[aq]alpha-2\[aq]: [\[dq]IT\[dq], \[dq]FR\[dq], \[dq]MT\[dq], \[dq]MV\[dq], \[dq]BN\[dq],
                                  \[dq]IS\[dq], \[dq]NR\[dq], \[dq]TV\[dq], \[dq]AI\[dq]]},
                      index=[\[dq]Italy\[dq], \[dq]France\[dq], \[dq]Malta\[dq],
                             \[dq]Maldives\[dq], \[dq]Brunei\[dq], \[dq]Iceland\[dq],
                             \[dq]Nauru\[dq], \[dq]Tuvalu\[dq], \[dq]Anguilla\[dq]])
# create a frovedis dataframe
fd_df = fdf.DataFrame(pd_df)

# to display frovedis dataframe
fd_df.show()
\f[R]
.fi
.PP
Output
.IP
.nf
\f[C]
index       population      GDP       alpha-2
Italy       59000000        1937894   IT
France      65000000        2583560   FR
Malta       434000          12011     MT
Maldives    434000          4520      MV
Brunei      434000          12128     BN
Iceland     337000          17036     IS
Nauru       11300           182       NR
Tuvalu      11300           38        TV
Anguilla    11300           311       AI
\f[R]
.fi
.PP
For example,
.IP
.nf
\f[C]
# nlargest() demo to select the 3 rows having the largest values in column \[lq]population\[rq]
fd_df.nlargest(3, \[aq]population\[aq]).show()
\f[R]
.fi
.PP
Output
.IP
.nf
\f[C]
index      population      GDP       alpha-2
France     65000000        2583560   FR
Italy      59000000        1937894   IT
Malta      434000          12011     MT
\f[R]
.fi
.PP
For example,
.IP
.nf
\f[C]
# nlargest() demo with keep = \[aq]last\[aq]    
fd_df.nlargest(3, \[aq]population\[aq], keep=\[aq]last\[aq]).show()
\f[R]
.fi
.PP
Output
.IP
.nf
\f[C]
index       population     GDP       alpha-2
France      65000000       2583560   FR
Italy       59000000       1937894   IT
Brunei      434000         12128     BN
\f[R]
.fi
.PP
For example,
.IP
.nf
\f[C]
# nlargest() demo with keep = \[aq]all\[aq]
fdf.nlargest(3, \[aq]population\[aq], keep=\[aq]all\[aq]).show()
\f[R]
.fi
.PP
Output
.IP
.nf
\f[C]
index       population     GDP       alpha-2
France      65000000       2583560   FR
Italy       59000000       1937894   IT
Malta       434000         12011     MT
Maldives    434000         4520      MV
Brunei      434000         12128     BN
\f[R]
.fi
.PP
For example,
.IP
.nf
\f[C]
# nlargest() demo with use of list of columns
fd_df.nlargest(3, [\[aq]population\[aq], \[aq]GDP\[aq]]).show()
\f[R]
.fi
.PP
Output
.IP
.nf
\f[C]
index       population     GDP       alpha-2
France      65000000       2583560   FR
Italy       59000000       1937894   IT
Brunei      434000         12128     BN
\f[R]
.fi
.PP
\f[B]Return Value\f[R]
.PD 0
.P
.PD
It returns a Frovedis DataFrame instance with \f[B]n\f[R] rows ordered
by the specified columns in descending order.
.SS 2. DataFrame.nsmallest(n, columns, keep = `first')
.PP
\f[B]Parameters\f[R]
.PD 0
.P
.PD
\f[B]\f[BI]n\f[B]\f[R]: It accepts an integer type argument that
represents the number of rows to return.
.PD 0
.P
.PD
\f[B]\f[BI]columns\f[B]\f[R]: It accepts a string type or list of
strings type parameter which represents the column label(s) to order by.
.PD 0
.P
.PD
\f[B]\f[BI]keep\f[B]\f[R]: It accepts a string object parameter.
This parameter is used when there are duplicate values.
(Default: `first')
.PD 0
.P
.PD
1.
\f[B]`first'\f[R] : it prioritizes the first occurrence(s).
.PD 0
.P
.PD
2.
\f[B]`last'\f[R] : it prioritizes the last last occurrence(s).
.PD 0
.P
.PD
3.
\f[B]`all'\f[R] : it is used to not drop any duplicates, even it means
selecting more than \f[B]n\f[R] items.
.PP
\f[B]Purpose\f[R]
.PD 0
.P
.PD
It is used to return the \f[B]top n rows\f[R] ordered by the specified
columns in ascending order.
.PP
It returns the first n rows with the smallest values in columns, in
ascending order.
The columns that are not specified are returned as well, but not used
for ordering.
.PP
This method is equivalent to DataFrame.sort_values(columns,
ascending=True).head(n), but it is more efficient.
.PP
For example
.IP
.nf
\f[C]
import pandas as pd
import frovedis.dataframe as fdf

pd_df = pd.DataFrame({\[aq]population\[aq]: [59000000, 65000000, 434000,
                                    434000, 434000, 337000, 11300,
                                    11300, 11300],
                      \[aq]GDP\[aq]: [1937894, 2583560 , 12011, 4520, 12128,
                              17036, 182, 38, 311],
                      \[aq]alpha-2\[aq]: [\[dq]IT\[dq], \[dq]FR\[dq], \[dq]MT\[dq], \[dq]MV\[dq], \[dq]BN\[dq],
                                  \[dq]IS\[dq], \[dq]NR\[dq], \[dq]TV\[dq], \[dq]AI\[dq]]},
                      index=[\[dq]Italy\[dq], \[dq]France\[dq], \[dq]Malta\[dq],
                             \[dq]Maldives\[dq], \[dq]Brunei\[dq], \[dq]Iceland\[dq],
                             \[dq]Nauru\[dq], \[dq]Tuvalu\[dq], \[dq]Anguilla\[dq]])

# create a frovedis dataframe
fd_df = fdf.DataFrame(pd_df)

# to display frovedis dataframe
fd_df.show()
\f[R]
.fi
.PP
Output
.IP
.nf
\f[C]
index       population     GDP       alpha-2
Italy       59000000       1937894   IT
France      65000000       2583560   FR
Malta       434000         12011     MT
Maldives    434000         4520      MV
Brunei      434000         12128     BN
Iceland     337000         17036     IS
Nauru       11300          182       NR
Tuvalu      11300          38        TV
Anguilla    11300          311       AI
\f[R]
.fi
.PP
For example,
.IP
.nf
\f[C]
# nsmallest() demo to select the 3 rows having the smallest values in column \[lq]population\[rq]
fd_df.nsmallest(3, \[aq]population\[aq]).show()
\f[R]
.fi
.PP
Output
.IP
.nf
\f[C]
index       population     GDP      alpha-2
Nauru       11300          182      NR
Tuvalu      11300          38       TV
Anguilla    11300          311      AI
\f[R]
.fi
.PP
For example,
.IP
.nf
\f[C]
# nsmallest() demo with keep = \[aq]last\[aq] parameter
fd_df.nsmallest(3, \[aq]population\[aq], keep=\[aq]last\[aq]).show()
\f[R]
.fi
.PP
Output
.IP
.nf
\f[C]
index       population     GDP      alpha-2
Anguilla    11300          311      AI
Tuvalu      11300          38       TV
Nauru       11300          182      NR
\f[R]
.fi
.PP
For example
.IP
.nf
\f[C]
# example to use nsmallest with keep = \[aq]all\[aq] parameter
fd_df.nsmallest(3, \[aq]population\[aq], keep=\[aq]all\[aq]).show()
\f[R]
.fi
.PP
Output
.IP
.nf
\f[C]
index       population     GDP      alpha-2
Nauru       11300          182      NR
Tuvalu      11300          38       TV
Anguilla    11300          311      AI
\f[R]
.fi
.PP
For example,
.IP
.nf
\f[C]
# nsmallest() demo with using a list of columns names    
fd_df.nsmallest(3, [\[aq]population\[aq], \[aq]GDP\[aq]])
\f[R]
.fi
.PP
Output
.IP
.nf
\f[C]
index       population     GDP      alpha-2
Tuvalu      11300          38       TV
Nauru       11300          182      NR
Anguilla    11300          311      AI
\f[R]
.fi
.PP
\f[B]Return Value\f[R]
.PD 0
.P
.PD
It returns a Frovedis DataFrame object with \f[B]n\f[R] rows ordered by
the specified columns in ascending order.
.SS 3. DataFrame.sort(columns = None, axis = 0, ascending = True, inplace = False, kind = `radixsort', na_position = `last', **kwargs)
.PP
\f[B]Parameters\f[R]
.PD 0
.P
.PD
\f[B]\f[BI]columns\f[B]\f[R]: It accepts the name or list of names on
which sorting will be applied.
(Default: None)
.PD 0
.P
.PD
If axis is 0 or `index' then this parameter should contain index levels
and/or column labels.
Currently axis = 0 or `index' is only supported in Frovedis DataFrame.
.PD 0
.P
.PD
When it is None (not specified explicitly), it will not perform sorting
and it will raise an exception.
.PD 0
.P
.PD
\f[B]\f[BI]axis\f[B]\f[R]: It accepts an integer or a string object as
parameter.To perform sorting along rows or columns, it is selected by
this parameter.
(Default: 0)
.PD 0
.P
.PD
If axis is 0 or `index', sorting is performed along the row.
Currently axis = 0 or `index' is only supported in Frovedis DataFrame.
.PD 0
.P
.PD
\f[B]\f[BI]ascending\f[B]\f[R]: It accepts a boolean value or a list of
booleans as parameter.
The order of sorting is decided by this parameter.
Need to specify a list of booleans for multiple sort orders.
If this is a list of booleans, then it must match the length of the
`columns' parameter.
By default, the order of sorting will be ascending and to change the
order to descending, explicitly pass it as False.
(Default: True)
.PD 0
.P
.PD
\f[B]\f[BI]inplace\f[B]\f[R]: It accepts a boolean value as parameter.
When it is explicitly set to True, it modifies the original object
directly instead of creating a copy of DataFrame object.
\f[B]Currently, `inplace' = True is not supported by this Frovedis
DataFrame method.\f[R] (Default: False)
.PD 0
.P
.PD
\f[B]\f[BI]kind\f[B]\f[R]: It accepts a string object as parameter to
select the type of sorting algorithm.
\f[B]Currently, Frovedis supports only `radixsort' and other values for
`kind' parameter will be ignored internally with a warning.\f[R]
(Default: `radixsort')
.PD 0
.P
.PD
\f[B]\f[BI]na_position\f[B]\f[R]: It accepts a string object as
parameter.
It decides the position of NaNs after sorting.
When it is set to `last', it puts NaNs at the end.
\f[B]Currently, Frovedis only supports `na_position' = `last'\f[R].
(Default: `last')
.PD 0
.P
.PD
\f[B]**\f[BI]kwargs\f[B]\f[R]: It accepts a dictionary object as
parameter.
It is used to pass all the other parameters at once in the form of a
dictionary object.
Currently this is not supported.
.PP
\f[B]Purpose\f[R]
.PD 0
.P
.PD
It is used to sort the values in the specified column(s) along axis = 0
or axis = `index' in the Frovedis DataFrame.
.PP
\f[B]This method is present only in frovedis.
It internally uses sort_values().\f[R]
.PP
For example,
.IP
.nf
\f[C]
import pandas as pd
import frovedis.dataframe as fdf

pd_df = pd.DataFrame({
                    \[aq]col1\[aq]: [\[aq]A\[aq], \[aq]A\[aq], \[aq]B\[aq], np.nan, \[aq]D\[aq], \[aq]C\[aq]],
                    \[aq]col2\[aq]: [2, 1, 9, 8, 7, 4],
                    \[aq]col3\[aq]: [0, 1, 9, 4, 2, 3],
                    \[aq]col4\[aq]: [\[aq]a\[aq], \[aq]B\[aq], \[aq]c\[aq], \[aq]D\[aq], \[aq]e\[aq], \[aq]F\[aq]] })

# create a frovedis dataframe from pandas dataframe
fd_df = fdf.DataFrame(pd_df)

# display frovedis dataframe
fd_df.show()
\f[R]
.fi
.PP
Output
.IP
.nf
\f[C]
index   col1    col2    col3    col4
0       A       2       0       a
1       A       1       1       B
2       B       9       9       c
3       NULL    8       4       D
4       D       7       2       e
5       C       4       3       F
\f[R]
.fi
.PP
For example,
.IP
.nf
\f[C]
# Sort dataframe by \[aq]col1\[aq]
fd_df.sort(\[aq]col1\[aq]).show()
\f[R]
.fi
.PP
Output
.IP
.nf
\f[C]
index   col1    col2    col3    col4
0       A       2       0       a
1       A       1       1       B
2       B       9       9       c
5       C       4       3       F
4       D       7       2       e
3       NULL    8       4       D
\f[R]
.fi
.PP
For example,
.IP
.nf
\f[C]
# Sort dataframe by multiple columns
fd_df.sort([\[aq]col1\[aq], \[aq]col2\[aq]]).show()
\f[R]
.fi
.PP
Output
.IP
.nf
\f[C]
index   col1    col2    col3    col4
1       A       1       1       B
0       A       2       0       a
2       B       9       9       c
5       C       4       3       F
4       D       7       2       e
3       NULL    8       4       D
\f[R]
.fi
.PP
\f[B]NOTE:\f[R] In the above example, in case of multiple columns
sorting, \f[B]`col1'\f[R] will be sorted first and \f[B]`col2'\f[R] will
only be considered for sorting in case of duplicate entries present in
\f[B]`col1'\f[R].
.PP
For example,
.IP
.nf
\f[C]
# Sort datafrme in descending order
fd_df.sort(\[aq]col1\[aq], ascending = False).show()
\f[R]
.fi
.PP
Output
.IP
.nf
\f[C]
index   col1    col2    col3    col4
3       NULL    8       4       D
4       D       7       2       e
5       C       4       3       F
2       B       9       9       c
0       A       2       0       a
1       A       1       1       B
\f[R]
.fi
.PP
\f[B]Return Value\f[R]
.PD 0
.P
.PD
It returns a new Frovedis DataFrame with sorted values.
.SS 4. DataFrame.sort_index(axis = 0, ascending = True, inplace = False, kind = `quicksort', na_position = `last')
.PP
\f[B]Parameters\f[R]
.PD 0
.P
.PD
\f[B]\f[BI]axis\f[B]\f[R]: It accepts an interger or a string object as
parameter.
It is the axis along which the sorting will be performed.
(Default: 0)
.PD 0
.P
.PD
When axis = 0 or axis = `index', operation will be performed on rows.
\f[B]Currently only axis = 0 or axis = `index' is supported\f[R].
.PD 0
.P
.PD
\f[B]\f[BI]ascending\f[B]\f[R]: It accepts a boolean value as parameter.
This parameter decides the order to sort the data.
(Default: True)
.PD 0
.P
.PD
When this parameter is explicitly passed as False, it sorts the data
into descending order.
.PD 0
.P
.PD
\f[B]\f[BI]inplace\f[B]\f[R]: It accepts a boolean value as paramter.
To modify the original DataFrame object, argument is explicitly passed
as True.
Otherwise operation is performed on a copy of Frovedis DataFrame object.
\f[B]Currently `inplace' = True is not supported by this method.\f[R]
(Default: False)
.PD 0
.P
.PD
\f[B]\f[BI]kind\f[B]\f[R]: It accepts a string object as parameter.
This parameter is used to select the sorting algorithms.
(Default: `quicksort')
.PD 0
.P
.PD
\f[B]\f[BI]na_position\f[B]\f[R]: It accepts a string object as
parameter.
It is used to decide where to puts NaNs i.e at the beginning or at the
end.
(Default: `last')
.PD 0
.P
.PD
When na_position = `last', it puts NaNs at the end.
\f[B]Currently, na_position = `last' is only supported for this
method.\f[R]
.PP
\f[B]Purpose\f[R]
.PD 0
.P
.PD
It is used to sort Frovedis DataFrame according to index values.
It creates a new sorted DataFrame by the specified label.
.PP
\f[B]Currently it only supports `radixsort' and other values for `kind'
parameter are ignored internally along with a warning.\f[R]
.PP
\f[B]Also, Frovedis DataFrame doesn\[cq]t support MultiIndex\f[R]
.PP
For example,
.IP
.nf
\f[C]
import pandas as pd
import frovedis.dataframe as fdf

# creating a pandas dataframe
pd_df = pd.DataFrame([1, 2, 3, 4, 5], 
                     index=[100, 29, 234, 1, 150],
                     columns=[\[aq]A\[aq]])
                  
# creating frovedis dataframe from pandas dataframe
fd_df = fdf.DataFrame(pd_df)

# to display frovedis dataframe
fd_df.show()
\f[R]
.fi
.PP
Output
.IP
.nf
\f[C]
index   A
100     1
29      2
234     3
1       4
150     5
\f[R]
.fi
.PP
For example,
.IP
.nf
\f[C]
# to display sorted dataframe by index
fd_df.sort_index().show()
\f[R]
.fi
.PP
Output
.IP
.nf
\f[C]
index   A
1       4
29      2
100     1
150     5
234     3
\f[R]
.fi
.PP
For example,
.IP
.nf
\f[C]
# Sort in descending order, use ascending=False
fd_df.sort_index(ascending=False)
\f[R]
.fi
.PP
Output
.IP
.nf
\f[C]
index   A
234     3
150     5
100     1
29      2
1       4
\f[R]
.fi
.PP
\f[B]Return Value\f[R]
.PD 0
.P
.PD
It returns a new Frovedis DataFrame instance sorted by the labels.
.SS 5. DataFrame.sort_values(by, axis = 0, ascending = True, inplace = False, kind = `radixsort', na_position = `last')
.PP
\f[B]Parameters\f[R]
.PD 0
.P
.PD
\f[B]\f[BI]by\f[B]\f[R]: It accepts the name or list of names on which
sorting will be applied.
.PD 0
.P
.PD
If axis is 0 or `index', then `by' should contain index levels and/or
column labels.
\f[B]Currently axis = 1 or axis = `columns' is not supported.\f[R]
.PD 0
.P
.PD
\f[B]\f[BI]axis\f[B]\f[R]: It accepts an integer or a string object as
parameter.
To perform sorting along rows or columns, it is selected by this
parameter.
(Default: 0)
.PD 0
.P
.PD
If axis is 0 or `index', sorting is performed along the row.
\f[B]Currently axis = 1 or axis = `columns' is not supported.\f[R]
.PD 0
.P
.PD
\f[B]\f[BI]ascending\f[B]\f[R]: It accepts a boolean value or a list of
boolean values as parameter.
The order of sorting is decided by this parameter.
Need to specify a list of booleans for multiple sorting orders.
If this is a list of booleans, the length of the list must match the
length of the `by' parameter list.
By default, the order of sorting will be ascending and to change the
order to descending, explicitly pass it as False.
(Default: True)
.PD 0
.P
.PD
\f[B]\f[BI]inplace\f[B]\f[R]: It accepts a boolean value as parameter.
To modify the original DataFrame object, argument is explicitly passed
as True.
Otherwise operation is performed on a copy of Frovedis DataFrame object.
\f[B]Currently `inplace' = True is not supported by this method.\f[R]
(Default: False)
.PD 0
.P
.PD
\f[B]\f[BI]kind\f[B]\f[R]: It accepts a string object as parameter.
The type of sorting algorithm is decided from this parameter.
\f[B]Currently it only supports `radixsort' and other values for `kind'
parameter are ignored internally along with a warning.\f[R] (Default:
`radixsort')
.PD 0
.P
.PD
\f[B]\f[BI]na_position\f[B]\f[R]: It accepts a string object as
parameter.
It is used to decide where to puts NaNs i.e at the beginning or at the
end.
(Default: `last')
.PD 0
.P
.PD
When na_position = `last', it puts NaNs at the end.
\f[B]Currently, it only supports na_position = `last'.\f[R]
.PP
\f[B]Purpose\f[R]
.PD 0
.P
.PD
To sort the DataFrame by the values along axis = 0 or `index'.
.PP
For example,
.IP
.nf
\f[C]
import pandas as pd
import frovedis.dataframe as fdf

# creating a pandas dataframe
pd_df = pd.DataFrame({
                       \[aq]col1\[aq]: [\[aq]A\[aq], \[aq]A\[aq], \[aq]B\[aq], np.nan, \[aq]D\[aq], \[aq]C\[aq]],
                       \[aq]col2\[aq]: [2, 1, 9, 8, 7, 4],
                       \[aq]col3\[aq]: [0, 1, 9, 4, 2, 3],
                       \[aq]col4\[aq]: [\[aq]a\[aq], \[aq]B\[aq], \[aq]c\[aq], \[aq]D\[aq], \[aq]e\[aq], \[aq]F\[aq]]
                    })
                    
# creating a frovedis dataframe
fd_df = fdf.DataFrame(pd_df)

# displaying the frovedis dataframe
fd_df.show()
\f[R]
.fi
.PP
Output
.IP
.nf
\f[C]
index   col1    col2    col3    col4
0       A       2       0       a
1       A       1       1       B
2       B       9       9       c
3       NULL    8       4       D
4       D       7       2       e
5       C       4       3       F
\f[R]
.fi
.PP
For example,
.IP
.nf
\f[C]
# sorting \[aq]col1\[aq] by values on frovedis dataframe
fd_df.sort_values(by=[\[aq]col1\[aq]]).show() #Sort by col1
\f[R]
.fi
.PP
Output
.IP
.nf
\f[C]
index   col1    col2    col3    col4
0       A       2       0       a
1       A       1       1       B
2       B       9       9       c
5       C       4       3       F
4       D       7       2       e
3       NULL    8       4       D
\f[R]
.fi
.PP
For example,
.IP
.nf
\f[C]
# Sorting dataframe by multiple columns
fd_df.sort_values(by=[\[aq]col1\[aq], \[aq]col2\[aq]], ascending = [True, True]).show()
\f[R]
.fi
.PP
Output
.IP
.nf
\f[C]
index   col1    col2    col3    col4
1       A       1       1       B
0       A       2       0       a
2       B       9       9       c
5       C       4       3       F
4       D       7       2       e
3       NULL    8       4       D
\f[R]
.fi
.PP
For example,
.IP
.nf
\f[C]
# Sort in descending order
fd_df.sort_values(by=\[aq]col1\[aq], ascending=False).show()
\f[R]
.fi
.PP
Output
.IP
.nf
\f[C]
index   col1    col2    col3    col4
3       NULL    8       4       D
4       D       7       2       e
5       C       4       3       F
2       B       9       9       c
0       A       2       0       a
1       A       1       1       B
\f[R]
.fi
.PP
\f[B]Return Value\f[R]
.PD 0
.P
.PD
It returns a new Frovedis DataFrame with sorted values.
.SH SEE ALSO
.IP \[bu] 2
\f[B]DataFrame - Introduction\f[R]
.PD 0
.P
.PD
.IP \[bu] 2
\f[B]DataFrame - Generic Functions\f[R]
.PD 0
.P
.PD
.IP \[bu] 2
\f[B]DataFrame - Conversion Functions\f[R]
.PD 0
.P
.PD
.IP \[bu] 2
\f[B]DataFrame - Math Functions\f[R]
.PD 0
.P
.PD
.IP \[bu] 2
\f[B]DataFrame - Aggregate Functions\f[R]
