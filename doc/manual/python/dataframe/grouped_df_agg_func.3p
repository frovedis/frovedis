.\" Automatically generated by Pandoc 2.17.1.1
.\"
.\" Define V font for inline verbatim, using C font in formats
.\" that render this, and otherwise B font.
.ie "\f[CB]x\f[]"x" \{\
. ftr V B
. ftr VI BI
. ftr VB B
. ftr VBI BI
.\}
.el \{\
. ftr V CR
. ftr VI CI
. ftr VB CB
. ftr VBI CBI
.\}
.TH "FrovedisGroupedDataFrame Aggregate Functions" "" "" "" ""
.hy
.SH NAME
.PP
FrovedisGroupedDataFrame Aggregate Functions - aggregate operations
performed on grouped dataframe are being illustrated here.
.SS DESCRIPTION
.PP
Once FrovedisGroupedDataframe instance is created, several aggregation
operations can be performed on it such as max(), min(), sem(), var(),
etc.
.PP
The aggregation operation will basically compute summary for each group.
Some examples:
.PD 0
.P
.PD
- Compute group sums or means.
.PD 0
.P
.PD
- Compute group sizes / counts.
.PP
Also, aggregation functions can be chained along with groupby() calls in
frovedis.
.SS Public Member Functions
.IP
.nf
\f[C]
1. agg(func, \[rs]*args, \[rs]*\[rs]*kwargs)
2. aggregate(func, \[rs]*args, \[rs]*\[rs]*kwargs)
3. count(numeric_only = True)
4. groupby()
5. max(numeric_only = True, min_count = -1)
6. mean(numeric_only = True)
7. min(numeric_only = True, min_count = -1)
8. sem(ddof = 1.0)
9. size(numeric_only = True)
10. sum(numeric_only = True, min_count = 0)
11. var(ddof = 1.0)
\f[R]
.fi
.SS Detailed Description
.SS 1. agg(func, *args, **kwargs)
.PP
\f[B]Parameters\f[R]
.PD 0
.P
.PD
\f[B]\f[BI]func\f[B]\f[R]: Names of functions to use for aggregating the
data.
The input to be used with the function must be a frovedis DataFrame
instance having atleast one numeric column.
.PD 0
.P
.PD
Accepted combinations for this parameter are: - A string function name
such as `max', `min', etc.
.PD 0
.P
.PD
- list of functions and/or function names, For example, [`max', `mean'].
.PD 0
.P
.PD
- dictionary with keys as column labels and values as function name or
list of such functions.
.PD 0
.P
.PD
For Example, {`Age': [`max',`min',`mean'], `Ename': [`count']}
.PP
\f[I]\f[BI]*args\f[I]\f[R]: This is an unused parameter.
.PD 0
.P
.PD
\f[I]\f[BI]**kwargs\f[I]\f[R]: This is an unused parameter.
.PP
\f[B]Purpose\f[R]
.PD 0
.P
.PD
It computes an aggregate operation based on the condition specified in
`func'.
It is an alias for aggregate().
.PP
For example,
.IP
.nf
\f[C]
import pandas as pd
import frovedis.dataframe as fdf

# a dictionary
peopleDF = {
            \[aq]Name\[aq]:[\[aq]Jai\[aq], \[aq]Anuj\[aq], \[aq]Jai\[aq], \[aq]Princi\[aq], \[aq]Gaurav\[aq], \[aq]Anuj\[aq], \[aq]Princi\[aq], \[aq]Abhi\[aq]],
            \[aq]Age\[aq]:[27, 24, 22, 32, 33, 36, 27, 32],
            \[aq]City\[aq]:[\[aq]Nagpur\[aq], \[aq]Kanpur\[aq], \[aq]Allahabad\[aq], \[aq]Kannuaj\[aq], \[aq]Allahabad\[aq], 
                    \[aq]Kanpur\[aq], \[aq]Kanpur\[aq], \[aq]Kanpur\[aq]],
            \[aq]Qualification\[aq]:[\[aq]B.Tech\[aq], \[aq]Phd\[aq], \[aq]B.Tech\[aq], \[aq]Phd\[aq], \[aq]Phd\[aq], \[aq]B.Tech\[aq], \[aq]Phd\[aq], \[aq]B.Tech\[aq]],
            \[aq]Score\[aq]: [23, 34, 35, 45, np.nan, 50, 52, np.nan]
            }
            
# convert to pandas dataframe
pdf1 = pd.DataFrame(peopleDF)

# convert to frovedis dataframe
fdf1 = fdf.DataFrame(pdf1)

# displaying created frovedis dataframe
fdf1.show()
\f[R]
.fi
.PP
Output
.IP
.nf
\f[C]
index   Name    Age     City       Qualification  Score
0       Jai     27      Nagpur     B.Tech         23
1       Anuj    24      Kanpur     Phd            34
2       Jai     22      Allahabad  B.Tech         35
3       Princi  32      Kannuaj    Phd            45
4       Gaurav  33      Allahabad  Phd            NULL
5       Anuj    36      Kanpur     B.Tech         50
6       Princi  27      Kanpur     Phd            52
7       Abhi    32      Kanpur     B.Tech         NULL
\f[R]
.fi
.PP
For example,
.IP
.nf
\f[C]
# agg() demo with func as a function string name 
fdf1.groupby(\[aq]Qualification\[aq]).agg(\[aq]min\[aq]).show()
\f[R]
.fi
.PP
Output
.IP
.nf
\f[C]
Qualification   min_Age min_Score
B.Tech          22      23
Phd             24      34
\f[R]
.fi
.PP
It displays a frovedis dataframe containing numeric column(s) with newly
computed minimum of each groups.
.PP
For example,
.IP
.nf
\f[C]
# agg() demo with func as a dictionary 
fdf1.groupby(\[aq]Qualification\[aq]).agg({\[aq]Age\[aq]: [\[aq]max\[aq],\[aq]min\[aq],\[aq]mean\[aq]], \[aq]Score\[aq]: [\[aq]sum\[aq]]}).show()
\f[R]
.fi
.PP
Output
.IP
.nf
\f[C]
Qualification   max_Age min_Age mean_Age  sum_Score
B.Tech          36      22      29.25     108
Phd             33      24      29        13
\f[R]
.fi
.PP
For example,
.IP
.nf
\f[C]
# agg() demo where func is a list of functions 
fdf1.groupby(\[aq]Qualification\[aq]).agg([\[aq]min\[aq], \[aq]max\[aq]]).show()
\f[R]
.fi
.PP
Output
.IP
.nf
\f[C]
Qualification   min_Age max_Age min_Score  max_Score
B.Tech          22      36      23         50
Phd             24      33      34         52
\f[R]
.fi
.PP
\f[B]Return Value\f[R]
.PD 0
.P
.PD
It returns a new frovedis DataFrame instance with the result of the
specified aggregate functions.
.SS 2. aggregate(func, *args, **kwargs)
.PP
\f[B]Parameters\f[R]
.PD 0
.P
.PD
\f[B]\f[BI]func\f[B]\f[R]: Names of functions to use for aggregating the
data.
The input to be used with the function must be a frovedis DataFrame
instance having atleast one numeric column.
.PD 0
.P
.PD
Accepted combinations for this parameter are: - A string function name
such as `max', `min', etc.
.PD 0
.P
.PD
- list of functions and/or function names, For example, [`max', `mean'].
.PD 0
.P
.PD
- dictionary with keys as column labels and values as function name or
list of such functions.
.PD 0
.P
.PD
For Example, {`Age': [`max',`min',`mean'], `Ename': [`count']}
.PP
\f[I]\f[BI]*args\f[I]\f[R]: This is an unused parameter.
.PD 0
.P
.PD
\f[I]\f[BI]**kwargs\f[I]\f[R]: This is an unused parameter.
.PP
\f[B]Purpose\f[R]
.PD 0
.P
.PD
It computes an aggregate operation based on the condition specified in
`func'.
.PP
For example,
.IP
.nf
\f[C]
import pandas as pd
import frovedis.dataframe as fdf

# a dictionary
peopleDF = {
            \[aq]Name\[aq]:[\[aq]Jai\[aq], \[aq]Anuj\[aq], \[aq]Jai\[aq], \[aq]Princi\[aq], \[aq]Gaurav\[aq], \[aq]Anuj\[aq], \[aq]Princi\[aq], \[aq]Abhi\[aq]],
            \[aq]Age\[aq]:[27, 24, 22, 32, 33, 36, 27, 32],
            \[aq]City\[aq]:[\[aq]Nagpur\[aq], \[aq]Kanpur\[aq], \[aq]Allahabad\[aq], \[aq]Kannuaj\[aq], \[aq]Allahabad\[aq], 
                    \[aq]Kanpur\[aq], \[aq]Kanpur\[aq], \[aq]Kanpur\[aq]],
            \[aq]Qualification\[aq]:[\[aq]B.Tech\[aq], \[aq]Phd\[aq], \[aq]B.Tech\[aq], \[aq]Phd\[aq], \[aq]Phd\[aq], \[aq]B.Tech\[aq], \[aq]Phd\[aq], \[aq]B.Tech\[aq]],
            \[aq]Score\[aq]: [23, 34, 35, 45, np.nan, 50, 52, np.nan]
            }


# convert to pandas dataframe
pdf1 = pd.DataFrame(peopleDF)

# convert to frovedis dataframe
fdf1 = fdf.DataFrame(pdf1)

# displaying created frovedis dataframe
fdf1.show()
\f[R]
.fi
.PP
Output
.IP
.nf
\f[C]
index   Name    Age     City       Qualification  Score
0       Jai     27      Nagpur     B.Tech         23
1       Anuj    24      Kanpur     Phd            34
2       Jai     22      Allahabad  B.Tech         35
3       Princi  32      Kannuaj    Phd            45
4       Gaurav  33      Allahabad  Phd            NULL
5       Anuj    36      Kanpur     B.Tech         50
6       Princi  27      Kanpur     Phd            52
7       Abhi    32      Kanpur     B.Tech         NULL
\f[R]
.fi
.PP
For example,
.IP
.nf
\f[C]
# aggregate() demo using FrovedisGroupedDataframe instance and \[aq]func\[aq] as a function string name 
fdf1.groupby(\[aq]Qualification\[aq]).agg(\[aq]max\[aq]).show()
\f[R]
.fi
.PP
Output
.IP
.nf
\f[C]
Qualification   max_Age max_Score
B.Tech          36      50
Phd             33      52
\f[R]
.fi
.PP
It displays a frovedis dataframe containing numeric column(s) with newly
computed minimum of each groups.
.PP
For example,
.IP
.nf
\f[C]
# aggregate() demo using FrovedisGroupedDataframe instance and \[aq]func\[aq] as a dictionary 
fdf1.groupby(\[aq]Qualification\[aq]).agg({\[aq]Age\[aq]: [\[aq]count\[aq]], \[aq]Score\[aq]: [\[aq]max\[aq],\[aq]min\[aq]]}).show()
\f[R]
.fi
.PP
Output
.IP
.nf
\f[C]
Qualification   count_Age  max_Score  min_Score
B.Tech          4          50         23
Phd             4          52         34
\f[R]
.fi
.PP
For example,
.IP
.nf
\f[C]
# aggregate() demo using FrovedisGroupedDataframe instance and \[aq]func\[aq] is a list of functions 
fdf1.groupby(\[aq]Qualification\[aq]).agg([\[aq]mean\[aq],\[aq]sum\[aq]]).show()  
\f[R]
.fi
.PP
Output
.IP
.nf
\f[C]
Qualification   mean_Age  sum_Age mean_Score  sum_Score
B.Tech          29.25     117     36          108
Phd             29        116     43.6666     131
\f[R]
.fi
.PP
\f[B]Return Value\f[R]
.PD 0
.P
.PD
It returns a new frovedis DataFrame instance with the result of the
specified aggregate functions.
.SS 3. count(numeric_only = True)
.PP
\f[B]Parameters\f[R]
.PD 0
.P
.PD
\f[B]\f[BI]numeric_only\f[B]\f[R]: It accepts a boolean parameter that
specifies whether or not to use only numeric column data as input.
(Default: True)
.PP
\f[B]Purpose\f[R]
.PD 0
.P
.PD
It computes count of groups, excluding the missing values.
.PP
For example,
.IP
.nf
\f[C]
import pandas as pd
import frovedis.dataframe as fdf

# a dictionary
peopleDF = {
            \[aq]Name\[aq]:[\[aq]Jai\[aq], \[aq]Anuj\[aq], \[aq]Jai\[aq], \[aq]Princi\[aq], \[aq]Gaurav\[aq], \[aq]Anuj\[aq], \[aq]Princi\[aq], \[aq]Abhi\[aq]],
            \[aq]Age\[aq]:[27, 24, 22, 32, 33, 36, 27, 32],
            \[aq]City\[aq]:[\[aq]Nagpur\[aq], \[aq]Kanpur\[aq], \[aq]Allahabad\[aq], \[aq]Kannuaj\[aq], \[aq]Allahabad\[aq], 
                    \[aq]Kanpur\[aq], \[aq]Kanpur\[aq], \[aq]Kanpur\[aq]],
            \[aq]Qualification\[aq]:[\[aq]B.Tech\[aq], \[aq]Phd\[aq], \[aq]B.Tech\[aq], \[aq]Phd\[aq], \[aq]Phd\[aq], \[aq]B.Tech\[aq], \[aq]Phd\[aq], \[aq]B.Tech\[aq]],
            \[aq]Score\[aq]: [23, 34, 35, 45, np.nan, 50, 52, np.nan]
            }
            
# convert to pandas dataframe
pdf1 = pd.DataFrame(peopleDF)

# convert to frovedis dataframe
fdf1 = fdf.DataFrame(pdf1)

# displaying created frovedis dataframe
fdf1.show()
\f[R]
.fi
.PP
Output
.IP
.nf
\f[C]
index   Name    Age     City       Qualification  Score
0       Jai     27      Nagpur     B.Tech         23
1       Anuj    24      Kanpur     Phd            34
2       Jai     22      Allahabad  B.Tech         35
3       Princi  32      Kannuaj    Phd            45
4       Gaurav  33      Allahabad  Phd            NULL
5       Anuj    36      Kanpur     B.Tech         50
6       Princi  27      Kanpur     Phd            52
7       Abhi    32      Kanpur     B.Tech         NULL
\f[R]
.fi
.PP
For example,
.IP
.nf
\f[C]
# count() demo using FrovedisGroupedDataframe instance 
fdf1.groupby(\[aq]Qualification\[aq]).count().show()
\f[R]
.fi
.PP
Output
.IP
.nf
\f[C]
Qualification   count_Age   count_Score  count_Name  count_City
B.Tech          4           3            4           4
Phd             4           3            4           4
\f[R]
.fi
.PP
It displays a frovedis dataframe containing the newly computed count of
each groups.
.PP
Also, it excludes the missing value(s) in \f[B]`Score'\f[R] column while
computing count of groups \f[B]`B.Tech'\f[R] and \f[B]`Phd'\f[R].
.PP
\f[B]Return Value\f[R]
.PD 0
.P
.PD
It returns a new frovedis DataFrame instance with the result of the
specified aggregate functions.
.SS 4. groupby(by = None, axis = 0, level = None, as_index = True, sort = True, group_keys = True, squeeze = False, observed = False, dropna = True)
.PP
\f[B]Parameters\f[R]
.PD 0
.P
.PD
\f[B]\f[BI]by\f[B]\f[R]: It accepts a string object or an iterable to
determine the groups on which groupby operation will be applied.
Currently, gropuby operation will be applied along the index levels.
It must be provided, otherwise it will raise an exception.
(Default: None)
.PD 0
.P
.PD
\f[B]\f[BI]axis\f[B]\f[R]: It accepts an integer as parameter.
It is used to decide whether to perform groupby operation along the
indices or by column labels.
(Default: 0)
.PD 0
.P
.PD
\f[B]Currently, axis = 0 is supported by this method.\f[R]
.PD 0
.P
.PD
\f[B]\f[BI]level\f[B]\f[R]: This is an unused parameter.
(Default: None)
.PD 0
.P
.PD
\f[I]\f[BI]as_index\f[I]\f[R]: This is an unused parameter.
(Default: True)
.PD 0
.P
.PD
\f[I]\f[BI]sort\f[I]\f[R]: This is an unused parameter.
(Default: True)
.PD 0
.P
.PD
\f[I]\f[BI]group_keys\f[I]\f[R]: This is an unused parameter.
(Default: True)
.PD 0
.P
.PD
\f[I]\f[BI]squeeze\f[I]\f[R]: This is an unused parameter.
(Default: False)
.PD 0
.P
.PD
\f[I]\f[BI]observed\f[I]\f[R]: This is an unused parameter.
(Default: False)
.PD 0
.P
.PD
\f[I]\f[BI]dropna\f[I]\f[R]: It accepts a boolean parameter.
It is used to remove missing values (NaNs) from the frovedis DataFrame
during groupby operation.
Currently, it removes missing values along the index levels.
(Default: True)
.PP
\f[B]Purpose\f[R]
.PD 0
.P
.PD
This method can be used to group large amounts of data and compute
operations on these groups.
.PP
The parameters: \[lq]level\[rq], \[lq]as_index\[rq], \[lq]sort\[rq],
\[lq]group_keys\[rq], \[lq]squeeze\[rq] and \[lq]observed\[rq] is simply
kept in to make the interface uniform to the pandas DataFrame.groupby().
This is not used anywhere within the frovedis implementation.
.PP
For example,
.IP
.nf
\f[C]
import pandas as pd
import numpy as np
import frovedis.dataframe as fdf

# a dictionary
peopleDF = {
            \[aq]Name\[aq]: [\[aq]Jai\[aq], \[aq]Anuj\[aq], \[aq]Jai\[aq], \[aq]Princi\[aq], \[aq]Gaurav\[aq], \[aq]Anuj\[aq], \[aq]Princi\[aq], \[aq]Abhi\[aq]],
            \[aq]Age\[aq]: [27, 24, 22, 32, 33, 36, 27, 32],
            \[aq]City\[aq]: [\[aq]Nagpur\[aq], \[aq]Kanpur\[aq], \[aq]Allahabad\[aq], \[aq]Kannuaj\[aq], \[aq]Allahabad\[aq], 
                     \[aq]Kanpur\[aq], \[aq]Kanpur\[aq], \[aq]Kanpur\[aq]],
            \[aq]Qualification\[aq]: [\[aq]B.Tech\[aq], \[aq]Phd\[aq], \[aq]B.Tech\[aq], np.nan, \[aq]Phd\[aq], \[aq]B.Tech\[aq], \[aq]Phd\[aq], np.nan],
            \[aq]Score\[aq]: [23, 34, 35, 45, np.nan, 50, 52, np.nan]
           }

# create pandas dataframe
pdf1 = pd.DataFrame(peopleDF)

# create frovedis dataframe
fdf1 = fdf.DataFrame(pdf1)

# display the frovedis dataframe
fdf1.show()
    
\f[R]
.fi
.PP
Output
.IP
.nf
\f[C]
index   Name    Age   City       Qualification  Score
0       Jai     27    Nagpur     B.Tech         23
1       Anuj    24    Kanpur     Phd            34
2       Jai     22    Allahabad  B.Tech         35
3       Princi  32    Kannuaj    NULL           45
4       Gaurav  33    Allahabad  Phd            NULL
5       Anuj    36    Kanpur     B.Tech         50
6       Princi  27    Kanpur     Phd            52
7       Abhi    32    Kanpur     NULL           NULL
\f[R]
.fi
.PP
For example,
.IP
.nf
\f[C]
# groupby() demo
fdf1.groupby(\[aq]Qualification\[aq])
\f[R]
.fi
.PP
This will perform groupby operation on the dataframe over
\f[B]`Qualification'\f[R] column data.
.PP
For example,
.IP
.nf
\f[C]
# groupby() demo to perform aggregation on resultant grouped dataframe
# Also, dropna = True by default
fdf1.groupby(\[aq]Qualification\[aq], dropna = True).agg({\[aq]Score\[aq]: \[aq]count\[aq]})
\f[R]
.fi
.PP
Output
.IP
.nf
\f[C]
Qualification   count_Score
B.Tech  3
Phd     2
\f[R]
.fi
.PP
Here, it excludes \f[B]NULL\f[R] group since missing values were dropped
during groupby().
.PP
For example,
.IP
.nf
\f[C]
# groupby() demo to perform aggregation on resultant grouped dataframe
# Also, dropna = False
fdf1.groupby(\[aq]Qualification\[aq], dropna = False).agg({\[aq]Score\[aq]: \[aq]count\[aq]})
\f[R]
.fi
.PP
Output
.IP
.nf
\f[C]
Qualification   count_Score
B.Tech  3
Phd     2
NULL    1
\f[R]
.fi
.PP
Here, it includes \f[B]NULL\f[R] as new group since missing values were
not dropped during groupby().
.PP
\f[B]Return Value\f[R]
.PD 0
.P
.PD
It returns a FrovedisGroupedDataFrame instance.
This instance is then further used to perform aggregate operations.
.SS 5. max(numeric_only = True, min_count = -1)
.PP
\f[B]Parameters\f[R]
.PD 0
.P
.PD
\f[B]\f[BI]numeric_only\f[B]\f[R]: It accepts a boolean parameter that
specifies whether or not to use only numeric columns for aggregation.
(Default: True)
.PD 0
.P
.PD
\f[B]\f[BI]min_count\f[B]\f[R]: This is an unused parameter.
(Default: -1)
.PP
\f[B]Purpose\f[R]
.PD 0
.P
.PD
It computes the maximum of group values.
.PP
The parameter: \[lq]min_count\[rq] is simply kept in to to make the
interface uniform to the pandas GroupBy.max().
.PD 0
.P
.PD
This is not used anywhere within the frovedis implementation.
.PP
\f[B]Currently, this method only displays result for dataframe having
atleast one numeric column.\f[R]
.PP
For example,
.IP
.nf
\f[C]
import pandas as pd
import frovedis.dataframe as fdf

# a dictionary
peopleDF = {
            \[aq]Name\[aq]:[\[aq]Jai\[aq], \[aq]Anuj\[aq], \[aq]Jai\[aq], \[aq]Princi\[aq], \[aq]Gaurav\[aq], \[aq]Anuj\[aq], \[aq]Princi\[aq], \[aq]Abhi\[aq]],
            \[aq]Age\[aq]:[27, 24, 22, 32, 33, 36, 27, 32],
            \[aq]City\[aq]:[\[aq]Nagpur\[aq], \[aq]Kanpur\[aq], \[aq]Allahabad\[aq], \[aq]Kannuaj\[aq], \[aq]Allahabad\[aq], 
                    \[aq]Kanpur\[aq], \[aq]Kanpur\[aq], \[aq]Kanpur\[aq]],
            \[aq]Qualification\[aq]:[\[aq]B.Tech\[aq], \[aq]Phd\[aq], \[aq]B.Tech\[aq], \[aq]Phd\[aq], \[aq]Phd\[aq], \[aq]B.Tech\[aq], \[aq]Phd\[aq], \[aq]B.Tech\[aq]],
            \[aq]Score\[aq]: [23, 34, 35, 45, np.nan, 50, 52, np.nan]
            }


# convert to pandas dataframe
pdf1 = pd.DataFrame(peopleDF)

# convert to frovedis dataframe
fdf1 = fdf.DataFrame(pdf1)

# displaying created frovedis dataframe
fdf1.show()
\f[R]
.fi
.PP
Output
.IP
.nf
\f[C]
index   Name    Age     City       Qualification  Score
0       Jai     27      Nagpur     B.Tech         23
1       Anuj    24      Kanpur     Phd            34
2       Jai     22      Allahabad  B.Tech         35
3       Princi  32      Kannuaj    Phd            45
4       Gaurav  33      Allahabad  Phd            NULL
5       Anuj    36      Kanpur     B.Tech         50
6       Princi  27      Kanpur     Phd            52
7       Abhi    32      Kanpur     B.Tech         NULL
\f[R]
.fi
.PP
For example,
.IP
.nf
\f[C]
# max() demo using FrovedisGroupedDataframe instance 
fdf1.groupby(\[aq]Qualification\[aq]).max().show()
\f[R]
.fi
.PP
Output
.IP
.nf
\f[C]
Qualification   max_Age max_Score
B.Tech          36      50
Phd             33      52
\f[R]
.fi
.PP
It displays a frovedis dataframe containing numeric column(s) with newly
computed maximum of each groups.
.PP
\f[B]Return Value\f[R]
.PD 0
.P
.PD
It returns a new frovedis DataFrame instance with the result of the
specified aggregate functions.
.SS 6. mean(numeric_only = True)
.PP
\f[B]Parameters\f[R]
.PD 0
.P
.PD
\f[B]\f[BI]numeric_only\f[B]\f[R]: It accepts a boolean parameter that
specifies whether or not to use only numeric column data as input.
(Default: True)
.PP
\f[B]Purpose\f[R]
.PD 0
.P
.PD
It computes mean of groups, excluding the missing values.
.PP
\f[B]Currently, this method only displays result for dataframe having
atleast one numeric column.\f[R]
.PP
For example,
.IP
.nf
\f[C]
import pandas as pd
import frovedis.dataframe as fdf

# a dictionary
peopleDF = {
            \[aq]Name\[aq]:[\[aq]Jai\[aq], \[aq]Anuj\[aq], \[aq]Jai\[aq], \[aq]Princi\[aq], \[aq]Gaurav\[aq], \[aq]Anuj\[aq], \[aq]Princi\[aq], \[aq]Abhi\[aq]],
            \[aq]Age\[aq]:[27, 24, 22, 32, 33, 36, 27, 32],
            \[aq]City\[aq]:[\[aq]Nagpur\[aq], \[aq]Kanpur\[aq], \[aq]Allahabad\[aq], \[aq]Kannuaj\[aq], \[aq]Allahabad\[aq], 
                    \[aq]Kanpur\[aq], \[aq]Kanpur\[aq], \[aq]Kanpur\[aq]],
            \[aq]Qualification\[aq]:[\[aq]B.Tech\[aq], \[aq]Phd\[aq], \[aq]B.Tech\[aq], \[aq]Phd\[aq], \[aq]Phd\[aq], \[aq]B.Tech\[aq], \[aq]Phd\[aq], \[aq]B.Tech\[aq]],
            \[aq]Score\[aq]: [23, 34, 35, 45, np.nan, 50, 52, np.nan]
            }
            
# convert to pandas dataframe
pdf1 = pd.DataFrame(peopleDF)

# convert to frovedis dataframe
fdf1 = fdf.DataFrame(pdf1)

# displaying created frovedis dataframe
fdf1.show()
\f[R]
.fi
.PP
Output
.IP
.nf
\f[C]
index   Name    Age     City       Qualification  Score
0       Jai     27      Nagpur     B.Tech         23
1       Anuj    24      Kanpur     Phd            34
2       Jai     22      Allahabad  B.Tech         35
3       Princi  32      Kannuaj    Phd            45
4       Gaurav  33      Allahabad  Phd            NULL
5       Anuj    36      Kanpur     B.Tech         50
6       Princi  27      Kanpur     Phd            52
7       Abhi    32      Kanpur     B.Tech         NULL
\f[R]
.fi
.PP
For example,
.IP
.nf
\f[C]
# mean() demo using FrovedisGroupedDataframe instance 
fdf1.groupby(\[aq]Qualification\[aq]).mean().show()
\f[R]
.fi
.PP
Output
.IP
.nf
\f[C]
Qualification   mean_Age  mean_Score
B.Tech          29.25     36
Phd             29        43.6666
\f[R]
.fi
.PP
It displays a frovedis dataframe containing numeric column(s) with newly
computed mean of each groups.
.PP
Also, it excludes the missing value(s) in \f[B]`Score'\f[R] column while
computing mean of groups \f[B]`B.Tech'\f[R] and \f[B]`Phd'\f[R].
.PP
\f[B]Return Value\f[R]
.PD 0
.P
.PD
It returns a new frovedis DataFrame instance with the result of the
specified aggregate functions.
.SS 7. min(numeric_only = True, min_count = -1)
.PP
\f[B]Parameters\f[R]
.PD 0
.P
.PD
\f[B]\f[BI]numeric_only\f[B]\f[R]: It accepts a boolean parameter that
specifies whether or not to use only numeric columns for aggregation.
(Default: True)
.PD 0
.P
.PD
\f[B]\f[BI]min_count\f[B]\f[R]: This is an unused parameter.
(Default: -1)
.PP
\f[B]Purpose\f[R]
.PD 0
.P
.PD
It computes the minimum of group values.
.PP
The parameter: \[lq]min_count\[rq] is simply kept in to to make the
interface uniform to the pandas GroupBy.min().
This is not used anywhere within the frovedis implementation.
.PP
\f[B]Currently, this method only displays result for dataframe having
atleast one numeric column.\f[R]
.PP
For example,
.IP
.nf
\f[C]
import pandas as pd
import frovedis.dataframe as fdf

# a dictionary
peopleDF = {
            \[aq]Name\[aq]:[\[aq]Jai\[aq], \[aq]Anuj\[aq], \[aq]Jai\[aq], \[aq]Princi\[aq], \[aq]Gaurav\[aq], \[aq]Anuj\[aq], \[aq]Princi\[aq], \[aq]Abhi\[aq]],
            \[aq]Age\[aq]:[27, 24, 22, 32, 33, 36, 27, 32],
            \[aq]City\[aq]:[\[aq]Nagpur\[aq], \[aq]Kanpur\[aq], \[aq]Allahabad\[aq], \[aq]Kannuaj\[aq], \[aq]Allahabad\[aq], 
                    \[aq]Kanpur\[aq], \[aq]Kanpur\[aq], \[aq]Kanpur\[aq]],
            \[aq]Qualification\[aq]:[\[aq]B.Tech\[aq], \[aq]Phd\[aq], \[aq]B.Tech\[aq], \[aq]Phd\[aq], \[aq]Phd\[aq], \[aq]B.Tech\[aq], \[aq]Phd\[aq], \[aq]B.Tech\[aq]],
            \[aq]Score\[aq]: [23, 34, 35, 45, np.nan, 50, 52, np.nan]
            }
            
# convert to pandas dataframe
pdf1 = pd.DataFrame(peopleDF)

# convert to frovedis dataframe
fdf1 = fdf.DataFrame(pdf1)

# displaying created frovedis dataframe
fdf1.show()
\f[R]
.fi
.PP
Output
.IP
.nf
\f[C]
index   Name    Age     City       Qualification  Score
0       Jai     27      Nagpur     B.Tech         23
1       Anuj    24      Kanpur     Phd            34
2       Jai     22      Allahabad  B.Tech         35
3       Princi  32      Kannuaj    Phd            45
4       Gaurav  33      Allahabad  Phd            NULL
5       Anuj    36      Kanpur     B.Tech         50
6       Princi  27      Kanpur     Phd            52
7       Abhi    32      Kanpur     B.Tech         NULL
\f[R]
.fi
.PP
For example,
.IP
.nf
\f[C]
# min() demo using FrovedisGroupedDataframe instance 
fdf1.groupby(\[aq]Qualification\[aq]).min().show()
\f[R]
.fi
.PP
Output
.IP
.nf
\f[C]
Qualification   min_Age min_Score
B.Tech          22      23
Phd             24      34
\f[R]
.fi
.PP
It displays a frovedis dataframe containing numeric column(s) with newly
computed minimum of each groups.
.PP
\f[B]Return Value\f[R]
.PD 0
.P
.PD
It returns a new frovedis DataFrame instance with the result of the
specified aggregate functions.
.SS 8. sem(ddof = 1.0)
.PP
\f[B]Parameters\f[R]
.PD 0
.P
.PD
\f[B]\f[BI]ddof\f[B]\f[R]: It accepts an integer parameter that
specifies the delta degrees of freedom.
(Default: 1.0)
.PP
\f[B]Purpose\f[R]
.PD 0
.P
.PD
It computes standard error of the mean of groups, excluding missing
values.
.PP
\f[B]Currently, this method only displays result for dataframe having
atleast one numeric column.\f[R]
.PP
For example,
.IP
.nf
\f[C]
import pandas as pd
import frovedis.dataframe as fdf

# a dictionary
peopleDF = {
            \[aq]Name\[aq]:[\[aq]Jai\[aq], \[aq]Anuj\[aq], \[aq]Jai\[aq], \[aq]Princi\[aq], \[aq]Gaurav\[aq], \[aq]Anuj\[aq], \[aq]Princi\[aq], \[aq]Abhi\[aq]],
            \[aq]Age\[aq]:[27, 24, 22, 32, 33, 36, 27, 32],
            \[aq]City\[aq]:[\[aq]Nagpur\[aq], \[aq]Kanpur\[aq], \[aq]Allahabad\[aq], \[aq]Kannuaj\[aq], \[aq]Allahabad\[aq], 
                    \[aq]Kanpur\[aq], \[aq]Kanpur\[aq], \[aq]Kanpur\[aq]],
            \[aq]Qualification\[aq]:[\[aq]B.Tech\[aq], \[aq]Phd\[aq], \[aq]B.Tech\[aq], \[aq]Phd\[aq], \[aq]Phd\[aq], \[aq]B.Tech\[aq], \[aq]Phd\[aq], \[aq]B.Tech\[aq]],
            \[aq]Score\[aq]: [23, 34, 35, 45, np.nan, 50, 52, np.nan]
            }
            
# convert to pandas dataframe
pdf1 = pd.DataFrame(peopleDF)

# convert to frovedis dataframe
fdf1 = fdf.DataFrame(pdf1)

# displaying created frovedis dataframe
fdf1.show()
\f[R]
.fi
.PP
Output
.IP
.nf
\f[C]
index   Name    Age     City       Qualification  Score
0       Jai     27      Nagpur     B.Tech         23
1       Anuj    24      Kanpur     Phd            34
2       Jai     22      Allahabad  B.Tech         35
3       Princi  32      Kannuaj    Phd            45
4       Gaurav  33      Allahabad  Phd            NULL
5       Anuj    36      Kanpur     B.Tech         50
6       Princi  27      Kanpur     Phd            52
7       Abhi    32      Kanpur     B.Tech         NULL
\f[R]
.fi
.PP
For example,
.IP
.nf
\f[C]
# sem() demo using FrovedisGroupedDataframe instance and default ddof value 
fdf1.groupby(\[aq]Qualification\[aq]).sem().show()
\f[R]
.fi
.PP
Output
.IP
.nf
\f[C]
Qualification   sem_Age  sem_Score
B.Tech          3.03795  7.81024
Phd             2.12132  5.23874
\f[R]
.fi
.PP
It displays a frovedis dataframe with numeric column(s) containing the
newly computed standard error of mean for each groups.
.PP
Also, it excludes the missing value(s) in \f[B]`Score'\f[R] column while
computing standard error of mean for the groups \f[B]`B.Tech'\f[R] and
\f[B]`Phd'\f[R].
.PP
For example,
.IP
.nf
\f[C]
# sem() demo using ddof = 2 
fdf1.groupby(\[aq]Qualification\[aq]).sem(ddof = 2).show()
\f[R]
.fi
.PP
Output
.IP
.nf
\f[C]
Qualification   sem_Age  sem_Score
B.Tech          3.72071  11.0453
Phd             2.59807  7.4087
\f[R]
.fi
.PP
\f[B]Return Value\f[R]
.PD 0
.P
.PD
It returns a new frovedis DataFrame instance with the result of the
specified aggregate functions.
.SS 9. size(numeric_only = True)
.PP
\f[B]Parameters\f[R]
.PD 0
.P
.PD
\f[B]\f[BI]numeric_only\f[B]\f[R]: It accepts a boolean parameter that
specifies whether or not to use only numeric column data as input.
(Default: True)
.PP
\f[B]Purpose\f[R]
.PD 0
.P
.PD
It computes group sizes, including the missing values.
.PP
For example,
.IP
.nf
\f[C]
import pandas as pd
import frovedis.dataframe as fdf

# a dictionary
peopleDF = {
            \[aq]Name\[aq]:[\[aq]Jai\[aq], \[aq]Anuj\[aq], \[aq]Jai\[aq], \[aq]Princi\[aq], \[aq]Gaurav\[aq], \[aq]Anuj\[aq], \[aq]Princi\[aq], \[aq]Abhi\[aq]],
            \[aq]Age\[aq]:[27, 24, 22, 32, 33, 36, 27, 32],
            \[aq]City\[aq]:[\[aq]Nagpur\[aq], \[aq]Kanpur\[aq], \[aq]Allahabad\[aq], \[aq]Kannuaj\[aq], \[aq]Allahabad\[aq], 
                    \[aq]Kanpur\[aq], \[aq]Kanpur\[aq], \[aq]Kanpur\[aq]],
            \[aq]Qualification\[aq]:[\[aq]B.Tech\[aq], \[aq]Phd\[aq], \[aq]B.Tech\[aq], \[aq]Phd\[aq], \[aq]Phd\[aq], \[aq]B.Tech\[aq], \[aq]Phd\[aq], \[aq]B.Tech\[aq]],
            \[aq]Score\[aq]: [23, 34, 35, 45, np.nan, 50, 52, np.nan]
            }
            
# convert to pandas dataframe
pdf1 = pd.DataFrame(peopleDF)

# convert to frovedis dataframe
fdf1 = fdf.DataFrame(pdf1)

# displaying created frovedis dataframe
fdf1.show()
\f[R]
.fi
.PP
Output
.IP
.nf
\f[C]
index   Name    Age     City       Qualification  Score
0       Jai     27      Nagpur     B.Tech         23
1       Anuj    24      Kanpur     Phd            34
2       Jai     22      Allahabad  B.Tech         35
3       Princi  32      Kannuaj    Phd            45
4       Gaurav  33      Allahabad  Phd            NULL
5       Anuj    36      Kanpur     B.Tech         50
6       Princi  27      Kanpur     Phd            52
7       Abhi    32      Kanpur     B.Tech         NULL
\f[R]
.fi
.PP
For example,
.IP
.nf
\f[C]
# size() demo using FrovedisGroupedDataframe instance 
fdf1.groupby(\[aq]Qualification\[aq]).size().show()
\f[R]
.fi
.PP
Output
.IP
.nf
\f[C]
Qualification   size_Qualification
B.Tech          4
Phd             4
\f[R]
.fi
.PP
It displays a frovedis dataframe containing a column with the newly
computed size of each group.
.PP
Also, it does not exclude the missings values while computing group
size.
.PP
\f[B]Return Value\f[R]
.PD 0
.P
.PD
It returns a new frovedis DataFrame instance with the result of the
specified aggregate functions.
.SS 10. sum(numeric_only = True, min_count = 0)
.PP
\f[B]Parameters\f[R]
.PD 0
.P
.PD
\f[B]\f[BI]numeric_only\f[B]\f[R]: It accepts a boolean parameter that
specifies whether or not to use only numeric column data as input.
(Default: True)
.PD 0
.P
.PD
\f[B]\f[BI]min_count\f[B]\f[R]: This is an unused parameter.
(Default: 0)
.PP
\f[B]Purpose\f[R]
.PD 0
.P
.PD
It computes the sum of group values.
.PP
The parameter: \[lq]min_count\[rq] is simply kept in to to make the
interface uniform to the pandas GroupBy.sum().
.PD 0
.P
.PD
This is not used anywhere within the frovedis implementation.
.PP
\f[B]Currently, this method only displays result for dataframe having
atleast one numeric column.\f[R]
.PP
For example,
.IP
.nf
\f[C]
import pandas as pd
import frovedis.dataframe as fdf

# a dictionary
peopleDF = {
            \[aq]Name\[aq]:[\[aq]Jai\[aq], \[aq]Anuj\[aq], \[aq]Jai\[aq], \[aq]Princi\[aq], \[aq]Gaurav\[aq], \[aq]Anuj\[aq], \[aq]Princi\[aq], \[aq]Abhi\[aq]],
            \[aq]Age\[aq]:[27, 24, 22, 32, 33, 36, 27, 32],
            \[aq]City\[aq]:[\[aq]Nagpur\[aq], \[aq]Kanpur\[aq], \[aq]Allahabad\[aq], \[aq]Kannuaj\[aq], \[aq]Allahabad\[aq], 
                    \[aq]Kanpur\[aq], \[aq]Kanpur\[aq], \[aq]Kanpur\[aq]],
            \[aq]Qualification\[aq]:[\[aq]B.Tech\[aq], \[aq]Phd\[aq], \[aq]B.Tech\[aq], \[aq]Phd\[aq], \[aq]Phd\[aq], \[aq]B.Tech\[aq], \[aq]Phd\[aq], \[aq]B.Tech\[aq]],
            \[aq]Score\[aq]: [23, 34, 35, 45, np.nan, 50, 52, np.nan]
            }
            
# convert to pandas dataframe
pdf1 = pd.DataFrame(peopleDF)

# convert to frovedis dataframe
fdf1 = fdf.DataFrame(pdf1)

# displaying created frovedis dataframe
fdf1.show()
\f[R]
.fi
.PP
Output
.IP
.nf
\f[C]
index   Name    Age     City       Qualification  Score
0       Jai     27      Nagpur     B.Tech         23
1       Anuj    24      Kanpur     Phd            34
2       Jai     22      Allahabad  B.Tech         35
3       Princi  32      Kannuaj    Phd            45
4       Gaurav  33      Allahabad  Phd            NULL
5       Anuj    36      Kanpur     B.Tech         50
6       Princi  27      Kanpur     Phd            52
7       Abhi    32      Kanpur     B.Tech         NULL
\f[R]
.fi
.PP
For example,
.IP
.nf
\f[C]
# sum() demo using FrovedisGroupedDataframe instance 
fdf1.groupby(\[aq]Qualification\[aq]).sum().show()
\f[R]
.fi
.PP
Output
.IP
.nf
\f[C]
Qualification   sum_Age sum_Score
B.Tech          117     108
Phd             116     131
\f[R]
.fi
.PP
It displays a frovedis dataframe containing numeric column(s) with newly
computed sum of each groups.
.PP
\f[B]Return Value\f[R]
.PD 0
.P
.PD
It returns a new frovedis DataFrame instance with the result of the
specified aggregate functions.
.SS 11. var(ddof = 1.0)
.PP
\f[B]Parameters\f[R]
.PD 0
.P
.PD
\f[B]\f[BI]ddof\f[B]\f[R]: It accepts an integer parameter that
specifies the delta degrees of freedom.
(Default: 1.0)
.PP
\f[B]Purpose\f[R]
.PD 0
.P
.PD
It computes the variance of groups, excluding missing values.
.PP
\f[B]Currently, this method only displays result for dataframe having
atleast one numeric column.\f[R]
.PP
For example,
.IP
.nf
\f[C]
import pandas as pd
import frovedis.dataframe as fdf

# a dictionary
peopleDF = {
            \[aq]Name\[aq]:[\[aq]Jai\[aq], \[aq]Anuj\[aq], \[aq]Jai\[aq], \[aq]Princi\[aq], \[aq]Gaurav\[aq], \[aq]Anuj\[aq], \[aq]Princi\[aq], \[aq]Abhi\[aq]],
            \[aq]Age\[aq]:[27, 24, 22, 32, 33, 36, 27, 32],
            \[aq]City\[aq]:[\[aq]Nagpur\[aq], \[aq]Kanpur\[aq], \[aq]Allahabad\[aq], \[aq]Kannuaj\[aq], \[aq]Allahabad\[aq], 
                    \[aq]Kanpur\[aq], \[aq]Kanpur\[aq], \[aq]Kanpur\[aq]],
            \[aq]Qualification\[aq]:[\[aq]B.Tech\[aq], \[aq]Phd\[aq], \[aq]B.Tech\[aq], \[aq]Phd\[aq], \[aq]Phd\[aq], \[aq]B.Tech\[aq], \[aq]Phd\[aq], \[aq]B.Tech\[aq]],
            \[aq]Score\[aq]: [23, 34, 35, 45, np.nan, 50, 52, np.nan]
            }
            
# convert to pandas dataframe
pdf1 = pd.DataFrame(peopleDF)

# convert to frovedis dataframe
fdf1 = fdf.DataFrame(pdf1)

# displaying created frovedis dataframe
fdf1.show()
\f[R]
.fi
.PP
Output
.IP
.nf
\f[C]
index   Name    Age     City       Qualification  Score
0       Jai     27      Nagpur     B.Tech         23
1       Anuj    24      Kanpur     Phd            34
2       Jai     22      Allahabad  B.Tech         35
3       Princi  32      Kannuaj    Phd            45
4       Gaurav  33      Allahabad  Phd            NULL
5       Anuj    36      Kanpur     B.Tech         50
6       Princi  27      Kanpur     Phd            52
7       Abhi    32      Kanpur     B.Tech         NULL
\f[R]
.fi
.PP
For example,
.IP
.nf
\f[C]
# var() demo using FrovedisGroupedDataframe instance and default ddof value
fdf1.groupby(\[aq]Qualification\[aq]).var().show()
\f[R]
.fi
.PP
Output
.IP
.nf
\f[C]
Qualification   var_Age  var_Score
B.Tech          36.9166  183
Phd             18       82.3333
\f[R]
.fi
.PP
It displays a frovedis dataframe with numeric column(s) containing the
newly computed variance for each groups.
.PP
Also, it excludes the missing value in \f[B]`Score'\f[R] column while
computing variance of groups \f[B]`B.Tech'\f[R] and \f[B]`Phd'\f[R].
.PP
For example,
.IP
.nf
\f[C]
# var() demo using ddof = 2 
fdf1.groupby(\[aq]Qualification\[aq]).var(ddof = 2).show()
\f[R]
.fi
.PP
Output
.IP
.nf
\f[C]
Qualification   var_Age var_Score
B.Tech          55.375  366
Phd             27      164.666
\f[R]
.fi
.PP
\f[B]Return Value\f[R]
.PD 0
.P
.PD
It returns a new frovedis DataFrame instance with the result of the
specified aggregate functions.
.SH SEE ALSO
.IP \[bu] 2
\f[B]Introduction to FrovedisGroupedDataFrame\f[R]
.PD 0
.P
.PD
.IP \[bu] 2
\f[B]Introduction to frovedis DataFrame\f[R]
