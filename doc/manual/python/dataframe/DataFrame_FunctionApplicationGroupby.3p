.TH "DataFrame Function Application, Groupby" "" "" "" ""
.SH NAME
.PP
DataFrame FunctionApplication, Groupby \- list of all functions related
to function application, groupby operations on frovedis dataframe are
illustrated here.
.SS SYNOPSIS
.IP
.nf
\f[C]
frovedis.dataframe.df.DataFrame(df\ =\ None,\ is_series\ =\ False)\ \ 
\f[]
.fi
.SS Public Member Functions
.IP
.nf
\f[C]
1.\ agg(func)\ \ 
2.\ apply(func,\ axis\ =\ 0,\ raw\ =\ False,\ result_type\ =\ None,\ args\ =\ (),\ \\*\\*kwds)\ \ 
3.\ groupby(min_periods\ =\ None,\ ddof\ =\ 1.0,\ low_memory\ =\ True,\ other\ =\ None)
\f[]
.fi
.SS Detailed Description
.SS 1. agg(func)
.PP
\f[B]Parameters\f[]
.PD 0
.P
.PD
\f[B]\f[I]func\f[]\f[]: Names of functions to use for aggregating the
data.
The input to be used with the function must be a frovedis DataFrame
instance having atleast one numeric column.
.PD 0
.P
.PD
Accepted combinations for this parameter are: \- A string function name
such as \[aq]max\[aq], \[aq]min\[aq], etc.
.PD 0
.P
.PD
\- list of functions and/or function names, For example, [\[aq]max\[aq],
\[aq]mean\[aq]].
.PD 0
.P
.PD
\- dictionary with keys as column labels and values as function name or
list of such functions.
.PD 0
.P
.PD
For Example, {\[aq]Age\[aq]:
[\[aq]max\[aq],\[aq]min\[aq],\[aq]mean\[aq]], \[aq]Ename\[aq]:
[\[aq]count\[aq]]}
.PP
\f[B]Purpose\f[]
.PD 0
.P
.PD
It computes an aggregate operation based on the condition specified in
\[aq]func\[aq].
.PP
\f[B]Currently, this method will perform aggregation operation along the
rows.\f[]
.PP
For example,
.IP
.nf
\f[C]
import\ pandas\ as\ pd
import\ numpy\ as\ np
import\ frovedis.dataframe\ as\ fdf

#\ a\ dictionary
peopleDF\ =\ {
\ \ \ \ \ \ \ \ \ \ \ \ \[aq]Name\[aq]:[\[aq]Jai\[aq],\ \[aq]Anuj\[aq],\ \[aq]Jai\[aq],\ \[aq]Princi\[aq],\ \[aq]Gaurav\[aq],\ \[aq]Anuj\[aq],\ \[aq]Princi\[aq],\ \[aq]Abhi\[aq]],
\ \ \ \ \ \ \ \ \ \ \ \ \[aq]Age\[aq]:[27,\ 24,\ 22,\ 32,\ 33,\ 36,\ 27,\ 32],
\ \ \ \ \ \ \ \ \ \ \ \ \[aq]City\[aq]:[\[aq]Nagpur\[aq],\ \[aq]Kanpur\[aq],\ \[aq]Allahabad\[aq],\ \[aq]Kannuaj\[aq],\ \[aq]Allahabad\[aq],\ 
\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \[aq]Kanpur\[aq],\ \[aq]Kanpur\[aq],\ \[aq]Kanpur\[aq]],
\ \ \ \ \ \ \ \ \ \ \ \ \[aq]Qualification\[aq]:[\[aq]B.Tech\[aq],\ \[aq]Phd\[aq],\ \[aq]B.Tech\[aq],\ \[aq]Phd\[aq],\ \[aq]Phd\[aq],\ \[aq]B.Tech\[aq],\ \[aq]Phd\[aq],\ \[aq]B.Tech\[aq]],
\ \ \ \ \ \ \ \ \ \ \ \ \[aq]Score\[aq]:\ [23,\ 34,\ 35,\ 45,\ np.nan,\ 50,\ 52,\ np.nan]
\ \ \ \ \ \ \ \ \ \ \ \ }

#\ create\ pandas\ dataframe
pdf1\ =\ pd.DataFrame(peopleDF)

#\ create\ frovedis\ dataframe
fdf1\ =\ fdf.DataFrame(pdf1)

#\ display\ the\ frovedis\ dataframe
fdf1.show()
\f[]
.fi
.PP
Output
.IP
.nf
\f[C]
index\ \ \ Name\ \ \ \ Age\ \ \ \ \ City\ \ \ \ \ \ \ Qualification\ \ Score
0\ \ \ \ \ \ \ Jai\ \ \ \ \ 27\ \ \ \ \ \ Nagpur\ \ \ \ \ B.Tech\ \ \ \ \ \ \ \ \ 23
1\ \ \ \ \ \ \ Anuj\ \ \ \ 24\ \ \ \ \ \ Kanpur\ \ \ \ \ Phd\ \ \ \ \ \ \ \ \ \ \ \ 34
2\ \ \ \ \ \ \ Jai\ \ \ \ \ 22\ \ \ \ \ \ Allahabad\ \ B.Tech\ \ \ \ \ \ \ \ \ 35
3\ \ \ \ \ \ \ Princi\ \ 32\ \ \ \ \ \ Kannuaj\ \ \ \ Phd\ \ \ \ \ \ \ \ \ \ \ \ 45
4\ \ \ \ \ \ \ Gaurav\ \ 33\ \ \ \ \ \ Allahabad\ \ Phd\ \ \ \ \ \ \ \ \ \ \ \ NULL
5\ \ \ \ \ \ \ Anuj\ \ \ \ 36\ \ \ \ \ \ Kanpur\ \ \ \ \ B.Tech\ \ \ \ \ \ \ \ \ 50
6\ \ \ \ \ \ \ Princi\ \ 27\ \ \ \ \ \ Kanpur\ \ \ \ \ Phd\ \ \ \ \ \ \ \ \ \ \ \ 52
7\ \ \ \ \ \ \ Abhi\ \ \ \ 32\ \ \ \ \ \ Kanpur\ \ \ \ \ B.Tech\ \ \ \ \ \ \ \ \ NULL
\f[]
.fi
.PP
For example,
.IP
.nf
\f[C]
#\ agg()\ demo\ with\ func\ as\ a\ function\ string\ name\ 
print(fdf1.agg(\[aq]max\[aq]))
\f[]
.fi
.PP
Output
.IP
.nf
\f[C]
Name\ \ \ \ \ \ \ \ \ \ \ \ \ nan
Age\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ 36
City\ \ \ \ \ \ \ \ \ \ \ \ \ nan
Qualification\ \ \ \ nan
Score\ \ \ \ \ \ \ \ \ \ \ \ \ 52
Name:\ max,\ dtype:\ object
\f[]
.fi
.PP
It displays a pandas dataframe containing numeric column(s) with newly
computed aggregates of each groups.
.PP
For example,
.IP
.nf
\f[C]
#\ agg()\ demo\ with\ func\ as\ a\ dictionary\ 
print(fdf1.agg({"Age":\ ["std",\ "mean"]}))
\f[]
.fi
.PP
Output
.IP
.nf
\f[C]
\ \ \ \ \ \ \ \ \ \ \ \ Age
mean\ \ 29.125000
std\ \ \ \ 4.853202
\f[]
.fi
.PP
For example,
.IP
.nf
\f[C]
#\ agg()\ demo\ where\ func\ is\ a\ list\ of\ functions\ 
print(fdf1[\[aq]Age\[aq]].agg([\[aq]max\[aq],\[aq]min\[aq],\[aq]mean\[aq]])
\f[]
.fi
.PP
Output
.IP
.nf
\f[C]
\ \ \ \ \ \ \ \ \ Age
max\ \ \ 36.000
min\ \ \ 22.000
mean\ \ 29.125
\f[]
.fi
.PP
\f[B]Return Value\f[]
.PD 0
.P
.PD
1.
\f[B]If one \[aq]func\[aq] provided and \[aq]func\[aq] is a string:\f[]
.PD 0
.P
.PD
\- It returns a pandas Series instance with numeric column(s) only,
after aggregation function is completed.
.PD 0
.P
.PD
2.
\f[B]If one or more \[aq]func\[aq] provided and \[aq]func\[aq] is
list/dict of string:\f[]
.PD 0
.P
.PD
\- It returns a pandas DataFrame instance with numeric column(s) only,
after aggregation function is completed.
.SS 2. apply(func, axis = 0, raw = False, result_type = None, args = (),
**kwds)
.PP
\f[B]Parameters\f[]
.PD 0
.P
.PD
\f[B]\f[I]func\f[]\f[]: Names of functions to be applied on the data.
The input to be used with the function must be a frovedis DataFrame
instance having atleast one numeric column.
.PD 0
.P
.PD
Accepted combinations for this parameter are:
.PD 0
.P
.PD
\- A string function name such as \[aq]max\[aq], \[aq]min\[aq], etc.
.PD 0
.P
.PD
\- list of functions and/or function names, For example, [\[aq]max\[aq],
\[aq]mean\[aq]].
.PD 0
.P
.PD
\- dictionary with keys as column labels and values as function name or
list of such functions.
.PD 0
.P
.PD
For Example, {\[aq]Age\[aq]:
[\[aq]max\[aq],\[aq]min\[aq],\[aq]mean\[aq]], \[aq]Ename\[aq]:
[\[aq]count\[aq]]}
.PP
\f[B]\f[I]axis\f[]\f[]: It accepts an integer as parameter.
It is used to decide whether to perform aggregate operation along the
columns or rows.
(Default: 0)
.PD 0
.P
.PD
\f[I]\f[B]raw\f[]\f[]: It accepts boolean as parameter.
When set to True, the row/column will be passed as an ndarray.
(Default: False)
.PD 0
.P
.PD
\f[I]\f[B]result_type\f[]\f[]: It accepts string object as parameter.
It specifies how the result will be returned.
(Default: None)
.PD 0
.P
.PD
These only act when \f[B]axis = 1 (columns)\f[]:
.PD 0
.P
.PD
\- \f[B]expand\f[] : list\-like results will be turned into columns.
.PD 0
.P
.PD
\- \f[B]reduce\f[] : returns a Series if possible rather than expanding
list\-like results.
This is the opposite of \[aq]expand\[aq].
.PD 0
.P
.PD
\- \f[B]broadcast\f[] : results will be broadcast to the original shape
of the DataFrame, the original index and columns will be retained.
.PP
The default behaviour (None) depends on the return value of the applied
function.
List\-like results will be returned as a Series of those.
However if the apply function returns a Series these are expanded to
columns.
.PD 0
.P
.PD
\f[I]\f[B]args\f[]\f[]: Positional arguments to pass to \[aq]func\[aq].
(Default: ())
.PD 0
.P
.PD
\f[I]\f[B]**kwds\f[]\f[]: This is an unused parameter.
.PP
\f[B]Purpose\f[]
.PD 0
.P
.PD
Apply a function along an axis of the DataFrame.
.PP
The parameter: "**kwds" is simply kept in to make the interface uniform
to the pandas DataFrame.apply().
.PD 0
.P
.PD
This is not used anywhere within the frovedis implementation.
.PP
For example,
.IP
.nf
\f[C]
import\ pandas\ as\ pd
import\ numpy\ as\ np
import\ frovedis.dataframe\ as\ fdf

#\ a\ dictionary
peopleDF\ =\ {
\ \ \ \ \ \ \ \ \ \ \ \ \[aq]Name\[aq]:[\[aq]Jai\[aq],\ \[aq]Anuj\[aq],\ \[aq]Jai\[aq],\ \[aq]Princi\[aq],\ \[aq]Gaurav\[aq],\ \[aq]Anuj\[aq],\ \[aq]Princi\[aq],\ \[aq]Abhi\[aq]],
\ \ \ \ \ \ \ \ \ \ \ \ \[aq]Age\[aq]:[27,\ 24,\ 22,\ 32,\ 33,\ 36,\ 27,\ 32],
\ \ \ \ \ \ \ \ \ \ \ \ \[aq]City\[aq]:[\[aq]Nagpur\[aq],\ \[aq]Kanpur\[aq],\ \[aq]Allahabad\[aq],\ \[aq]Kannuaj\[aq],\ \[aq]Allahabad\[aq],\ 
\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \[aq]Kanpur\[aq],\ \[aq]Kanpur\[aq],\ \[aq]Kanpur\[aq]],
\ \ \ \ \ \ \ \ \ \ \ \ \[aq]Qualification\[aq]:[\[aq]B.Tech\[aq],\ \[aq]Phd\[aq],\ \[aq]B.Tech\[aq],\ \[aq]Phd\[aq],\ \[aq]Phd\[aq],\ \[aq]B.Tech\[aq],\ \[aq]Phd\[aq],\ \[aq]B.Tech\[aq]],
\ \ \ \ \ \ \ \ \ \ \ \ \[aq]Score\[aq]:\ [23,\ 34,\ 35,\ 45,\ np.nan,\ 50,\ 52,\ np.nan]
\ \ \ \ \ \ \ \ \ \ \ \ }

#\ create\ pandas\ dataframe
pdf1\ =\ pd.DataFrame(peopleDF)

#\ create\ frovedis\ dataframe
fdf1\ =\ fdf.DataFrame(pdf1)

#\ display\ the\ frovedis\ dataframe
fdf1.show()
\f[]
.fi
.PP
Output
.IP
.nf
\f[C]
index\ \ \ Name\ \ \ \ Age\ \ \ \ \ City\ \ \ \ \ \ \ Qualification\ \ Score
0\ \ \ \ \ \ \ Jai\ \ \ \ \ 27\ \ \ \ \ \ Nagpur\ \ \ \ \ B.Tech\ \ \ \ \ \ \ \ \ 23
1\ \ \ \ \ \ \ Anuj\ \ \ \ 24\ \ \ \ \ \ Kanpur\ \ \ \ \ Phd\ \ \ \ \ \ \ \ \ \ \ \ 34
2\ \ \ \ \ \ \ Jai\ \ \ \ \ 22\ \ \ \ \ \ Allahabad\ \ B.Tech\ \ \ \ \ \ \ \ \ 35
3\ \ \ \ \ \ \ Princi\ \ 32\ \ \ \ \ \ Kannuaj\ \ \ \ Phd\ \ \ \ \ \ \ \ \ \ \ \ 45
4\ \ \ \ \ \ \ Gaurav\ \ 33\ \ \ \ \ \ Allahabad\ \ Phd\ \ \ \ \ \ \ \ \ \ \ \ NULL
5\ \ \ \ \ \ \ Anuj\ \ \ \ 36\ \ \ \ \ \ Kanpur\ \ \ \ \ B.Tech\ \ \ \ \ \ \ \ \ 50
6\ \ \ \ \ \ \ Princi\ \ 27\ \ \ \ \ \ Kanpur\ \ \ \ \ Phd\ \ \ \ \ \ \ \ \ \ \ \ 52
7\ \ \ \ \ \ \ Abhi\ \ \ \ 32\ \ \ \ \ \ Kanpur\ \ \ \ \ B.Tech\ \ \ \ \ \ \ \ \ NULL
\f[]
.fi
.PP
For example,
.IP
.nf
\f[C]
#\ apply()\ demo\ using\ string\ function\ name
print(fdf1.apply(\[aq]max\[aq]))
\f[]
.fi
.PP
Output
.IP
.nf
\f[C]
Name\ \ \ \ \ \ \ \ \ \ \ \ \ 8
Age\ \ \ \ \ \ \ \ \ \ \ \ \ \ 8
City\ \ \ \ \ \ \ \ \ \ \ \ \ 8
Qualification\ \ \ \ 8
Score\ \ \ \ \ \ \ \ \ \ \ \ 6
dtype:\ int64
\f[]
.fi
.PP
For example,
.IP
.nf
\f[C]
#\ apply()\ demo\ using\ axis\ =\ 1
print(fdf1.apply(\[aq]max\[aq],\ axis\ =\ 1))
\f[]
.fi
.PP
Output
.IP
.nf
\f[C]
index
0\ \ \ \ 27.0
1\ \ \ \ 34.0
2\ \ \ \ 35.0
3\ \ \ \ 45.0
4\ \ \ \ 33.0
5\ \ \ \ 50.0
6\ \ \ \ 52.0
7\ \ \ \ 32.0
dtype:\ float64
\f[]
.fi
.PP
For example,
.IP
.nf
\f[C]
#\ apply()\ demo\ using\ raw\ =\ True
print(fdf1.apply(\[aq]max\[aq],\ raw\ =\ True))
\f[]
.fi
.PP
Output
.IP
.nf
\f[C]
Name\ \ \ \ \ \ \ \ \ \ \ \ \ Princi
Age\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ 36
City\ \ \ \ \ \ \ \ \ \ \ \ \ Nagpur
Qualification\ \ \ \ \ \ \ Phd
Score\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ 52
dtype:\ object
\f[]
.fi
.PP
For example,
.IP
.nf
\f[C]
#\ apply()\ demo\ using\ result_type\ =\ \[aq]expand\[aq]
print(fdf1.apply(\[aq]max\[aq],\ result_type\ =\ \[aq]expand\[aq]))
\f[]
.fi
.PP
Output
.IP
.nf
\f[C]
Name\ \ \ \ \ \ \ \ \ \ \ \ \ Princi
Age\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ 36
City\ \ \ \ \ \ \ \ \ \ \ \ \ Nagpur
Qualification\ \ \ \ \ \ \ Phd
Score\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ 52
dtype:\ object
\f[]
.fi
.PP
\f[B]Return Value\f[]
.PD 0
.P
.PD
1.
\f[B]If only one \[aq]func\[aq] provided:\f[]
.PD 0
.P
.PD
\- It returns a pandas Series instance with numeric column(s) only,
after aggregation function is completed.
.PD 0
.P
.PD
2.
\f[B]If more than one \[aq]func\[aq] provided:\f[]
.PD 0
.P
.PD
\- It returns a pandas DataFrame instance with numeric column(s) only,
after aggregation function is completed.
.SS 3. groupby(by = None, axis = 0, level = None, as_index = True, sort
= True, group_keys = True, squeeze = False, observed = False, dropna =
True)
.PP
\f[B]Parameters\f[]
.PD 0
.P
.PD
\f[B]\f[I]by\f[]\f[]: It accepts a string object or an iterable to
determine the groups on which groupby operation will be applied.
Currently, gropuby operation will be applied along the index levels.
It must be provided, otherwise it will raise an exception.
(Default: None)
.PD 0
.P
.PD
\f[B]\f[I]axis\f[]\f[]: It accepts an integer as parameter.
It is used to decide whether to perform groupby operation along the
indices or by column labels.
(Default: 0)
.PD 0
.P
.PD
\f[B]Currently, axis = 0 is supported by this method.\f[]
.PD 0
.P
.PD
\f[B]\f[I]level\f[]\f[]: This is an unused parameter.
(Default: None)
.PD 0
.P
.PD
\f[I]\f[B]as_index\f[]\f[]: This is an unused parameter.
(Default: True)
.PD 0
.P
.PD
\f[I]\f[B]sort\f[]\f[]: This is an unused parameter.
(Default: True)
.PD 0
.P
.PD
\f[I]\f[B]group_keys\f[]\f[]: This is an unused parameter.
(Default: True)
.PD 0
.P
.PD
\f[I]\f[B]squeeze\f[]\f[]: This is an unused parameter.
(Default: False)
.PD 0
.P
.PD
\f[I]\f[B]observed\f[]\f[]: This is an unused parameter.
(Default: False)
.PD 0
.P
.PD
\f[I]\f[B]dropna\f[]\f[]: It accepts a boolean parameter.
It is used to remove missing values (NaNs) from the frovedis DataFrame
during groupby operation.
Currently, it removes missing values along the index levels.
(Default: True)
.PP
\f[B]Purpose\f[]
.PD 0
.P
.PD
This method can be used to group large amounts of data and compute
operations on these groups.
.PP
The parameters: "level", "as_index", "sort", "group_keys", "squeeze" and
"observed" is simply kept in to make the interface uniform to the pandas
DataFrame.groupby().
.PD 0
.P
.PD
This is not used anywhere within the frovedis implementation.
.PP
For example,
.IP
.nf
\f[C]
import\ pandas\ as\ pd
import\ numpy\ as\ np
import\ frovedis.dataframe\ as\ fdf

#\ a\ dictionary
peopleDF\ =\ {
\ \ \ \ \ \ \ \ \ \ \ \ \[aq]Name\[aq]:\ [\[aq]Jai\[aq],\ \[aq]Anuj\[aq],\ \[aq]Jai\[aq],\ \[aq]Princi\[aq],\ \[aq]Gaurav\[aq],\ \[aq]Anuj\[aq],\ \[aq]Princi\[aq],\ \[aq]Abhi\[aq]],
\ \ \ \ \ \ \ \ \ \ \ \ \[aq]Age\[aq]:\ [27,\ 24,\ 22,\ 32,\ 33,\ 36,\ 27,\ 32],
\ \ \ \ \ \ \ \ \ \ \ \ \[aq]City\[aq]:\ [\[aq]Nagpur\[aq],\ \[aq]Kanpur\[aq],\ \[aq]Allahabad\[aq],\ \[aq]Kannuaj\[aq],\ \[aq]Allahabad\[aq],\ 
\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \[aq]Kanpur\[aq],\ \[aq]Kanpur\[aq],\ \[aq]Kanpur\[aq]],
\ \ \ \ \ \ \ \ \ \ \ \ \[aq]Qualification\[aq]:\ [\[aq]B.Tech\[aq],\ \[aq]Phd\[aq],\ \[aq]B.Tech\[aq],\ np.nan,\ \[aq]Phd\[aq],\ \[aq]B.Tech\[aq],\ \[aq]Phd\[aq],\ np.nan],
\ \ \ \ \ \ \ \ \ \ \ \ \[aq]Score\[aq]:\ [23,\ 34,\ 35,\ 45,\ np.nan,\ 50,\ 52,\ np.nan]
\ \ \ \ \ \ \ \ \ \ \ }

#\ create\ pandas\ dataframe
pdf1\ =\ pd.DataFrame(peopleDF)

#\ create\ frovedis\ dataframe
fdf1\ =\ fdf.DataFrame(pdf1)

#\ display\ the\ frovedis\ dataframe
fdf1.show()
\ \ \ \ 
\f[]
.fi
.PP
Output
.IP
.nf
\f[C]
index\ \ \ Name\ \ \ \ Age\ \ \ City\ \ \ \ \ \ \ Qualification\ \ Score
0\ \ \ \ \ \ \ Jai\ \ \ \ \ 27\ \ \ \ Nagpur\ \ \ \ \ B.Tech\ \ \ \ \ \ \ \ \ 23
1\ \ \ \ \ \ \ Anuj\ \ \ \ 24\ \ \ \ Kanpur\ \ \ \ \ Phd\ \ \ \ \ \ \ \ \ \ \ \ 34
2\ \ \ \ \ \ \ Jai\ \ \ \ \ 22\ \ \ \ Allahabad\ \ B.Tech\ \ \ \ \ \ \ \ \ 35
3\ \ \ \ \ \ \ Princi\ \ 32\ \ \ \ Kannuaj\ \ \ \ NULL\ \ \ \ \ \ \ \ \ \ \ 45
4\ \ \ \ \ \ \ Gaurav\ \ 33\ \ \ \ Allahabad\ \ Phd\ \ \ \ \ \ \ \ \ \ \ \ NULL
5\ \ \ \ \ \ \ Anuj\ \ \ \ 36\ \ \ \ Kanpur\ \ \ \ \ B.Tech\ \ \ \ \ \ \ \ \ 50
6\ \ \ \ \ \ \ Princi\ \ 27\ \ \ \ Kanpur\ \ \ \ \ Phd\ \ \ \ \ \ \ \ \ \ \ \ 52
7\ \ \ \ \ \ \ Abhi\ \ \ \ 32\ \ \ \ Kanpur\ \ \ \ \ NULL\ \ \ \ \ \ \ \ \ \ \ NULL
\f[]
.fi
.PP
For example,
.IP
.nf
\f[C]
#\ groupby()\ demo
fdf1.groupby(\[aq]Qualification\[aq])
\f[]
.fi
.PP
This will perform groupby operation on the dataframe over
\f[B]\[aq]Qualification\[aq]\f[] column data.
.PP
For example,
.IP
.nf
\f[C]
#\ groupby()\ demo\ to\ perform\ aggregation\ on\ resultant\ grouped\ dataframe
#\ Also,\ dropna\ =\ True\ by\ default
fdf1.groupby(\[aq]Qualification\[aq],\ dropna\ =\ True).agg({\[aq]Score\[aq]:\ \[aq]count\[aq]})
\f[]
.fi
.PP
Output
.IP
.nf
\f[C]
Qualification\ \ \ count_Score
B.Tech\ \ 3
Phd\ \ \ \ \ 2
\f[]
.fi
.PP
Here, it excludes \f[B]NULL\f[] group since missing values were dropped
during groupby().
.PP
For example,
.IP
.nf
\f[C]
#\ groupby()\ demo\ to\ perform\ aggregation\ on\ resultant\ grouped\ dataframe
#\ Also,\ dropna\ =\ False
fdf1.groupby(\[aq]Qualification\[aq],\ dropna\ =\ False).agg({\[aq]Score\[aq]:\ \[aq]count\[aq]})
\f[]
.fi
.PP
Output
.IP
.nf
\f[C]
Qualification\ \ \ count_Score
B.Tech\ \ 3
Phd\ \ \ \ \ 2
NULL\ \ \ \ 1
\f[]
.fi
.PP
Here, it includes \f[B]NULL\f[] as new group since missing values were
not dropped during groupby().
.PP
\f[B]Return Value\f[]
.PD 0
.P
.PD
It returns a FrovedisGroupedDataFrame instance.
.SH SEE ALSO
.IP \[bu] 2
\f[B]DataFrame \- Introduction (./DataFrame_Introduction.md)\f[]
.PD 0
.P
.PD
.IP \[bu] 2
\f[B]DataFrame \- Selection and
Combinations (./DataFrame_SelectionAndCombinations.md)\f[]
.PD 0
.P
.PD
.IP \[bu] 2
\f[B]DataFrame \- Conversion, Missing data handling, Sorting
Functions (./DataFrame_ConversionAndSorting.md)\f[]
.PD 0
.P
.PD
.IP \[bu] 2
\f[B]DataFrame \- Aggregate
Functions (./DataFrame_AggregateFunctions.md)\f[]
.PD 0
.P
.PD
.IP \[bu] 2
\f[B]DataFrame \- Binary Operators (./DataFrame_BinaryOperators.md)\f[]
