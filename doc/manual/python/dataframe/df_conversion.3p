.\" Automatically generated by Pandoc 2.17.1.1
.\"
.\" Define V font for inline verbatim, using C font in formats
.\" that render this, and otherwise B font.
.ie "\f[CB]x\f[]"x" \{\
. ftr V B
. ftr VI BI
. ftr VB B
. ftr VBI BI
.\}
.el \{\
. ftr V CR
. ftr VI CI
. ftr VB CB
. ftr VBI CBI
.\}
.TH "DataFrame Conversion Functions" "" "" "" ""
.hy
.SH NAME
.PP
DataFrame Conversion Functions - this manual contains all functions
related to conversion of datatypes with respect to frovedis dataframe.
.SS DESCRIPTION
.PP
In frovedis during data pre-processing and manipulation, there might be
the need to change the data type of the variable to a particular type
for better cleaning and understanding of the data.
.PP
For this inter-conversion within the variables, frovedis dataframe offer
various conversion functions like asDF(), to_dict(), to_numpy(),etc.
.SS Public Member Functions
.IP
.nf
\f[C]
1. asDF(df)
2. to_dict(orient = \[dq]dict\[dq], into = dict)
3. to_numpy(dtype = None, copy = False, na_value = None)
4. to_pandas()
5. to_frovedis_rowmajor_matrix(t_cols, dtype = np.float32)
6. to_frovedis_colmajor_matrix(t_cols, dtype = np.float32)
7. to_frovedis_crs_matrix(t_cols, cat_cols, dtype = np.float32, need_info = False)
8. to_frovedis_crs_matrix_using_info(info, dtype = np.float32)
\f[R]
.fi
.SS Detailed Description
.SS 1. DataFrame.asDF(df)
.PP
\f[B]Parameters\f[R]
.PD 0
.P
.PD
\f[B]\f[BI]df\f[B]\f[R]: It takes either a Frovedis DataFrame or a
Pandas DataFrame or a Series instance.
.PP
\f[B]Purpose\f[R]
.PD 0
.P
.PD
It creates a new Frovedis DataFrame after suitable conversion.
.PP
For example,
.IP
.nf
\f[C]
import pandas as pd
import frovedis.dataframe as fdf

# a dictionary
peopleDF = {
            \[aq]Ename\[aq] : [\[aq]Michael\[aq], \[aq]Andy\[aq], \[aq]Tanaka\[aq], \[aq]Raul\[aq], \[aq]Yuta\[aq]],
            \[aq]Age\[aq] : [29, 30, 27, 19, 31],
            \[aq]Country\[aq] : [\[aq]USA\[aq], \[aq]England\[aq], \[aq]Japan\[aq], \[aq]France\[aq], \[aq]Japan\[aq]],
            \[aq]isMale\[aq]: [False, False, False, False, True]
           }
# convert to pandas dataframe
pd_df = pd.DataFrame(peopleDF)

print(\[dq]display the pandas dataframe type\[dq])
print(type(pd_df))

# convert pandas DataFrame to frovedis DataFrame object
print(\[dq]display type after conversion to frovedis dataframe\[dq])
print(type(fdf.DataFrame.asDF(pd_df)))
\f[R]
.fi
.PP
Output
.IP
.nf
\f[C]
display the pandas dataframe type
<class \[aq]pandas.core.frame.DataFrame\[aq]>

display type after conversion to frovedis dataframe
<class \[aq]frovedis.dataframe.df.DataFrame\[aq]>
\f[R]
.fi
.PP
For example,
.IP
.nf
\f[C]
import pandas as pd
import frovedis.dataframe as fdf

# create a Series object
sdf1 = pd.Series([1, 2], dtype=\[aq]int32\[aq])
print(\[dq]display series type\[dq])
print(type(sdf1))

# convert a Series object to Frovedis DataFrame object
print(\[dq]display type after conversion to frovedis dataframe\[dq])
print(type(fdf.DataFrame.asDF(sdf1)))
\f[R]
.fi
.PP
Output
.IP
.nf
\f[C]
display series type
<class \[aq]pandas.core.series.Series\[aq]>

display type after conversion to frovedis dataframe
<class \[aq]frovedis.dataframe.df.DataFrame\[aq]>
\f[R]
.fi
.PP
\f[B]Return Value\f[R]
.PD 0
.P
.PD
It returns a Frovedis DataFrame instance after suitable conversion
.SS 2. DataFrame.to_dict(orient = \[lq]dict\[rq], into = dict)
.PP
\f[B]Parameters\f[R]
.PD 0
.P
.PD
\f[B]\f[BI]orient\f[B]\f[R]: It accepts a string object as parameter.
It is used to determine the type of the values of the dictionary.
(Default: `dict')
.PD 0
.P
.PD
1.
\f[I]`dict'\f[R] : dict like {column -> {index -> value}}
.PD 0
.P
.PD
2.
\f[I]`list'\f[R] : dict like {column -> [values]}
.PD 0
.P
.PD
\f[B]\f[BI]into\f[B]\f[R]: This parameter is used for mapping in the
return value.
Currently it only supports OrderedDict as return type.
(Default: dict)
.PP
\f[B]Purpose\f[R]
.PD 0
.P
.PD
It is used to convert the Frovedis DataFrame to a dictionary.
.PP
For example,
.IP
.nf
\f[C]
import pandas as pd
import frovedis.dataframe as fdf

# a pandas dataframe
pd_df = pd.DataFrame({\[aq]col1\[aq]: [1, 2],
                      \[aq]col2\[aq]: [0.5, 0.75]},
                      index=[\[aq]row1\[aq], \[aq]row2\[aq]])

# create a frovedis dataframe
fd_df = fdf.DataFrame(pd_df)

# to display frovedis dataframe
fd_df.show()
\f[R]
.fi
.PP
Output
.IP
.nf
\f[C]
index   col1    col2
row1    1       0.5
row2    2       0.75
\f[R]
.fi
.PP
For example,
.IP
.nf
\f[C]
# convert frovedis dataframe to dictionary using to_dict()
print(fd_df.to_dict())
\f[R]
.fi
.PP
Output
.IP
.nf
\f[C]
OrderedDict([(\[aq]col1\[aq], {\[aq]row1\[aq]: 1, \[aq]row2\[aq]: 2}), (\[aq]col2\[aq], {\[aq]row1\[aq]: 0.5, \[aq]row2\[aq]: 0.75})])
\f[R]
.fi
.PP
For example,
.IP
.nf
\f[C]
# to_dict() demo with orient = \[aq]list\[aq]
print(fd_df.to_dict(orient = \[aq]list\[aq]))
\f[R]
.fi
.PP
Output
.IP
.nf
\f[C]
OrderedDict([(\[aq]index\[aq], array([\[aq]row1\[aq], \[aq]row2\[aq]], dtype=\[aq]<U4\[aq])), 
            (\[aq]col1\[aq], array([1, 2])), (\[aq]col2\[aq], array([0.5 , 0.75]))])
\f[R]
.fi
.PP
\f[B]Return Value\f[R]
.PD 0
.P
.PD
It returns a dictionary representing the Frovedis DataFrame instance.
The resulting transformation depends on the `orient' parameter.
.SS 3. DataFrame.to_numpy(dtype = None, copy = False, na_value = None)
.PP
\f[B]Parameters\f[R]
.PD 0
.P
.PD
\f[B]\f[BI]dtype\f[B]\f[R] : It accepts the dtype parameter which
decides the datatype of numpy ndarray.
(Default: None)
.PD 0
.P
.PD
When it is None (not specified explicitly), it will be set as double
(float64).
.PD 0
.P
.PD
\f[B]\f[BI]copy\f[B]\f[R] : This is an unused parameter.
(Default: False)
.PD 0
.P
.PD
\f[B]\f[BI]na_value\f[B]\f[R] : This is an unused parameter.
(Default: None)
.PP
\f[B]Purpose\f[R]
.PD 0
.P
.PD
This method is used to convert a frovedis dataframe into a numpy array.
.PP
The parameters: \[lq]copy\[rq] and \[lq]na_value\[rq] are simply kept in
to make the interface uniform to the pandas DataFrame.to_numpy().
.PD 0
.P
.PD
This is not used in the frovedis implementation.
.PP
For example,
.IP
.nf
\f[C]
import pandas as pd
import frovedis.dataframe as fdf

# a python dict
peopleDF = {
            \[aq]Ename\[aq] : [\[aq]Michael\[aq], \[aq]Andy\[aq], \[aq]Tanaka\[aq], \[aq]Raul\[aq], \[aq]Yuta\[aq]],
            \[aq]Age\[aq] : [29, 30, 27, 19, 31],
            \[aq]Country\[aq] : [\[aq]USA\[aq], \[aq]England\[aq], \[aq]Japan\[aq], \[aq]France\[aq], \[aq]Japan\[aq]],
            \[aq]isMale\[aq]: [False, False, False, False, True]
           }

# a pandas dataframe object from dict
pd_df = pd.DataFrame(peopleDF)

# to create a frovedis dataframe object
fd_df = fdf.DataFrame(pd_df)
    
# display frovedis dataframe
fd_df.show()

# below will display a Frovedis dataframe type
print(type(fd_df))
\f[R]
.fi
.PP
Output
.IP
.nf
\f[C]
index   Ename   Age     Country isMale
0       Michael 29      USA     0
1       Andy    30      England 0
2       Tanaka  27      Japan   0
3       Raul    19      France  0
4       Yuta    31      Japan   1

<class \[aq]frovedis.dataframe.df.DataFrame\[aq]>
\f[R]
.fi
.PP
For example,
.IP
.nf
\f[C]
# to_numpy() demo to convert a frovedis dataframe into numpy array
# below will display a numpy array type
print(fd_df.to_numpy())

# below will display a numpy array type
print(type(fd_df.to_numpy()))
\f[R]
.fi
.PP
Output
.IP
.nf
\f[C]
[[\[aq]Michael\[aq] \[aq]29\[aq] \[aq]USA\[aq] \[aq]0\[aq]]
 [\[aq]Andy\[aq] \[aq]30\[aq] \[aq]England\[aq] \[aq]0\[aq]]
 [\[aq]Tanaka\[aq] \[aq]27\[aq] \[aq]Japan\[aq] \[aq]0\[aq]]
 [\[aq]Raul\[aq] \[aq]19\[aq] \[aq]France\[aq] \[aq]0\[aq]]
 [\[aq]Yuta\[aq] \[aq]31\[aq] \[aq]Japan\[aq] \[aq]1\[aq]]]

<<class \[aq]numpy.ndarray\[aq]>
\f[R]
.fi
.PP
\f[B]Return Value\f[R]
.PD 0
.P
.PD
It returns a numpy ndarray that represents a Frovedis DataFrame
instance.
It has shape \f[B](nRows , nCols)\f[R].
.SS 4. DataFrame.to_pandas()
.PP
\f[B]Purpose\f[R]
.PD 0
.P
.PD
It converts a Frovedis DataFrame instance into a pandas DataFrame
instance.
.PP
For example,
.IP
.nf
\f[C]
import pandas as pd
import frovedis.dataframe as fdf

# a python dictionary
peopleDF = {
            \[aq]Ename\[aq] : [\[aq]Michael\[aq], \[aq]Andy\[aq], \[aq]Tanaka\[aq], \[aq]Raul\[aq], \[aq]Yuta\[aq]],
            \[aq]Age\[aq] : [29, 30, 27, 19, 31],
            \[aq]Country\[aq] : [\[aq]USA\[aq], \[aq]England\[aq], \[aq]Japan\[aq], \[aq]France\[aq], \[aq]Japan\[aq]],
            \[aq]isMale\[aq]: [False, False, False, False, True]
            }

# creating a pandas dataframe from python dict
pd_df = pd.DataFrame(peopleDF)

# creating a frovedis dataframe
fd_df = fdf.DataFrame(pd_df)
    
# below will display a Frovedis dataframe
fd_df.show()

# below will display a Frovedis dataframe type
print(type(fd_df))
\f[R]
.fi
.PP
Output
.IP
.nf
\f[C]
index   Ename   Age     Country isMale
0       Michael 29      USA     0
1       Andy    30      England 0
2       Tanaka  27      Japan   0
3       Raul    19      France  0
4       Yuta    31      Japan   1   

<class \[aq]frovedis.dataframe.df.DataFrame\[aq]>
\f[R]
.fi
.PP
For example,
.IP
.nf
\f[C]
# to_pandas() demo to convert frovedis dataframe to pandas dataframe    
print(fd_df.to_pandas())

# below will display a pandas dataframe type after conversion
print(type(fd_df.to_pandas()))
\f[R]
.fi
.PP
Output
.IP
.nf
\f[C]
index  Ename  Age  Country  isMale
0      Michael   29      USA   False
1         Andy   30  England   False
2       Tanaka   27    Japan   False
3         Raul   19   France   False
4         Yuta   31    Japan    True  

<class \[aq]pandas.core.frame.DataFrame\[aq]>
\f[R]
.fi
.PP
\f[B]Return Value\f[R]
.PD 0
.P
.PD
It returns a pandas DataFrame instance after suitable conversion.
.SS 5. DataFrame.to_frovedis_rowmajor_matrix(t_cols, dtype = np.float32)
.PP
\f[B]Parameters\f[R]
.PD 0
.P
.PD
\f[B]\f[BI]t_cols\f[B]\f[R]: It accepts a list of string type argument
where each of the member of the list is the name of the column labels.
.PD 0
.P
.PD
\f[B]\f[BI]dtype\f[B]\f[R]: It accepts a dtype type argument which is
the type of the resultant values.
Currently, only float (float32) and double (float64) types are
supported.
(Default: np.float32)
.PP
\f[B]Purpose\f[R]
.PD 0
.P
.PD
This method is used to convert a Frovedis DataFrame instance into
FrovedisRowmajorMatrix instance.
.PP
For example,
.IP
.nf
\f[C]
import frovedis.dataframe as fdf

# read_csv demo to get values
df = fdf.read_csv(\[dq]./input/numbers.csv\[dq], names = [\[aq]one\[aq], \[aq]two\[aq], \[aq]three\[aq], \[aq]four\[aq]])

# display frovedis dataframe
df.show()
\f[R]
.fi
.PP
Output
.IP
.nf
\f[C]
index   one     two     three   four
0       10      10.23   F       0
1       12      12.2    F       0
2       13      34.8999 D       1
3       15      100.12  A       2
\f[R]
.fi
.PP
For example,
.IP
.nf
\f[C]
# to convert frovedis dataframe into frovedis rowmajor matrix
row_mat = df.to_frovedis_rowmajor_matrix([\[aq]one\[aq], \[aq]two\[aq]], dtype = np.float64)

# display row_mat (row major matrix)
row_mat.debug_print()
\f[R]
.fi
.PP
Output
.IP
.nf
\f[C]
matrix:
num_row = 4, num_col = 2
node 0
node = 0, local_num_row = 4, local_num_col = 2, val = 10 10.23 12 12.2 13 34.9 15 100.12
\f[R]
.fi
.PP
\f[B]Return Value\f[R]
.PD 0
.P
.PD
It returns a FrovedisRowmajorMatrix instance after suitable conversion.
.SS 6. DataFrame.to_frovedis_colmajor_matrix(t_cols, dtype = np.float32)
.PP
\f[B]Parameters\f[R]
.PD 0
.P
.PD
\f[B]\f[BI]t_cols\f[B]\f[R]: It accepts a list of string type argument
where each of the member of the list is the name of the column labels.
.PD 0
.P
.PD
\f[B]\f[BI]dtype\f[B]\f[R]: It accepts a dtype type argument which is
the type of the resultant values.
Currently only float (float32) and double (float64) types are supported.
(Default: np.float32)
.PP
\f[B]Purpose\f[R]
.PD 0
.P
.PD
This method converts a Frovedis DataFrame instance to
FrovedisColmajorMatrix instance.
.PP
For example,
.IP
.nf
\f[C]
import frovedis.dataframe as fdf

# read_csv demo
df = fdf.read_csv(\[dq]./input/numbers.csv\[dq], names=[\[aq]one\[aq], \[aq]two\[aq], \[aq]three\[aq], \[aq]four\[aq]])

# display frovedis dataframe
df.show()
\f[R]
.fi
.PP
Output
.IP
.nf
\f[C]
index   one     two     three   four
0       10      10.23   F       0
1       12      12.2    F       0
2       13      34.8999 D       1
3       15      100.12  A       2
\f[R]
.fi
.PP
For example,
.IP
.nf
\f[C]
# to convert frovedis dataframe into frovedis colmajor matrix
col_mat = df.to_frovedis_colmajor_matrix([\[aq]one\[aq], \[aq]two\[aq]]) # default dtype = np.float32

# display col_mat
col_mat.debug_print()
\f[R]
.fi
.PP
Output
.IP
.nf
\f[C]
matrix:
num_row = 4, num_col = 2
node 0
node = 0, local_num_row = 4, local_num_col = 2, val = 10 12 13 15 10.23 12.2 34.9 100.12
\f[R]
.fi
.PP
\f[B]Return Value\f[R]
.PD 0
.P
.PD
It returns a FrovedisColmajorMatrix instance after converting the
original Frovedis DataFrame instance.
.SS 7. DataFrame.to_frovedis_crs_matrix(t_cols, cat_cols, dtype = np.float32, need_info = False)
.PP
\f[B]Parameters\f[R]
.PD 0
.P
.PD
\f[B]\f[BI]t_cols\f[B]\f[R]: It accepts a list of string type argument
where each of the member of the list is the name of the column labels.
.PD 0
.P
.PD
\f[B]\f[BI]cat_cols\f[B]\f[R]: It accepts a list of strings as parameter
where strings are the column names.
It stands for categorical columns.
It represents how the repetitive values are distributed in the specified
column.
It adds number of columns corresponding to the number of distinct values
in the specified column to the matrix.
And values corresponding to the value of the specified column is set to
1 and remaining values are set to 0.
.PD 0
.P
.PD
\f[B]\f[BI]dtype\f[B]\f[R]: It accepts a dataype as paramter which is
the type of the resultant values.
Currently only float (float32) and double (float64) types are supported.
(Default: np.float32)
.PD 0
.P
.PD
\f[B]\f[BI]need_info\f[B]\f[R]: It accepts a boolean value as parameter.
When this is explicitly set to True, it returns an additional value of
type `df_to_sparse_info'.
(Default: False)
.PP
\f[B]Purpose\f[R]
.PD 0
.P
.PD
It converts a Frovedis DataFrame instance to FrovedisCRSMatrix instance.
.PP
For example,
.IP
.nf
\f[C]
import frovedis.dataframe as fdf
import numpy as np

# read_csv demo
df = fdf.read_csv(\[dq]./input/numbers.csv\[dq], names = [\[aq]one\[aq], \[aq]two\[aq], \[aq]three\[aq], \[aq]four\[aq]])

# display frovedis dataframe
df.show()
\f[R]
.fi
.PP
Output
.IP
.nf
\f[C]
index   one     two     three   four
0       10      10.23   F       0
1       12      12.2    F       0
2       13      34.8999 D       1
3       15      100.12  A       2
\f[R]
.fi
.PP
For example,
.IP
.nf
\f[C]
# to convert frovedis datafrme to frovedis crs matrix
crs_mat,info = df.to_frovedis_crs_matrix([\[aq]one\[aq], \[aq]two\[aq], \[aq]four\[aq]],
                                         [\[aq]three\[aq]],
                                         need_info = True) # default dtype = np.float32

# display crs_matrix
crs_mat.debug_print()

# converting crs_matrix into display it in better form
mat_t = crs_mat.to_scipy_matrix().todense()
print(mat_t)    
\f[R]
.fi
.PP
Output
.IP
.nf
\f[C]
Active Elements:  12
matrix:
num_row = 4, num_col = 5
node 0
local_num_row = 4, local_num_col = 5
val : 10 10.23 1 12 12.2 1 13 34.9 1 15 100.12 1
idx : 0 1 2 0 1 2 0 1 3 0 1 4
off : 0 3 6 9 12

[[ 10.    10.23   0.     0.     1.  ]
 [ 12.    12.2    0.     0.     1.  ]
 [ 13.    34.9    0.     1.     0.  ]
 [ 15.   100.12   1.     0.     0.  ]]
\f[R]
.fi
.PP
\f[B]Return Value\f[R]
.PD 0
.P
.PD
It returns a FrovedisCRSMatrix instance after converting the original
Frovedis DataFrame instance.
.SS 8. DataFrame.to_frovedis_crs_matrix_using_info(info, dtype = np.float32)
.PP
\f[B]Parameters\f[R]
.PD 0
.P
.PD
\f[B]\f[BI]info\f[B]\f[R]: It accepts an instance of `df_to_sparse_info'
type.
.PD 0
.P
.PD
\f[B]\f[BI]dtype\f[B]\f[R]: It accepts a dtype type argument which is
the type of the resultant values.
Currently only float (float32) and double (float64) types are supported.
(Default: np.float32)
.PP
\f[B]Purpose\f[R]
.PD 0
.P
.PD
It converts a Frovedis DataFrame instance to FrovedisCRSMatrix instance
and provided an info object of `df_to_sparse_info' class.
.PP
For example,
.IP
.nf
\f[C]
import frovedis.dataframe as fdf

# read_csv demo
df = fdf.read_csv(\[dq]./input/numbers.csv\[dq], names=[\[aq]one\[aq], \[aq]two\[aq], \[aq]three\[aq], \[aq]four\[aq]])

# display frovedis dataframe
df.show()
\f[R]
.fi
.PP
Output
.IP
.nf
\f[C]
index   one     two     three   four
0       10      10.23   F       0
1       12      12.2    F       0
2       13      34.8999 D       1
3       15      100.12  A       2
\f[R]
.fi
.PP
For example,
.IP
.nf
\f[C]
# to use to_frovedis_crs_matrix_using_info
crs_mat,info = df.to_frovedis_crs_matrix([\[aq]one\[aq], \[aq]two\[aq], \[aq]four\[aq]],
                                         [\[aq]four\[aq]], 
                                         need_info=True) # default dtype = np.float32
print(type(info))

crs_mat2 = df.to_frovedis_crs_matrix_using_info(info)
print(type(crs_mat2))

# display crs_matrix
crs_mat2.debug_print()
\f[R]
.fi
.PP
Output
.IP
.nf
\f[C]
<class \[aq]frovedis.dataframe.info.df_to_sparse_info\[aq]>

<class \[aq]frovedis.matrix.crs.FrovedisCRSMatrix\[aq]>

Active Elements:  12
matrix:
num_row = 4, num_col = 5
node 0
local_num_row = 4, local_num_col = 5
val : 10 10.23 1 12 12.2 1 13 34.9 1 15 100.12 1
idx : 0 1 2 0 1 2 0 1 3 0 1 4
off : 0 3 6 9 12
\f[R]
.fi
.PP
\f[B]Return Value\f[R]
.PD 0
.P
.PD
It returns a FrovedisCRSMatrix instance after converting Frovedis
DataFrame instance.
.SH SEE ALSO
.IP \[bu] 2
\f[B]DataFrame - Introduction\f[R]
.PD 0
.P
.PD
.IP \[bu] 2
\f[B]DataFrame - Generic Functions\f[R]
.PD 0
.P
.PD
.IP \[bu] 2
\f[B]DataFrame - Sorting Functions\f[R]
.PD 0
.P
.PD
.IP \[bu] 2
\f[B]DataFrame - Math Functions\f[R]
.PD 0
.P
.PD
.IP \[bu] 2
\f[B]DataFrame - Aggregate Functions\f[R]
