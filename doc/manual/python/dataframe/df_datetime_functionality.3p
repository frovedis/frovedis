.\" Automatically generated by Pandoc 2.17.1.1
.\"
.\" Define V font for inline verbatim, using C font in formats
.\" that render this, and otherwise B font.
.ie "\f[CB]x\f[]"x" \{\
. ftr V B
. ftr VI BI
. ftr VB B
. ftr VBI BI
.\}
.el \{\
. ftr V CR
. ftr VI CI
. ftr VB CB
. ftr VBI CBI
.\}
.TH "" "" "" "" ""
.hy
.PP
% Dataframe Datetime functionality
.SH NAME
.PP
Frovedis supports creation of datetime columns in dataframes and various
functionalities that can be done with datetime columns.
.SH DESCRIPTION
.PP
The datetime columns in frovedis are internally stored as integers
representing the amount of time in nanoseconds since January 1, 1970.
The missing values in datetime columns are present as NULL.
.SS Detailed description
.PP
Frovedis supports creation of columns of datetime type.
This can be done by loading a pandas dataframe with datetime type
columns.
Consider the following pandas dataframe \[lq]df1\[rq] with a datetime
column \[lq]c2\[rq].
.IP
.nf
\f[C]
print(df1)
Output:
   c1         c2
0   5 2022-01-02
1  10 2022-04-22
2  12 2022-09-11
3  25 2022-02-24


print(df1.dtypes)
Output:
c1             int64
c2    datetime64[ns]
\f[R]
.fi
.PP
The frovedis dataframe is created by passing \[lq]df1\[rq] in the
constructor for frovedis DataFrame class.
.IP
.nf
\f[C]
fdf1 = fdf.DataFrame(df1)
print(fdf1)
Output:
index   c1      c2
0       5       2022-01-02
1       10      2022-04-22
2       12      2022-09-11
3       25      2022-02-24

print(fdf1.dtypes)
Output:
c1         int64
c2    datetime64
\f[R]
.fi
.PP
In pandas the dataframe, different datetime columns can have different
time-zones set.
In such case, the time-zone related information is saved in
FrovedisDataframe object as a dictionary: \[lq]datetime_cols_info\[rq].
.IP
.nf
\f[C]
print(df2)
Output:
   c1                        c2                        c3
0   5 2022-01-02 00:00:00+09:00 2021-01-01 00:00:00+05:30
1  10 2022-04-22 00:00:00+09:00 2021-02-01 00:00:00+05:30
2  12 2022-09-11 00:00:00+09:00 2021-03-01 00:00:00+05:30
3  25 2022-02-24 00:00:00+09:00 2021-04-02 00:00:00+05:30


print(df2.dtypes)
Output:
c1                           int64
c2      datetime64[ns, Asia/Tokyo]
c3    datetime64[ns, Asia/Kolkata]


fdf2 = fdf.DataFrame(df2)
print(fdf2)
Output:
index   c1      c2              c3
0       5       2022-01-02      2021-01-01
1       10      2022-04-22      2021-02-01
2       12      2022-09-11      2021-03-01
3       25      2022-02-24      2021-04-02

print(fdf2.dtypes)
Output:
c1         int64
c2    datetime64
c3    datetime64

print(fdf2.datetime_cols_info)
Output:
{\[aq]c2\[aq]: \[aq]Asia/Tokyo\[aq], \[aq]c3\[aq]: \[aq]Asia/Kolkata\[aq]}
\f[R]
.fi
.PP
The time-zone information in \[lq]datetime_cols_info\[rq] is used
internally while converting frovedis dataframe to pandas dataframe using
to_pandas().
.IP
.nf
\f[C]
converted_df = fdf2.to_pandas()
print(converted_df)
Output:
       c1                        c2                        c3
index
0       5 2022-01-02 00:00:00+09:00 2021-01-01 00:00:00+05:30
1      10 2022-04-22 00:00:00+09:00 2021-02-01 00:00:00+05:30
2      12 2022-09-11 00:00:00+09:00 2021-03-01 00:00:00+05:30
3      25 2022-02-24 00:00:00+09:00 2021-04-02 00:00:00+05:30

print(converted_df.dtypes)
Output:
c1                           int64
c2      datetime64[ns, Asia/Tokyo]
c3    datetime64[ns, Asia/Kolkata]
\f[R]
.fi
.SS Support of missing values
.PP
The missing values in datetime columns in pandas are represented as NaT
(Not a Time).
Frovedis supports loading of datetime columns with NaT values.
These would be represented as NULL in frovedis dataframes.
.IP
.nf
\f[C]
print(df3)
Output:
   c1         c2
0   5 2022-01-02
1  10 2022-04-22
2  12        NaT
3  25 2022-02-24

fdf3 = fdf.DataFrame(df3)
print(fdf3)
Output:
index   c1      c2
0       5       2022-01-02
1       10      2022-04-22
2       12      NULL
3       25      2022-02-24
\f[R]
.fi
.PP
The missing values present as NULL would be converted to NaT when
converting frovedis dataframe to pandas dataframe.
.IP
.nf
\f[C]
converted_df = fdf3.to_pandas()
print(converted_df)
Output:
      c1         c2
index
0       5 2022-01-02
1      10 2022-04-22
2      12        NaT
3      25 2022-02-24
\f[R]
.fi
.SS Datetime extraction functions
.PP
Frovedis supports extraction of information like day, month, hour, etc.
from datetime columns.
This can be done through the \[lq]dt\[rq] accessor, which returns a
FrovedisDatetimeProperties object.
Consider the following dataframe:
.IP
.nf
\f[C]
print(df4)
Output:
   c1                  c2
0   1 2022-04-01 11:32:45
1   4 2021-11-01 12:45:43
2  10 2023-04-14 14:23:00
3  22 2020-01-12 07:01:24


fdf4 = fdf.DataFrame(df4)
print(fdf4)
Output:
index   c1      c2
0       1       2022-04-01
1       4       2021-11-01
2       10      2023-04-14
3       22      2020-01-12
\f[R]
.fi
.PP
The following datetime properties are supported for extraction from
datetime columns:
.PP
\f[B]day\f[R]: This extracts the day of month from the datetime column.
.IP
.nf
\f[C]
fdf4[\[dq]c2\[dq]].dt.day
Output:
index   c2
0       1
1       1
2       14
3       12
\f[R]
.fi
.PP
\f[B]dayofweek\f[R]: This extracts the day of week from the datetime
column.
It is assumed the week starts on Monday, which is denoted by 0 and ends
on Sunday which is denoted by 6.
.IP
.nf
\f[C]
fdf4[\[dq]c2\[dq]].dt.dayofweek
Output:
index   c2
0       4
1       0
2       4
3       6
\f[R]
.fi
.PP
\f[B]hour\f[R]: This extracts the hour from the datetime column.
.IP
.nf
\f[C]
fdf4[\[dq]c2\[dq]].dt.hour
Output:
index   c2
0       11
1       12
2       14
3       7
\f[R]
.fi
.PP
\f[B]minute\f[R]: This extracts the minutes from the datetime column.
.IP
.nf
\f[C]
fdf4[\[dq]c2\[dq]].dt.minute
Output:
index   c2
0       32
1       45
2       23
3       1
\f[R]
.fi
.PP
\f[B]second\f[R]: This extracts the seconds from the datetime column.
.IP
.nf
\f[C]
fdf4[\[dq]c2\[dq]].dt.second
Output:
index   c2
0       45
1       43
2       0
3       24
\f[R]
.fi
.PP
\f[B]nanosecond\f[R]: This extracts the nanoseconds from the datetime
column.
.IP
.nf
\f[C]
fdf4[\[dq]c2\[dq]].dt.nanosecond
Output:
index   c2
0       0
1       0
2       0
3       0
\f[R]
.fi
.PP
\f[B]year\f[R]: This extracts the year from the datetime column.
.IP
.nf
\f[C]
fdf4[\[dq]c2\[dq]].dt.year
Output:
index   c2
0       2022
1       2021
2       2023
3       2020
\f[R]
.fi
.PP
\f[B]month\f[R]: This extracts the month from the datetime column, with
January=1, December=12.
.IP
.nf
\f[C]
fdf4[\[dq]c2\[dq]].dt.month
Output:
index   c2
0       4
1       11
2       4
3       1
\f[R]
.fi
.PP
\f[B]quarter\f[R]: This extracts the quarter in which the date falls,
from the datetime column.
.IP
.nf
\f[C]
fdf4[\[dq]c2\[dq]].dt.quarter
Output:
index   c2
0       2
1       4
2       2
3       1
\f[R]
.fi
.PP
\f[B]dayofyear\f[R]: This extracts the ordinal day of the year from the
datetime column.
.IP
.nf
\f[C]
fdf4[\[dq]c2\[dq]].dt.dayofyear
Output:
index   c2
0       91
1       305
2       104
3       12
\f[R]
.fi
.PP
\f[B]weekofyear\f[R]: This extracts the ordinal week of the year from
the datetime column.
.IP
.nf
\f[C]
fdf4[\[dq]c2\[dq]].dt.weekofyear
Output:
index   c2
0       13
1       44
2       15
3       2
\f[R]
.fi
.SS Loading datetime columns through read_csv
.PP
Frovedis supports loading datetime column in dataframe from a csv file.
The name of the column to be parsed as datetime type has to specified in
\[lq]parse_dates\[rq] parameter.
The format for the datetime column can be spefied as a string in
parameter \[lq]datetime_format\[rq].
.PP
Consider the following csv file:
.PP
[data1.csv]
.PD 0
.P
.PD
A,24/12/2022
.PD 0
.P
.PD
B,12/01/2021
.PD 0
.P
.PD
C,10/02/2020
.PD 0
.P
.PD
D,01/07/2023
.IP
.nf
\f[C]
fdf1 = fdf.read_csv(\[dq]./data1.csv\[dq], names=[\[dq]c1\[dq], \[dq]c2\[dq]] , parse_dates=[\[dq]c2\[dq]], datetime_format=\[dq]%d/%m/%Y\[dq])
print(fdf1)
Output:
index   c1      c2
0       A       2022-12-24
1       B       2021-01-12
2       C       2020-02-10
3       D       2023-07-01
\f[R]
.fi
.PP
Instead of the name of column in \[lq]parse_dates\[rq] paramter, the
position of column can be specified as an integer.
.IP
.nf
\f[C]
fdf1 = fdf.read_csv(\[dq]./data1.csv\[dq], names=[\[dq]c1\[dq], \[dq]c2\[dq]] , parse_dates=[1], datetime_format=\[dq]%d/%m/%Y\[dq])
print(fdf1)
Output:
index   c1      c2
0       A       2022-12-24
1       B       2021-01-12
2       C       2020-02-10
3       D       2023-07-01
\f[R]
.fi
.PP
In the csv file, different datetime columns can be present in different
formats.
Consider the following csv file.
.PP
[data2.csv]
.PD 0
.P
.PD
A,24/12/2022,2020|05|15
.PD 0
.P
.PD
B,12/01/2021,2024|11|17
.PD 0
.P
.PD
C,10/02/2020,2021|04|21
.PD 0
.P
.PD
D,01/07/2023,2025|06|04
.PP
In such case, the \[lq]datetime_format\[rq] can be specified as a list
of formats.
.IP
.nf
\f[C]
fdf2 = fdf.read_csv(\[dq]./data2.csv\[dq], names=[\[dq]c1\[dq], \[dq]c2\[dq], \[dq]c3\[dq]] , parse_dates=[\[dq]c2\[dq], \[dq]c3\[dq]], datetime_format=[\[dq]%d/%m/%Y\[dq], \[dq]%Y|%m|%d\[dq]])
print(fdf2)
Output:
index   c1      c2              c3
0       A       2022-12-24      2020-05-15
1       B       2021-01-12      2024-11-17
2       C       2020-02-10      2021-04-21
3       D       2023-07-01      2025-06-04
\f[R]
.fi
.PP
The \[lq]datetime_format\[rq] paramter can also be specified as a
dictionary with keys as column names and values as the respective
formats.
.IP
.nf
\f[C]
fdf2 = fdf.read_csv(\[dq]./data2.csv\[dq], names=[\[dq]c1\[dq], \[dq]c2\[dq], \[dq]c3\[dq]] , parse_dates=[\[dq]c2\[dq], \[dq]c3\[dq]], datetime_format={\[dq]c2\[dq]: \[dq]%d/%m/%Y\[dq], \[dq]c3\[dq]:\[dq]%Y|%m|%d\[dq]})
print(fdf2)
Output:
index   c1      c2              c3
0       A       2022-12-24      2020-05-15
1       B       2021-01-12      2024-11-17
2       C       2020-02-10      2021-04-21
3       D       2023-07-01      2025-06-04
\f[R]
.fi
.PP
The format can also be inferred from the data, by specifying
\[lq]infer_datetime_format\[rq] paramter as True.
Internally the first hundred rows would be used to infer the format for
the column.
In case the datetime format cannot be inferred the column would be
loaded as a string column.
.IP
.nf
\f[C]
fdf3 = fdf.read_csv(\[dq]./data2.csv\[dq], names=[\[dq]c1\[dq], \[dq]c2\[dq], \[dq]c3\[dq]] , parse_dates=[\[dq]c2\[dq], \[dq]c3\[dq]], infer_datetime_format=True)
print(fdf3)
Output:
index   c1      c2              c3
0       A       2023-12-15      2020|05|15
1       B       2021-12-01      2024|11|17
2       C       2020-10-02      2021|04|21
3       D       2023-01-07      2025|06|04

print(fdf3.dtypes)
Output:
c1        object
c2    datetime64
c3        object
dtype: object
\f[R]
.fi
.PP
In the above example, format for \[lq]c2\[rq] was inferred and it is
loaded as datetime column, while format for \[lq]c3\[rq] could not be
inferred and it is loaded as a string column.
.PP
In the csv file, datetime information can be present in separate
columns.
Consider the following csv file:
.PP
[data3.csv]
.PD 0
.P
.PD
A,12/2022,Jan
.PD 0
.P
.PD
B,08/2024,Jul
.PD 0
.P
.PD
C,22/2021,Dec
.PD 0
.P
.PD
D,04/2025,Sep
.PP
In such case the, frovedis supports loading a combination of columns as
a single datetime column.
The combination needs to be specified as a list in the
\[lq]parse_dates\[rq] parameter.
.IP
.nf
\f[C]
fdf4 = fdf.read_csv(\[dq]./data3.csv\[dq], names=[\[dq]c1\[dq], \[dq]c2\[dq], \[dq]c3\[dq]] , parse_dates=[[\[dq]c2\[dq], \[dq]c3\[dq]]], infer_datetime_format=True)
print(fdf4)
Output:
index   c2_c3           c1
0       2022-01-12      A
1       2024-07-08      B
2       2021-12-22      C
3       2025-09-04      D

print(fdf4.dtypes)
Output:
c2_c3    datetime64
c1           object
dtype: object
\f[R]
.fi
.PP
The original columns use for the combination are dropped by default.
In case the original columns are required to be kept, the
\[lq]keep_date_col\[rq] paramter can be specified as True.
.IP
.nf
\f[C]
fdf5 = fdf.read_csv(\[dq]./data3.csv\[dq], names=[\[dq]c1\[dq], \[dq]c2\[dq], \[dq]c3\[dq]] , parse_dates=[[\[dq]c2\[dq], \[dq]c3\[dq]]], infer_datetime_format=True, keep_date_col=True)
print(fdf5)
Output:
index   c2_c3           c1      c2      c3
0       2022-01-12      A       12/2022 Jan
1       2024-07-08      B       08/2024 Jul
2       2021-12-22      C       22/2021 Dec
3       2025-09-04      D       04/2025 Sep

print(fdf5.dtypes)
Output:
c2_c3    datetime64
c1           object
c2           object
c3           object
dtype: object
\f[R]
.fi
.SH SEE ALSO
.IP \[bu] 2
\f[B]DataFrame - Introduction\f[R]
.PD 0
.P
.PD
.IP \[bu] 2
\f[B]DataFrame - Generic Functions\f[R]
.PD 0
.P
.PD
.IP \[bu] 2
\f[B]DataFrame - Conversion Functions\f[R]
