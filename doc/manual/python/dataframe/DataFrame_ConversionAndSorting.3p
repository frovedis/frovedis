.TH "DataFrame Conversion and Sorting Functions" "" "" "" ""
.SH NAME
.PP
DataFrame Conversion and Sorting Functions \- functions related to
conversion of datatypes and sorting are illustrated here.
.SS SYNOPSIS
.IP
.nf
\f[C]
frovedis.dataframe.df.DataFrame(df\ =\ None,\ is_series\ =\ False)\ \ 
\f[]
.fi
.SS Detailed Description
.SS 1. asDF(df)
.PP
\f[B]Parameters\f[]
.PD 0
.P
.PD
\f[B]\f[I]df\f[]\f[]: It takes either a Frovedis DataFrame or a Pandas
DataFrame or a Series instance.
.PP
\f[B]Purpose\f[]
.PD 0
.P
.PD
It creates a new Frovedis DataFrame after suitable conversion.
.PP
For example,
.IP
.nf
\f[C]
#\ example\ to\ convert\ a\ pandas\ dataframe\ to\ frovedis\ dataframe\ object

import\ pandas\ as\ pd
import\ frovedis.dataframe\ as\ fdf

#\ a\ dictionary
peopleDF\ =\ {
\ \ \ \ \ \ \ \ \ \ \ \ \[aq]Ename\[aq]\ :\ [\[aq]Michael\[aq],\ \[aq]Andy\[aq],\ \[aq]Tanaka\[aq],\ \[aq]Raul\[aq],\ \[aq]Yuta\[aq]],
\ \ \ \ \ \ \ \ \ \ \ \ \[aq]Age\[aq]\ :\ [29,\ 30,\ 27,\ 19,\ 31],
\ \ \ \ \ \ \ \ \ \ \ \ \[aq]Country\[aq]\ :\ [\[aq]USA\[aq],\ \[aq]England\[aq],\ \[aq]Japan\[aq],\ \[aq]France\[aq],\ \[aq]Japan\[aq]],
\ \ \ \ \ \ \ \ \ \ \ \ \[aq]isMale\[aq]:\ [False,\ False,\ False,\ False,\ True]
\ \ \ \ \ \ \ \ \ \ \ }
#\ convert\ to\ pandas\ dataframe
pd_df\ =\ pd.DataFrame(peopleDF)

print("display\ the\ pandas\ dataframe\ type")
print(type(pd_df))

print("display\ type\ after\ conversion\ to\ frovedis\ dataframe")
print(type(fdf.DataFrame.asDF(pd_df)))
\f[]
.fi
.PP
Output
.IP
.nf
\f[C]
display\ the\ pandas\ dataframe\ type
<class\ \[aq]pandas.core.frame.DataFrame\[aq]>

display\ type\ after\ conversion\ to\ frovedis\ dataframe
<class\ \[aq]frovedis.dataframe.df.DataFrame\[aq]>
\f[]
.fi
.PP
For example,
.IP
.nf
\f[C]
#\ example\ to\ convert\ a\ Series\ object\ to\ Frovedis\ DataFrame\ object

import\ pandas\ as\ pd
import\ frovedis.dataframe\ as\ fdf

#\ a\ Series\ object
sdf1\ =\ pd.Series([1,\ 2],\ dtype=\[aq]int32\[aq])
print("display\ series\ type")
print(type(sdf1))

print("display\ type\ after\ conversion\ to\ frovedis\ dataframe")5
print(type(fdf.DataFrame.asDF(sdf1)))
\f[]
.fi
.PP
Output
.IP
.nf
\f[C]
display\ series\ type
<class\ \[aq]pandas.core.series.Series\[aq]>

display\ type\ after\ conversion\ to\ frovedis\ dataframe
<class\ \[aq]frovedis.dataframe.df.DataFrame\[aq]>
\f[]
.fi
.PP
\f[B]Return Value\f[]
.PD 0
.P
.PD
It returns a Frovedis DataFrame object after suitable conversion
.SS 2. astype(dtype, copy = True, errors = \[aq]raise\[aq],
check_bool_like_string = False)
.PP
\f[B]Parameters\f[]
.PD 0
.P
.PD
\f[B]\f[I]dtype\f[]\f[]: It accepts a string, numpy.dtype or a dict of
column labels to cast entire DataFrame object to same type or one or
more columns to column\-specific types.
.PD 0
.P
.PD
\f[B]\f[I]copy\f[]\f[]: It accepts a boolean parameter and returns a new
DataFrame object when it is True.
Currently this parameter will always return a copy.
The original DataFrame is not modified.
(Default: True)
.PD 0
.P
.PD
\f[B]\f[I]errors\f[]\f[]: This is an unused parameter.
(Default: \[aq]raise\[aq])
.PD 0
.P
.PD
\f[B]\f[I]check_bool_like_string\f[]\f[]: A boolean parameter which when
set to True will cast string columns having boolean like
case\-insensitive strings (True, False, yes, No, On, Off, Y, N, T, F) to
boolean columns.
(Default: False)
.PP
\f[B]Purpose\f[]
.PD 0
.P
.PD
It cast an entire Frovedis DataFrame or selected columns of Frovedis
DataFrame to the specified dtype.
.PP
The parameter: "errors" is simply kept in to make the interface uniform
to the pandas DataFrame.astype().
.PD 0
.P
.PD
This is not used anywhere within the frovedis implementation.
.PP
For example,
.IP
.nf
\f[C]
#\ example\ of\ using\ astype\ on\ a\ particular\ column

import\ pandas\ as\ pd
import\ frovedis.dataframe\ as\ fdf

#\ a\ dictionary
peopleDF\ =\ {
\ \ \ \ \ \ \ \ \ \ \ \ \[aq]Ename\[aq]\ :\ [\[aq]Michael\[aq],\ \[aq]Andy\[aq],\ \[aq]Tanaka\[aq],\ \[aq]Raul\[aq],\ \[aq]Yuta\[aq]],
\ \ \ \ \ \ \ \ \ \ \ \ \[aq]Age\[aq]\ :\ [29,\ 30,\ 27,\ 19,\ 31],
\ \ \ \ \ \ \ \ \ \ \ \ \[aq]Country\[aq]\ :\ [\[aq]USA\[aq],\ \[aq]England\[aq],\ \[aq]Japan\[aq],\ \[aq]France\[aq],\ \[aq]Japan\[aq]],
\ \ \ \ \ \ \ \ \ \ \ \ \[aq]isMale\[aq]:\ [False,\ False,\ False,\ False,\ True]
\ \ \ \ \ \ \ \ \ \ \ }
#\ converting\ to\ pandas\ dataframe\ \ 
pd_df\ =\ pd.DataFrame(peopleDF)
#\ converting\ to\ frovedis\ dataframe
fd_df\ =\ fdf.DataFrame(pd_df)

#\ display\ the\ datatype\ of\ object
print(fd_df.dtypes)

#\ display\ the\ datatype\ of\ object\ after\ conversion\ of\ \[aq]Age\[aq]\ column
print(fd_df.astype({\[aq]Age\[aq]:\[aq]int32\[aq]}).dtypes)
\f[]
.fi
.PP
Output
.IP
.nf
\f[C]
Ename\ \ \ \ \ \ object
Age\ \ \ \ \ \ \ \ \ int64
Country\ \ \ \ object
isMale\ \ \ \ \ \ \ bool
dtype:\ object

Ename\ \ \ \ \ \ object
Age\ \ \ \ \ \ \ \ \ int32
Country\ \ \ \ object
isMale\ \ \ \ \ \ int32
dtype:\ object
\f[]
.fi
.PP
For example,
.IP
.nf
\f[C]
#\ example\ of\ using\ astype\ on\ object\ as\ a\ whole

import\ pandas\ as\ pd
import\ frovedis.dataframe\ as\ fdf

#\ creating\ a\ dataFrame
pd_df\ =\ \ pd.DataFrame({\[aq]col1\[aq]:\ [1,\ 2],\ \[aq]col2\[aq]:\ [3,\ 4]})
fd_df1\ =\ fdf.DataFrame(pf1)

#\ displaying\ dataframe
print(fd_df1.dtypes)

#\ cast\ all\ columns\ to\ int32:
fd_df2\ =\ fd_df1.astype(\[aq]int32\[aq])

#\ display\ dataframe\ after\ conversion
print(fd_df2.dtypes)
\f[]
.fi
.PP
Output
.IP
.nf
\f[C]
col1\ \ \ \ int64
col2\ \ \ \ int64
dtype:\ object

col1\ \ \ \ int32
col2\ \ \ \ int32
dtype:\ object
\f[]
.fi
.PP
For example,
.IP
.nf
\f[C]
#\ example\ with\ parameter\ \[aq]check_bool_like_string\[aq]

import\ pandas\ as\ pd
import\ frovedis.dataframe\ as\ fdf

#\ a\ dictionary
peopleDF\ =\ {
\ \ \ \ \ \ \ \ \ \ \ \ \[aq]Ename\[aq]\ :\ [\[aq]Michael\[aq],\ \[aq]Andy\[aq],\ \[aq]Tanaka\[aq],\ \[aq]Raul\[aq],\ \[aq]Yuta\[aq]],
\ \ \ \ \ \ \ \ \ \ \ \ \[aq]Age\[aq]\ :\ [29,\ 30,\ 27,\ 19,\ 31],
\ \ \ \ \ \ \ \ \ \ \ \ \[aq]Country\[aq]\ :\ [\[aq]USA\[aq],\ \[aq]England\[aq],\ \[aq]Japan\[aq],\ \[aq]France\[aq],\ \[aq]Japan\[aq]],
\ \ \ \ \ \ \ \ \ \ \ \ \[aq]isMale\[aq]:\ [\[aq]F\[aq],\ \[aq]No\[aq],\ \[aq]Off\[aq],\ False,\ \[aq]Y\[aq]]
\ \ \ \ \ \ \ \ \ \ \ }
#\ converting\ to\ pandas\ dataframe\ \ 
pd_df\ =\ pd.DataFrame(peopleDF)
#\ converting\ to\ frovedis\ dataframe
fd_df\ =\ fdf.DataFrame(pd_df)

#display\ the\ dataframes
fd_df.show()

#\ display\ the\ datatype
print(fd_df.dtypes)

#display\ the\ dataframes
fd_df.astype({\[aq]isMale\[aq]:\[aq]bool\[aq]},\ check_bool_like_string\ =\ True).show()

#\ display\ the\ datatype
print(fd_df.astype({\[aq]isMale\[aq]:\[aq]bool\[aq]},\ check_bool_like_string\ =\ True).dtypes)
\f[]
.fi
.PP
Output
.IP
.nf
\f[C]
index\ \ \ Ename\ \ \ Age\ \ \ \ \ Country\ isMale
0\ \ \ \ \ \ \ Michael\ 29\ \ \ \ \ \ USA\ \ \ \ \ F
1\ \ \ \ \ \ \ Andy\ \ \ \ 30\ \ \ \ \ \ England\ No
2\ \ \ \ \ \ \ Tanaka\ \ 27\ \ \ \ \ \ Japan\ \ \ Off
3\ \ \ \ \ \ \ Raul\ \ \ \ 19\ \ \ \ \ \ France\ \ False
4\ \ \ \ \ \ \ Yuta\ \ \ \ 31\ \ \ \ \ \ Japan\ \ \ Y

Ename\ \ \ \ \ \ object
Age\ \ \ \ \ \ \ \ \ int64
Country\ \ \ \ object
isMale\ \ \ \ \ object
dtype:\ object

index\ \ \ Ename\ \ \ Age\ \ \ \ \ Country\ isMale
0\ \ \ \ \ \ \ Michael\ 29\ \ \ \ \ \ USA\ \ \ \ \ 0
1\ \ \ \ \ \ \ Andy\ \ \ \ 30\ \ \ \ \ \ England\ 0
2\ \ \ \ \ \ \ Tanaka\ \ 27\ \ \ \ \ \ Japan\ \ \ 0
3\ \ \ \ \ \ \ Raul\ \ \ \ 19\ \ \ \ \ \ France\ \ 0
4\ \ \ \ \ \ \ Yuta\ \ \ \ 31\ \ \ \ \ \ Japan\ \ \ 1

Ename\ \ \ \ \ \ object
Age\ \ \ \ \ \ \ \ \ int64
Country\ \ \ \ object
isMale\ \ \ \ \ \ \ bool
dtype:\ object
\f[]
.fi
.PP
\f[B]Return Value\f[]
.PD 0
.P
.PD
It returns a new DataFrame object with dtype converted as specified.
.SS 3. copy(deep = True)
.PP
\f[B]Parameters\f[]
.PD 0
.P
.PD
\f[B]\f[I]deep\f[]\f[]: A boolean parameter to decide the type of copy
operation.
When this parameter is True, it creates a deep copy i.e.
the copy includes copy of the original DataFrame\[aq]s data and the
indices.
Currently this parameter doesn\[aq]t support shallow copy (deep =
False).
(Default: True)
.PP
\f[B]Purpose\f[]
.PD 0
.P
.PD
It creates a deep copy of the Frovedis DataFrame object's indices and
data.
.PP
For example,
.IP
.nf
\f[C]
#\ example\ to\ create\ a\ deep\ copy\ and\ changes\ on\ copy\ doesn\[aq]t\ affect\ original\ object

import\ pandas\ as\ pd
import\ frovedis.dataframe\ as\ fdf

peopleDF\ =\ {
\ \ \ \ \ \ \ \ \ \ \ \ \[aq]Ename\[aq]\ :\ [\[aq]Michael\[aq],\ \[aq]Andy\[aq],\ \[aq]Tanaka\[aq],\ \[aq]Raul\[aq],\ \[aq]Yuta\[aq]],
\ \ \ \ \ \ \ \ \ \ \ \ \[aq]Age\[aq]\ :\ [29,\ 30,\ 27,\ 19,\ 31],
\ \ \ \ \ \ \ \ \ \ \ \ \[aq]Country\[aq]\ :\ [\[aq]USA\[aq],\ \[aq]England\[aq],\ \[aq]Japan\[aq],\ \[aq]France\[aq],\ \[aq]Japan\[aq]],
\ \ \ \ \ \ \ \ \ \ \ \ \[aq]isMale\[aq]:\ [False,\ False,\ False,\ False,\ True]
\ \ \ \ \ \ \ \ \ \ \ }
pd_df\ =\ pd.DataFrame(peopleDF)
fd_df\ =\ fdf.DataFrame(pd_df)

#\ creating\ a\ deep\ copy
fd_df_copy\ =\ fd_df.copy()

print(\[aq]displaying\ original\ dataframe\ object\[aq])
fd_df.show()

print(\[aq]displaying\ copied\ dataframe\ object\[aq])
fd_df_copy.show()

#\ changing\ column\ Age\ to\ Age2\ for\ the\ copied\ object
fd_df_copy.rename({\[aq]Age\[aq]:\[aq]Age2\[aq],\ inplace\ =\ True}

print(\[aq]displaying\ original\ dataframe\ object\[aq])
fd_df.show()

print(\[aq]displaying\ copied\ dataframe\ object\[aq])
fd_df_copy.show()
\f[]
.fi
.PP
Output
.IP
.nf
\f[C]
displaying\ original\ dataframe\ object
index\ \ \ Ename\ \ \ Age\ \ \ \ \ Country\ isMale
0\ \ \ \ \ \ \ Michael\ 29\ \ \ \ \ \ USA\ \ \ \ \ 0
1\ \ \ \ \ \ \ Andy\ \ \ \ 30\ \ \ \ \ \ England\ 0
2\ \ \ \ \ \ \ Tanaka\ \ 27\ \ \ \ \ \ Japan\ \ \ 0
3\ \ \ \ \ \ \ Raul\ \ \ \ 19\ \ \ \ \ \ France\ \ 0
4\ \ \ \ \ \ \ Yuta\ \ \ \ 31\ \ \ \ \ \ Japan\ \ \ 1

displaying\ copied\ dataframe\ object
index\ \ \ Ename\ \ \ Age\ \ \ \ \ Country\ isMale
0\ \ \ \ \ \ \ Michael\ 29\ \ \ \ \ \ USA\ \ \ \ \ 0
1\ \ \ \ \ \ \ Andy\ \ \ \ 30\ \ \ \ \ \ England\ 0
2\ \ \ \ \ \ \ Tanaka\ \ 27\ \ \ \ \ \ Japan\ \ \ 0
3\ \ \ \ \ \ \ Raul\ \ \ \ 19\ \ \ \ \ \ France\ \ 0
4\ \ \ \ \ \ \ Yuta\ \ \ \ 31\ \ \ \ \ \ Japan\ \ \ 1

displaying\ original\ dataframe\ object
index\ \ \ Ename\ \ \ Age\ \ \ \ \ Country\ isMale
0\ \ \ \ \ \ \ Michael\ 29\ \ \ \ \ \ USA\ \ \ \ \ 0
1\ \ \ \ \ \ \ Andy\ \ \ \ 30\ \ \ \ \ \ England\ 0
2\ \ \ \ \ \ \ Tanaka\ \ 27\ \ \ \ \ \ Japan\ \ \ 0
3\ \ \ \ \ \ \ Raul\ \ \ \ 19\ \ \ \ \ \ France\ \ 0
4\ \ \ \ \ \ \ Yuta\ \ \ \ 31\ \ \ \ \ \ Japan\ \ \ 1

displaying\ copied\ dataframe\ object
index\ \ \ Ename\ \ \ Age2\ \ \ \ \ Country\ isMale
0\ \ \ \ \ \ \ Michael\ 29\ \ \ \ \ \ USA\ \ \ \ \ 0
1\ \ \ \ \ \ \ Andy\ \ \ \ 30\ \ \ \ \ \ England\ 0
2\ \ \ \ \ \ \ Tanaka\ \ 27\ \ \ \ \ \ Japan\ \ \ 0
3\ \ \ \ \ \ \ Raul\ \ \ \ 19\ \ \ \ \ \ France\ \ 0
4\ \ \ \ \ \ \ Yuta\ \ \ \ 31\ \ \ \ \ \ Japan\ \ \ 1
\f[]
.fi
.PP
\f[B]NOTE: changes are reflected only in copied DataFrame instance but
not in original DataFrame instance.\f[]
.PP
\f[B]Return Value\f[]
.PD 0
.P
.PD
It returns a deep copy of the DataFrame object of the same type.
.SS 4. dropna(axis = 0, how = \[aq]any\[aq], thresh = None, subset =
None, inplace = False)
.PP
\f[B]Parameters\f[]
.PD 0
.P
.PD
\f[B]\f[I]axis\f[]\f[]: It accepts an integer value that can be 0 or 1.
This parameter is used to determine whether rows or columns containing
missing values are to be removed.
(Default: 0)
.PD 0
.P
.PD
\- 0 : Drop rows which contain missing values.
.PD 0
.P
.PD
\- 1 : Drop columns which contain missing values.
.PD 0
.P
.PD
\f[B]\f[I]how\f[]\f[]: It accepts a string object to determine if row or
column is removed from DataFrame, when we have at least one
\[aq]NaN\[aq] or all \[aq]NaN\[aq].
(Default: \[aq]any\[aq])
.PD 0
.P
.PD
\- \[aq]any\[aq] : If any NaN values are present, drop that row or
column.
.PD 0
.P
.PD
\- \[aq]all\[aq] : If all values are NaN, drop that row or column.
.PD 0
.P
.PD
\f[B]\f[I]thresh\f[]\f[]: It accepts an integer as parameter which is
the number of NaN values required for rows/columns to be dropped.
(Default: None)
.PD 0
.P
.PD
\f[B]\f[I]subset\f[]\f[]: It accepts a python ndarray.
It is the name of the labels along the other axis which is being
considered.
.PD 0
.P
.PD
For example, if you are dropping rows, then these would be a list of
columns.
(Default: None)
.PD 0
.P
.PD
\f[B]\f[I]inplace\f[]\f[]: This parameter accepts a boolean value.
When it is set to True, then it performs operation on the original
Frovedis DataFrame object itself otherwise operation is performed on a
new Frovedis DataFrame object.
(Default: False)
.PP
\f[B]Purpose\f[]
.PD 0
.P
.PD
It is used to remove missing values from the Frovedis DataFrame.
.PP
For example,
.IP
.nf
\f[C]
#\ example\ of\ using\ dropna\ with\ default\ values

import\ pandas\ as\ pd
import\ frovedis.dataframe\ as\ fdf

#\ creating\ a\ pandas\ dataframe
pd_df\ =\ pd.DataFrame({"name":\ [\[aq]Alfred\[aq],\ \[aq]Batman\[aq],\ \[aq]Catwoman\[aq]],
\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ "toy":\ [np.nan,\ \[aq]Batmobile\[aq],\ \[aq]Bullwhip\[aq]],
\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ "born":\ [np.nan,\ "1940\-04\-25",\ np.nan]})

#\ creating\ a\ frovedis\ dataframe\ from\ pandas\ dataframe
fd_df\ =\ fdf.DataFrame(pd_df)

#\ display\ frovedis\ dataframe
print("Before\ dropping\ nan\ values")
fd_df.show()

#\ drop\ the\ rows\ where\ at\ least\ one\ element\ is\ missing.
print("After\ dropping\ nan\ values")
fd_df.dropna().show()
\f[]
.fi
.PP
Output
.IP
.nf
\f[C]
Before\ dropping\ nan\ values
index\ \ \ name\ \ \ \ \ \ \ \ \ \ \ \ toy\ \ \ \ \ \ \ \ \ \ \ \ \ born
0\ \ \ \ \ \ \ Alfred\ \ \ \ \ \ \ \ \ \ NULL\ \ \ \ \ \ \ \ \ \ \ \ NULL
1\ \ \ \ \ \ \ Batman\ \ \ \ \ \ \ \ \ \ Batmobile\ \ \ \ \ \ \ 1940\-04\-25
2\ \ \ \ \ \ \ Catwoman\ \ \ \ \ \ \ \ Bullwhip\ \ \ \ \ \ \ \ NULL

After\ dropping\ nan\ values
index\ \ \ name\ \ \ \ toy\ \ \ \ \ \ \ \ \ \ \ \ \ born
1\ \ \ \ \ \ \ Batman\ \ Batmobile\ \ \ \ \ \ \ 1940\-04\-25
\f[]
.fi
.PP
For example,
.IP
.nf
\f[C]
#\ example\ of\ using\ dropna\ along\ axis\ =\ 1

import\ pandas\ as\ pd
import\ frovedis.dataframe\ as\ fdf

#\ creating\ a\ pandas\ dataframe
pd_df\ =\ pd.DataFrame({"name":\ [\[aq]Alfred\[aq],\ \[aq]Batman\[aq],\ \[aq]Catwoman\[aq]],
\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ "toy":\ [np.nan,\ \[aq]Batmobile\[aq],\ \[aq]Bullwhip\[aq]],
\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ "born":\ [np.nan,\ "1940\-04\-25",\ np.nan]})

#\ creating\ a\ frovedis\ dataframe\ from\ pandas\ dataframe
fd_df\ =\ fdf.DataFrame(pd_df)

#\ display\ frovedis\ dataframe
print("Before\ dropping\ nan\ values")
fd_df.show()

#\ drop\ the\ columns\ where\ at\ least\ one\ nan\ value\ is\ present
fd_df.dropna(axis=1)
\f[]
.fi
.PP
Output
.IP
.nf
\f[C]
Before\ dropping\ nan\ values
index\ \ \ name\ \ \ \ \ \ \ \ \ \ \ \ toy\ \ \ \ \ \ \ \ \ \ \ \ \ born
0\ \ \ \ \ \ \ Alfred\ \ \ \ \ \ \ \ \ \ NULL\ \ \ \ \ \ \ \ \ \ \ \ NULL
1\ \ \ \ \ \ \ Batman\ \ \ \ \ \ \ \ \ \ Batmobile\ \ \ \ \ \ \ 1940\-04\-25
2\ \ \ \ \ \ \ Catwoman\ \ \ \ \ \ \ \ Bullwhip\ \ \ \ \ \ \ \ NULL

index\ \ \ name
0\ \ \ \ \ \ \ Alfred
1\ \ \ \ \ \ \ Batman
2\ \ \ \ \ \ \ Catwoman
\f[]
.fi
.PP
For example,
.IP
.nf
\f[C]
#\ example\ of\ using\ dropna\ with\ parameter\ \[aq]how\[aq]\ =\ \[aq]all\[aq]

import\ pandas\ as\ pd
import\ frovedis.dataframe\ as\ fdf

#\ creating\ a\ pandas\ dataframe
pd_df\ =\ pd.DataFrame({"name":\ [np.nan,\ \[aq]Batman\[aq],\ \[aq]Catwoman\[aq]],
\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ "toy":\ [np.nan,\ \[aq]Batmobile\[aq],\ \[aq]Bullwhip\[aq]],
\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ "born":\ [np.nan,\ "1940\-04\-25",\ np.nan]})

#\ creating\ a\ frovedis\ dataframe\ from\ pandas\ dataframe
fd_df\ =\ fdf.DataFrame(pd_df)

#\ display\ frovedis\ dataframe
print("Before\ dropping\ nan\ values")
fd_df.show()

#\ drop\ the\ rows\ where\ all\ elements\ are\ missing.
fd_df.dropna(how=\[aq]all\[aq]).show()
\f[]
.fi
.PP
Output
.IP
.nf
\f[C]
Before\ dropping\ nan\ values
index\ \ \ name\ \ \ \ \ \ \ \ \ \ \ \ toy\ \ \ \ \ \ \ \ \ \ \ \ \ born
0\ \ \ \ \ \ \ NULL\ \ \ \ \ \ \ \ \ \ \ \ NULL\ \ \ \ \ \ \ \ \ \ \ \ NULL
1\ \ \ \ \ \ \ Batman\ \ \ \ \ \ \ \ \ \ Batmobile\ \ \ \ \ \ \ 1940\-04\-25
2\ \ \ \ \ \ \ Catwoman\ \ \ \ \ \ \ \ Bullwhip\ \ \ \ \ \ \ \ NULL

index\ \ \ name\ \ \ \ \ \ \ \ \ \ \ \ toy\ \ \ \ \ \ \ \ \ \ \ \ \ born
1\ \ \ \ \ \ \ Batman\ \ \ \ \ \ \ \ \ \ Batmobile\ \ \ \ \ \ \ 1940\-04\-25
2\ \ \ \ \ \ \ Catwoman\ \ \ \ \ \ \ \ Bullwhip\ \ \ \ \ \ \ \ NULL
\f[]
.fi
.PP
For example,
.IP
.nf
\f[C]
#\ example\ of\ using\ drop\ with\ parameter\ \[aq]thresh\[aq]

import\ pandas\ as\ pd
import\ frovedis.dataframe\ as\ fdf

#\ creating\ a\ pandas\ dataframe
pd_df\ =\ pd.DataFrame({"name":\ [\[aq]Alfred\[aq],\ \[aq]Batman\[aq],\ \[aq]Catwoman\[aq]],
\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ "toy":\ [np.nan,\ \[aq]Batmobile\[aq],\ \[aq]Bullwhip\[aq]],
\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ "born":\ [np.nan,\ "1940\-04\-25",\ np.nan]})

#\ creating\ a\ frovedis\ dataframe\ from\ pandas\ dataframe
fd_df\ =\ fdf.DataFrame(pd_df)

#\ display\ frovedis\ dataframe
print("Before\ dropping\ nan\ values")
fd_df.show()

#\ to\ keep\ only\ rows\ with\ at\ least\ 2\ non\-NA\ values.
fd_df.dropna(thresh=2).show()
\f[]
.fi
.PP
Output
.IP
.nf
\f[C]
Before\ dropping\ nan\ values
index\ \ \ name\ \ \ \ \ \ \ \ \ \ \ \ toy\ \ \ \ \ \ \ \ \ \ \ \ \ born
0\ \ \ \ \ \ \ Alfred\ \ \ \ \ \ \ \ \ \ NULL\ \ \ \ \ \ \ \ \ \ \ \ NULL
1\ \ \ \ \ \ \ Batman\ \ \ \ \ \ \ \ \ \ Batmobile\ \ \ \ \ \ \ 1940\-04\-25
2\ \ \ \ \ \ \ Catwoman\ \ \ \ \ \ \ \ Bullwhip\ \ \ \ \ \ \ \ NULL

index\ \ \ name\ \ \ \ \ \ \ \ \ \ \ \ toy\ \ \ \ \ \ \ \ \ \ \ \ \ born
1\ \ \ \ \ \ \ Batman\ \ \ \ \ \ \ \ \ \ Batmobile\ \ \ \ \ \ \ 1940\-04\-25
2\ \ \ \ \ \ \ Catwoman\ \ \ \ \ \ \ \ Bullwhip\ \ \ \ \ \ \ \ NULL
\f[]
.fi
.PP
\f[B]NOTE: Since row 0 had 2 NaN values, so it was dropped, but other
rows are not dropped.\f[]
.PP
For example,
.IP
.nf
\f[C]
#\ example\ of\ using\ dropna\ with\ parameter\ \[aq]subset\[aq]

import\ pandas\ as\ pd
import\ frovedis.dataframe\ as\ fdf

#\ creating\ a\ pandas\ dataframe
pd_df\ =\ pd.DataFrame({"name":\ [\[aq]Alfred\[aq],\ \[aq]Batman\[aq],\ \[aq]Catwoman\[aq]],
\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ "toy":\ [np.nan,\ \[aq]Batmobile\[aq],\ \[aq]Bullwhip\[aq]],
\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ "born":\ [np.nan,\ "1940\-04\-25",\ np.nan]})
\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ 
#\ creating\ a\ frovedis\ dataframe\ from\ pandas\ dataframe
fd_df\ =\ fdf.DataFrame(pd_df)

#\ display\ frovedis\ dataframe
print("Before\ dropping\ nan\ values")
fd_df.show()

#\ to\ drop\ missing\ values\ only\ from\ specified\ columns
fd_df.dropna(subset=[1,\ 2],\ axis\ =\ 1).show()
\f[]
.fi
.PP
Output
.IP
.nf
\f[C]
Before\ dropping\ nan\ values
index\ \ \ name\ \ \ \ \ \ \ \ \ \ \ \ toy\ \ \ \ \ \ \ \ \ \ \ \ \ born
0\ \ \ \ \ \ \ Alfred\ \ \ \ \ \ \ \ \ \ NULL\ \ \ \ \ \ \ \ \ \ \ \ NULL
1\ \ \ \ \ \ \ Batman\ \ \ \ \ \ \ \ \ \ Batmobile\ \ \ \ \ \ \ 1940\-04\-25
2\ \ \ \ \ \ \ Catwoman\ \ \ \ \ \ \ \ Bullwhip\ \ \ \ \ \ \ \ NULL

index\ \ \ name\ \ \ \ \ \ \ \ \ \ \ \ toy
0\ \ \ \ \ \ \ Alfred\ \ \ \ \ \ \ \ \ \ NULL
1\ \ \ \ \ \ \ Batman\ \ \ \ \ \ \ \ \ \ Batmobile
2\ \ \ \ \ \ \ Catwoman\ \ \ \ \ \ \ \ Bullwhip
\f[]
.fi
.PP
For example,
.IP
.nf
\f[C]
#\ example\ of\ using\ dropna\ with\ parameter\ \[aq]inplace\[aq]\ =\ True

import\ pandas\ as\ pd
import\ frovedis.dataframe\ as\ fdf

#\ creating\ a\ pandas\ dataframe
pd_df\ =\ pd.DataFrame({"name":\ [\[aq]Alfred\[aq],\ \[aq]Batman\[aq],\ \[aq]Catwoman\[aq]],
\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ "toy":\ [np.nan,\ \[aq]Batmobile\[aq],\ \[aq]Bullwhip\[aq]],
\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ "born":\ [np.nan,\ "1940\-04\-25",\ np.nan]})
#\ creating\ a\ frovedis\ dataframe\ from\ pandas\ dataframe
fd_df\ =\ fdf.DataFrame(pd_df)

#\ display\ frovedis\ dataframe
print("Before\ dropping\ nan\ values")
fd_df.show()

#\ to\ modify\ the\ original\ dataframe\ having\ only\ valid\ entries
fd_df.dropna(inplace=True)
fd_df.show()
\f[]
.fi
.PP
Output
.IP
.nf
\f[C]
Before\ dropping\ nan\ values
index\ \ \ name\ \ \ \ \ \ \ \ \ \ \ \ toy\ \ \ \ \ born
0\ \ \ \ \ \ \ Alfred\ \ \ \ \ \ \ \ \ \ NULL\ \ \ \ NULL
1\ \ \ \ \ \ \ Batman\ \ \ \ \ \ \ \ \ \ Batmobile\ \ \ \ \ \ \ 1940\-04\-25
2\ \ \ \ \ \ \ Catwoman\ \ \ \ \ \ \ \ Bullwhip\ \ \ \ \ \ \ \ NULL

index\ \ \ name\ \ \ \ toy\ \ \ \ \ \ \ \ \ \ \ \ \ born
1\ \ \ \ \ \ \ Batman\ \ Batmobile\ \ \ \ \ \ \ 1940\-04\-25
\f[]
.fi
.PP
\f[B]Return Value\f[]
.PD 0
.P
.PD
1.
If inplace = False, it returns a new Frovedis DataFrame with NA entries
dropped.
.PD 0
.P
.PD
2.
If inplace = True, it returns None.
.SS 5. fillna(value = None, method = None, axis = None, inplace = False,
limit = None, downcast = None)
.PP
\f[B]Parameters\f[]
.PD 0
.P
.PD
\f[B]\f[I]value\f[]\f[]: It accepts a numeric type as parameter which is
used to replace all NA values (e.g.
0, NULL).
(Default: None)
.PD 0
.P
.PD
When it is None (not specified explicitly), it must be NaN value or
numeric, non\-numeric value otherwise it will raise an exception.
.PD 0
.P
.PD
\f[B]\f[I]method\f[]\f[]: This is an unused parameter.
(Default: None)
.PD 0
.P
.PD
\f[B]\f[I]axis\f[]\f[]: It accepts an integer or string object as
parameter.
It decides the axis along which missing values will be filled.
(Default: None)
.PD 0
.P
.PD
\- 0 or \[aq]index\[aq]: Operation will be carried out on rows.
Currently only axis = 0 is supported in Frovedis DataFrame.
.PD 0
.P
.PD
\f[B]\f[I]inplace\f[]\f[]: This parameter accepts a boolean value.
When it is set to True, then it performs operation on the original
Frovedis DataFrame object itself otherwise operation is performed on a
new Frovedis DataFrame object.
(Default: False)
.PD 0
.P
.PD
\f[B]\f[I]limit\f[]\f[]: This is an unused parameter.
(Default: None)
.PD 0
.P
.PD
\f[B]\f[I]downcast\f[]\f[]: This is an unused parameter.
(Default: None)
.PP
\f[B]Purpose\f[]
.PD 0
.P
.PD
It replaces NA/NaN values with the specified value provided in
\[aq]value\[aq] parameter in the Frovedis DataFrame.
.PP
The parameters: "method", "limit" and "downcast" are simply kept in to
make the interface uniform to the pandas DataFrame.fillna().
.PD 0
.P
.PD
This is not used anywhere within the frovedis implementation.
.PP
For example,
.IP
.nf
\f[C]
#\ example\ of\ using\ fillna\ to\ replace\ NaN\ with\ 0\ and\ other\ default\ parameters

import\ pandas\ as\ pd
import\ frovedis.dataframe\ as\ fdf

pd_df\ =\ pd.DataFrame([[np.nan,\ 2,\ np.nan,\ 0],
\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ [3,\ 4,\ np.nan,\ 1],
\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ [np.nan,\ np.nan,\ np.nan,\ 5],
\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ [np.nan,\ 3,\ np.nan,\ 4]],
\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ columns=list("ABCD"))
fd_df\ =\ fdf.DataFrame(pd_df)

#\ display\ frovedis\ dataframe
fd_df.show()

#\ replace\ all\ NaN\ elements\ with\ 0s.
fd_df.fillna(0).show()
\f[]
.fi
.PP
Output
.IP
.nf
\f[C]
index\ \ \ A\ \ \ \ \ \ \ B\ \ \ \ \ \ \ C\ \ \ \ \ \ \ D
0\ \ \ \ \ \ \ NULL\ \ \ \ 2\ \ \ \ \ \ \ NULL\ \ \ \ 0
1\ \ \ \ \ \ \ 3\ \ \ \ \ \ \ 4\ \ \ \ \ \ \ NULL\ \ \ \ 1
2\ \ \ \ \ \ \ NULL\ \ \ \ NULL\ \ \ \ NULL\ \ \ \ 5
3\ \ \ \ \ \ \ NULL\ \ \ \ 3\ \ \ \ \ \ \ NULL\ \ \ \ 4

index\ \ \ A\ \ \ \ \ \ \ B\ \ \ \ \ \ \ C\ \ \ \ \ \ \ D
0\ \ \ \ \ \ \ 0\ \ \ \ \ \ \ 2\ \ \ \ \ \ \ 0\ \ \ \ \ \ \ 0
1\ \ \ \ \ \ \ 3\ \ \ \ \ \ \ 4\ \ \ \ \ \ \ 0\ \ \ \ \ \ \ 1
2\ \ \ \ \ \ \ 0\ \ \ \ \ \ \ 0\ \ \ \ \ \ \ 0\ \ \ \ \ \ \ 5
3\ \ \ \ \ \ \ 0\ \ \ \ \ \ \ 3\ \ \ \ \ \ \ 0\ \ \ \ \ \ \ 4
\f[]
.fi
.PP
For example,
.IP
.nf
\f[C]
#\ example\ to\ use\ fillna\ with\ negative\ value\ and\ inplace\ =\ True

import\ pandas\ as\ pd
import\ frovedis.dataframe\ as\ fdf

pd_df\ =\ pd.DataFrame([[np.nan,\ 2,\ np.nan,\ 0],
\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ [3,\ 4,\ np.nan,\ 1],
\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ [np.nan,\ np.nan,\ np.nan,\ 5],
\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ [np.nan,\ 3,\ np.nan,\ 4]],
\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ columns=list("ABCD"))
fd_df\ =\ fdf.DataFrame(pd_df)
#\ display\ frovedis\ dataframe
fd_df.show()

#\ replace\ all\ NaN\ elements\ with\ \-1s\ and\ inplace\ =\ True
fd_df.fillna(\-1,\ inplace\ =\ True)

#\ display\ after\ modifying\ the\ original\ object
fd_df.show()
\f[]
.fi
.PP
Output
.IP
.nf
\f[C]
index\ \ \ A\ \ \ \ \ \ \ B\ \ \ \ \ \ \ C\ \ \ \ \ \ \ D
0\ \ \ \ \ \ \ NULL\ \ \ \ 2\ \ \ \ \ \ \ NULL\ \ \ \ 0
1\ \ \ \ \ \ \ 3\ \ \ \ \ \ \ 4\ \ \ \ \ \ \ NULL\ \ \ \ 1
2\ \ \ \ \ \ \ NULL\ \ \ \ NULL\ \ \ \ NULL\ \ \ \ 5
3\ \ \ \ \ \ \ NULL\ \ \ \ 3\ \ \ \ \ \ \ NULL\ \ \ \ 4

index\ \ \ A\ \ \ \ \ \ \ B\ \ \ \ \ \ \ C\ \ \ \ \ \ \ D
0\ \ \ \ \ \ \ \-1\ \ \ \ \ \ 2\ \ \ \ \ \ \ \-1\ \ \ \ \ \ 0
1\ \ \ \ \ \ \ 3\ \ \ \ \ \ \ 4\ \ \ \ \ \ \ \-1\ \ \ \ \ \ 1
2\ \ \ \ \ \ \ \-1\ \ \ \ \ \ \-1\ \ \ \ \ \ \-1\ \ \ \ \ \ 5
3\ \ \ \ \ \ \ \-1\ \ \ \ \ \ 3\ \ \ \ \ \ \ \-1\ \ \ \ \ \ 4
\f[]
.fi
.PP
\f[B]Return Value\f[]
.PD 0
.P
.PD
1.
It returns a Frovedis DataFrame object with missing values replaced when
\[aq]inplace\[aq] parameter is False.
.PD 0
.P
.PD
2.
It returns None when \[aq]inplace\[aq] parameter is set to True.
.SS 6. isna()
.PP
\f[B]Purpose\f[]
.PD 0
.P
.PD
This method is used to detect missing values in the Frovedis DataFrame.
.PP
It returns a boolean same\-sized object indicating if the values are NA.
NA values, such as None or numpy.NaN, gets mapped to True values.
Everything else gets mapped to False values.
Characters such as empty strings \[aq]\[aq] or numpy.inf are not
considered NA values.
.PP
For example,
.IP
.nf
\f[C]
#\ example\ of\ using\ isna()\ on\ a\ pandas\ DataFrame\ converted\ to\ Frovedis\ DataFrame

import\ pandas\ as\ pd
import\ frovedis.dataframe\ as\ fdf

#\ show\ which\ entries\ in\ a\ DataFrame\ are\ NA.
peopleDF\ =\ {
\ \ \ \ \ \ \ \ \[aq]Ename\[aq]\ :\ [\[aq]Michael\[aq],\ None,\ \[aq]Tanaka\[aq],\ \[aq]Raul\[aq],\ \[aq]\[aq]],
\ \ \ \ \ \ \ \ \[aq]Age\[aq]\ :\ [29,\ 30,\ 27,\ 19,\ 0],
\ \ \ \ \ \ \ \ \[aq]Country\[aq]\ :\ [\[aq]USA\[aq],\ np.inf,\ \[aq]Japan\[aq],\ np.nan,\ \[aq]Japan\[aq]],
\ \ \ \ \ \ \ \ \[aq]isMale\[aq]:\ [False,\ False,\ False,\ False,\ True]
\ \ \ \ \ \ \ }

pd_df\ =\ pd.DataFrame(peopleDF)

#\ creating\ a\ frovedis\ dataframe
fd_df\ =\ fdf.DataFrame(pd_df)

#\ to\ display\ frovedis\ dataframe
fd_df.show()

#\ to\ display\ fields\ which\ are\ only\ NA
fd_df.isna().show()
\f[]
.fi
.PP
Output
.IP
.nf
\f[C]
index\ \ \ Ename\ \ \ Age\ \ \ \ \ Country\ isMale
0\ \ \ \ \ \ \ Michael\ 29\ \ \ \ \ \ USA\ \ \ \ \ 0
1\ \ \ \ \ \ \ NULL\ \ \ \ 30\ \ \ \ \ \ inf\ \ \ \ \ 0
2\ \ \ \ \ \ \ Tanaka\ \ 27\ \ \ \ \ \ Japan\ \ \ 0
3\ \ \ \ \ \ \ Raul\ \ \ \ 19\ \ \ \ \ \ NULL\ \ \ \ 0
4\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ 0\ \ \ \ \ \ \ Japan\ \ \ 1

index\ \ \ Ename\ \ \ Age\ \ \ \ \ Country\ isMale
0\ \ \ \ \ \ \ 0\ \ \ \ \ \ \ 0\ \ \ \ \ \ \ 0\ \ \ \ \ \ \ 0
1\ \ \ \ \ \ \ 1\ \ \ \ \ \ \ 0\ \ \ \ \ \ \ 0\ \ \ \ \ \ \ 0
2\ \ \ \ \ \ \ 0\ \ \ \ \ \ \ 0\ \ \ \ \ \ \ 0\ \ \ \ \ \ \ 0
3\ \ \ \ \ \ \ 0\ \ \ \ \ \ \ 0\ \ \ \ \ \ \ 1\ \ \ \ \ \ \ 0
4\ \ \ \ \ \ \ 0\ \ \ \ \ \ \ 0\ \ \ \ \ \ \ 0\ \ \ \ \ \ \ 0
\f[]
.fi
.PP
For example,
.IP
.nf
\f[C]
#\ example\ of\ using\ isna()\ on\ a\ Series\ object\ converted\ to\ Frovedis\ DataFrame\ object

import\ pandas\ as\ pd
import\ frovedis.dataframe\ as\ fdf

#\ frovedis\ dataframe\ from\ a\ Series\ object.
ser\ =\ pd.Series([5,\ 6,\ np.NaN])
fd_df\ =\ fdf.DataFrame(ser)

#\ display\ frovedis\ dataframe
fd_df.show()

#\ display\ na\ values\ mapped\ to\ corresponding\ dataframe
fd_df.isna().show()
\f[]
.fi
.PP
Output
.IP
.nf
\f[C]
index\ \ \ 0
0\ \ \ \ \ \ \ 5
1\ \ \ \ \ \ \ 6
2\ \ \ \ \ \ \ NULL

index\ \ \ 0
0\ \ \ \ \ \ \ 0
1\ \ \ \ \ \ \ 0
2\ \ \ \ \ \ \ 1
\f[]
.fi
.PP
\f[B]Return Value\f[]
.PD 0
.P
.PD
It returns a new Frovedis DataFrame having all boolean values (0, 1)
corresponding to each of the Frovedis DataFrame values depending on
whether it is a valid NaN (True i.e.
1) value or not (False i.e.
0).
.SS 7. isnull()
.PP
\f[B]Purpose\f[]
.PD 0
.P
.PD
This method is used to detect missing values in the Frovedis DataFrame.
It is an alias of isna().
.PP
It returns a boolean same\-sized object indicating if the values are NA.
NA values, such as None or numpy.NaN, gets mapped to True values.
Everything else gets mapped to False values.
Characters such as empty strings \[aq]\[aq] or numpy.inf are not
considered NA values.
.PP
For example,
.IP
.nf
\f[C]
#\ example\ to\ use\ isnull

import\ pandas\ as\ pd
import\ frovedis.dataframe\ as\ fdf

#\ show\ which\ entries\ in\ a\ DataFrame\ are\ NA.
peopleDF\ =\ {
\ \ \ \ \ \ \ \ \ \ \ \ \[aq]Ename\[aq]\ :\ [\[aq]Michael\[aq],\ None,\ \[aq]Tanaka\[aq],\ \[aq]Raul\[aq],\ \[aq]\[aq]],
\ \ \ \ \ \ \ \ \ \ \ \ \[aq]Age\[aq]\ :\ [29,\ 30,\ 27,\ 19,\ 0],
\ \ \ \ \ \ \ \ \ \ \ \ \[aq]Country\[aq]\ :\ [\[aq]USA\[aq],\ \[aq]England\[aq],\ \[aq]Japan\[aq],\ np.nan,\ \[aq]Japan\[aq]],
\ \ \ \ \ \ \ \ \ \ \ \ \[aq]isMale\[aq]:\ [False,\ False,\ False,\ False,\ True]
\ \ \ \ \ \ \ \ \ \ \ }
pd_df\ =\ pd.DataFrame(peopleDF)

#\ convert\ to\ frovedis\ dataframe
fd_df\ =\ fdf.DataFrame(pd_df)

#\ display\ frovedis\ dataframe
fd_df.show()

#\ displya\ na\ values\ mapped\ to\ corresponding\ dataframe
fd_df.isnull().show()
\f[]
.fi
.PP
Output
.IP
.nf
\f[C]
index\ \ \ Ename\ \ \ Age\ \ \ \ \ Country\ isMale
0\ \ \ \ \ \ \ Michael\ 29\ \ \ \ \ \ USA\ \ \ \ \ 0
1\ \ \ \ \ \ \ NULL\ \ \ \ 30\ \ \ \ \ \ England\ 0
2\ \ \ \ \ \ \ Tanaka\ \ 27\ \ \ \ \ \ Japan\ \ \ 0
3\ \ \ \ \ \ \ Raul\ \ \ \ 19\ \ \ \ \ \ NULL\ \ \ \ 0
4\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ 0\ \ \ \ \ \ \ Japan\ \ \ 1

index\ \ \ Ename\ \ \ Age\ \ \ \ \ Country\ isMale
0\ \ \ \ \ \ \ 0\ \ \ \ \ \ \ 0\ \ \ \ \ \ \ 0\ \ \ \ \ \ \ 0
1\ \ \ \ \ \ \ 1\ \ \ \ \ \ \ 0\ \ \ \ \ \ \ 0\ \ \ \ \ \ \ 0
2\ \ \ \ \ \ \ 0\ \ \ \ \ \ \ 0\ \ \ \ \ \ \ 0\ \ \ \ \ \ \ 0
3\ \ \ \ \ \ \ 0\ \ \ \ \ \ \ 0\ \ \ \ \ \ \ 1\ \ \ \ \ \ \ 0
4\ \ \ \ \ \ \ 0\ \ \ \ \ \ \ 0\ \ \ \ \ \ \ 0\ \ \ \ \ \ \ 0
\f[]
.fi
.PP
For example,
.IP
.nf
\f[C]
#\ example\ to\ use\ isnull\ on\ a\ frovedis\ dataframe\ converted\ from\ Series\ object

import\ pandas\ as\ pd
import\ frovedis.dataframe\ as\ fdf

#\ frovedis\ dataframe\ from\ a\ Series\ object.
ser\ =\ pd.Series([5,\ 6,\ np.NaN])
fd_df\ =\ fdf.DataFrame(ser)

#\ display\ frovedis\ dataframe
fd_df.show()

#\ display\ na\ values\ mapped\ to\ corresponding\ dataframe
fd_df.isnull().show()
\f[]
.fi
.PP
Output
.IP
.nf
\f[C]
index\ \ \ 0
0\ \ \ \ \ \ \ 5
1\ \ \ \ \ \ \ 6
2\ \ \ \ \ \ \ NULL

index\ \ \ 0
0\ \ \ \ \ \ \ 0
1\ \ \ \ \ \ \ 0
2\ \ \ \ \ \ \ 1
\f[]
.fi
.PP
\f[B]Return Value\f[]
.PD 0
.P
.PD
It returns a Frovedis DataFrame having boolean values (0, 1)
corresponding to each of the Frovedis DataFrame value depending of
whether it is a valid NaN (True i.e.
1) value or not (False i.e.
0).
.SS 8. groupby(by = None, axis = 0, level = None, as_index = True, sort
= True, group_keys = True, squeeze = False, observed = False, dropna =
True)
.PP
\f[B]Parameters\f[]
.PD 0
.P
.PD
\f[B]\f[I]by\f[]\f[]: It accepts a string object or an iterable to
determine the groups on which groupby operation will be applied.
Currently, gropuby operation will be applied along the index levels.
It must be provided, otherwise it will raise an exception.
(Default: None)
.PD 0
.P
.PD
\f[B]\f[I]axis\f[]\f[]: It accepts an integer as parameter.
It is used to decide whether to perform groupby operation along the
indices or by column labels.
(Default: 0)
.PD 0
.P
.PD
\f[B]Currently, axis = 0 is supported by this method.\f[]
.PD 0
.P
.PD
\f[B]\f[I]level\f[]\f[]: This is an unused parameter.
(Default: None)
.PD 0
.P
.PD
\f[I]\f[B]as_index\f[]\f[]: This is an unused parameter.
(Default: True)
.PD 0
.P
.PD
\f[I]\f[B]sort\f[]\f[]: This is an unused parameter.
(Default: True)
.PD 0
.P
.PD
\f[I]\f[B]group_keys\f[]\f[]: This is an unused parameter.
(Default: True)
.PD 0
.P
.PD
\f[I]\f[B]squeeze\f[]\f[]: This is an unused parameter.
(Default: False)
.PD 0
.P
.PD
\f[I]\f[B]observed\f[]\f[]: This is an unused parameter.
(Default: False)
.PD 0
.P
.PD
\f[I]\f[B]dropna\f[]\f[]: It accepts a boolean parameter.
It is used to remove missing values (NaNs) from the frovedis DataFrame
during groupby operation.
Currently, it removes missing values along the index levels.
(Default: True)
.PP
\f[B]Purpose\f[]
.PD 0
.P
.PD
This method can be used to group large amounts of data and compute
operations on these groups.
.PP
The parameters: "level", "as_index", "sort", "group_keys", "squeeze" and
"observed" is simply kept in to make the interface uniform to the pandas
DataFrame.groupby().
.PD 0
.P
.PD
This is not used anywhere within the frovedis implementation.
.PP
For example,
.IP
.nf
\f[C]
import\ pandas\ as\ pd
import\ numpy\ as\ np
import\ frovedis.dataframe\ as\ fdf

#\ a\ dictionary
peopleDF\ =\ {
\ \ \ \ \ \ \ \ \ \ \ \ \[aq]Name\[aq]:\ [\[aq]Jai\[aq],\ \[aq]Anuj\[aq],\ \[aq]Jai\[aq],\ \[aq]Princi\[aq],\ \[aq]Gaurav\[aq],\ \[aq]Anuj\[aq],\ \[aq]Princi\[aq],\ \[aq]Abhi\[aq]],
\ \ \ \ \ \ \ \ \ \ \ \ \[aq]Age\[aq]:\ [27,\ 24,\ 22,\ 32,\ 33,\ 36,\ 27,\ 32],
\ \ \ \ \ \ \ \ \ \ \ \ \[aq]City\[aq]:\ [\[aq]Nagpur\[aq],\ \[aq]Kanpur\[aq],\ \[aq]Allahabad\[aq],\ \[aq]Kannuaj\[aq],\ \[aq]Allahabad\[aq],\ 
\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \[aq]Kanpur\[aq],\ \[aq]Kanpur\[aq],\ \[aq]Kanpur\[aq]],
\ \ \ \ \ \ \ \ \ \ \ \ \[aq]Qualification\[aq]:\ [\[aq]B.Tech\[aq],\ \[aq]Phd\[aq],\ \[aq]B.Tech\[aq],\ np.nan,\ \[aq]Phd\[aq],\ \[aq]B.Tech\[aq],\ \[aq]Phd\[aq],\ np.nan],
\ \ \ \ \ \ \ \ \ \ \ \ \[aq]Score\[aq]:\ [23,\ 34,\ 35,\ 45,\ np.nan,\ 50,\ 52,\ np.nan]
\ \ \ \ \ \ \ \ \ \ \ }

#\ create\ pandas\ dataframe
pdf1\ =\ pd.DataFrame(peopleDF)

#\ create\ frovedis\ dataframe
fdf1\ =\ fdf.DataFrame(pdf1)

#\ display\ the\ frovedis\ dataframe
fdf1.show()
\ \ \ \ 
\f[]
.fi
.PP
Output
.IP
.nf
\f[C]
index\ \ \ Name\ \ \ \ Age\ \ \ City\ \ \ \ \ \ \ Qualification\ \ Score
0\ \ \ \ \ \ \ Jai\ \ \ \ \ 27\ \ \ \ Nagpur\ \ \ \ \ B.Tech\ \ \ \ \ \ \ \ \ 23
1\ \ \ \ \ \ \ Anuj\ \ \ \ 24\ \ \ \ Kanpur\ \ \ \ \ Phd\ \ \ \ \ \ \ \ \ \ \ \ 34
2\ \ \ \ \ \ \ Jai\ \ \ \ \ 22\ \ \ \ Allahabad\ \ B.Tech\ \ \ \ \ \ \ \ \ 35
3\ \ \ \ \ \ \ Princi\ \ 32\ \ \ \ Kannuaj\ \ \ \ NULL\ \ \ \ \ \ \ \ \ \ \ 45
4\ \ \ \ \ \ \ Gaurav\ \ 33\ \ \ \ Allahabad\ \ Phd\ \ \ \ \ \ \ \ \ \ \ \ NULL
5\ \ \ \ \ \ \ Anuj\ \ \ \ 36\ \ \ \ Kanpur\ \ \ \ \ B.Tech\ \ \ \ \ \ \ \ \ 50
6\ \ \ \ \ \ \ Princi\ \ 27\ \ \ \ Kanpur\ \ \ \ \ Phd\ \ \ \ \ \ \ \ \ \ \ \ 52
7\ \ \ \ \ \ \ Abhi\ \ \ \ 32\ \ \ \ Kanpur\ \ \ \ \ NULL\ \ \ \ \ \ \ \ \ \ \ NULL
\f[]
.fi
.PP
For example,
.IP
.nf
\f[C]
#\ groupby()\ demo
fdf1.groupby(\[aq]Qualification\[aq])
\f[]
.fi
.PP
This will perform groupby operation on the dataframe over
\f[B]\[aq]Qualification\[aq]\f[] column data.
.PP
For example,
.IP
.nf
\f[C]
#\ groupby()\ demo\ to\ perform\ aggregation\ on\ resultant\ grouped\ dataframe
#\ Also,\ dropna\ =\ True\ by\ default
fdf1.groupby(\[aq]Qualification\[aq],\ dropna\ =\ True).agg({\[aq]Score\[aq]:\ \[aq]count\[aq]})
\f[]
.fi
.PP
Output
.IP
.nf
\f[C]
Qualification\ \ \ count_Score
B.Tech\ \ 3
Phd\ \ \ \ \ 2
\f[]
.fi
.PP
Here, it excludes \f[B]NULL\f[] group since missing values were dropped
during groupby().
.PP
For example,
.IP
.nf
\f[C]
#\ groupby()\ demo\ to\ perform\ aggregation\ on\ resultant\ grouped\ dataframe
#\ Also,\ dropna\ =\ False
fdf1.groupby(\[aq]Qualification\[aq],\ dropna\ =\ False).agg({\[aq]Score\[aq]:\ \[aq]count\[aq]})
\f[]
.fi
.PP
Output
.IP
.nf
\f[C]
Qualification\ \ \ count_Score
B.Tech\ \ 3
Phd\ \ \ \ \ 2
NULL\ \ \ \ 1
\f[]
.fi
.PP
Here, it includes \f[B]NULL\f[] as new group since missing values were
not dropped during groupby().
.PP
\f[B]Return Value\f[]
.PD 0
.P
.PD
It returns a FrovedisGroupedDataFrame instance.
.SS 9. nsort(n, columns, keep=\[aq]first\[aq], is_desc=False)
.PP
\f[B]Parameters\f[]
.PD 0
.P
.PD
\f[B]\f[I]n\f[]\f[]: It accepts a positive integer parameter which
represents the number of rows to return.
.PD 0
.P
.PD
\f[B]\f[I]columns\f[]\f[]: It accepts a string type or list of strings
type parameter which represents the column label(s) to order by.
.PD 0
.P
.PD
\f[B]\f[I]keep\f[]\f[]: It accepts a string object parameter.
This parameter is used when there are duplicate values.
(Default: \[aq]first\[aq])
.PD 0
.P
.PD
1.
\f[B]\[aq]first\[aq]\f[] : it prioritizes the first occurrence(s)
.PD 0
.P
.PD
2.
\f[B]\[aq]last\[aq]\f[] : it prioritizes the last occurrence(s)
.PD 0
.P
.PD
3.
\f[B]\[aq]all\[aq]\f[] : it is used to not drop any duplicates, even
when it means selecting more than \f[B]n\f[] items.
.PP
\f[B]\f[I]is_desc\f[]\f[]: It accepts a boolean value as parameter.
This parameter decides the order to sort the data.
When this parameter is explicitly passed as True, it sorts the data into
descending order.
(Default: False)
.PP
\f[B]Purpose\f[]
.PD 0
.P
.PD
It is used to return the top \f[B]n\f[] rows ordered by the specified
columns in ascending or descending order.
The columns that are not specified are returned as well, but not used
for ordering.
.PP
For example,
.IP
.nf
\f[C]
#\ example\ to\ use\ nsort\ with\ default\ parameters\ with\ n\ =\ 3\ and\ columns\ =\ \[aq]population\[aq]

import\ pandas\ as\ pd
import\ frovedis.dataframe\ as\ fdf

#\ In\ the\ following\ example,\ we\ will\ use\ nlargest()\ to\ select\ the\ three\ rows\ having\ the\ largest\ values\ in\ column\ “population”.
pd_df\ =\ pd.DataFrame({\[aq]population\[aq]:\ [59000000,\ 65000000,\ 434000,\ 434000,\ 
\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ 434000,\ 337000,\ 11300,\ 11300,\ 11300],
\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \[aq]GDP\[aq]:\ [1937894,\ 2583560\ ,\ 12011,\ 4520,\ 12128,
\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ 17036,\ 182,\ 38,\ 311],
\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \[aq]alpha\-2\[aq]:\ ["IT",\ "FR",\ "MT",\ "MV",\ "BN",
\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ "IS",\ "NR",\ "TV",\ "AI"]},
\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ index=["Italy",\ "France",\ "Malta",
\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ "Maldives",\ "Brunei",\ "Iceland",
\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ "Nauru",\ "Tuvalu",\ "Anguilla"])
fd_df\ =\ fdf.DataFrame(pd_df)

#\ to\ display\ frovedis\ dataframe
fd_df.show()

#\ to\ display\ n\ largest\ rows\ according\ to\ given\ column
fd_df.nsort(3,\ \[aq]population\[aq]).show()
\f[]
.fi
.PP
Output
.IP
.nf
\f[C]
index\ \ \ \ \ \ \ \ \ \ \ population\ \ \ \ \ \ GDP\ \ \ \ \ alpha\-2
Italy\ \ \ \ \ \ \ \ \ \ \ 59000000\ \ \ \ \ \ \ \ 1937894\ IT
France\ \ \ \ \ \ \ \ \ \ 65000000\ \ \ \ \ \ \ \ 2583560\ FR
Malta\ \ \ \ \ \ \ \ \ \ \ 434000\ \ \ \ \ \ \ \ \ \ 12011\ \ \ MT
Maldives\ \ \ \ \ \ \ \ 434000\ \ \ \ \ \ \ \ \ \ 4520\ \ \ \ MV
Brunei\ \ \ \ \ \ \ \ \ \ 434000\ \ \ \ \ \ \ \ \ \ 12128\ \ \ BN
Iceland\ \ \ \ \ \ \ \ \ 337000\ \ \ \ \ \ \ \ \ \ 17036\ \ \ IS
Nauru\ \ \ \ \ \ \ \ \ \ \ 11300\ \ \ \ \ \ \ \ \ \ \ 182\ \ \ \ \ NR
Tuvalu\ \ \ \ \ \ \ \ \ \ 11300\ \ \ \ \ \ \ \ \ \ \ 38\ \ \ \ \ \ TV
Anguilla\ \ \ \ \ \ \ \ 11300\ \ \ \ \ \ \ \ \ \ \ 311\ \ \ \ \ AI

index\ \ \ \ \ \ \ \ \ \ \ population\ \ \ \ \ \ GDP\ \ \ \ \ alpha\-2
France\ \ \ \ \ \ \ \ \ \ 65000000\ \ \ \ \ \ \ \ 2583560\ FR
Italy\ \ \ \ \ \ \ \ \ \ \ 59000000\ \ \ \ \ \ \ \ 1937894\ IT
Malta\ \ \ \ \ \ \ \ \ \ \ 434000\ \ \ \ \ \ \ \ \ \ 12011\ \ \ MT

index\ \ \ \ \ population\ \ \ GDP\ \ \ \ \ alpha\-2
Italy\ \ \ \ \ 59000000\ \ \ \ \ 1937894\ IT
France\ \ \ \ 65000000\ \ \ \ \ 2583560\ FR
Malta\ \ \ \ \ 434000\ \ \ \ \ \ \ 12011\ \ \ MT
Maldives\ \ 434000\ \ \ \ \ \ \ 4520\ \ \ \ MV
Brunei\ \ \ \ 434000\ \ \ \ \ \ \ 12128\ \ \ BN
Iceland\ \ \ 337000\ \ \ \ \ \ \ 17036\ \ \ IS
Nauru\ \ \ \ \ 11300\ \ \ \ \ \ \ \ 182\ \ \ \ \ NR
Tuvalu\ \ \ \ 11300\ \ \ \ \ \ \ \ 38\ \ \ \ \ \ TV
Anguilla\ \ 11300\ \ \ \ \ \ \ \ 311\ \ \ \ \ AI

index\ \ \ \ \ population\ \ \ GDP\ \ \ \ \ alpha\-2
Nauru\ \ \ \ \ 11300\ \ \ \ \ \ \ \ 182\ \ \ \ \ NR
Tuvalu\ \ \ \ 11300\ \ \ \ \ \ \ \ 38\ \ \ \ \ \ TV
Anguilla\ \ 11300\ \ \ \ \ \ \ \ 311\ \ \ \ \ AI
\f[]
.fi
.PP
For example,
.IP
.nf
\f[C]
#\ example\ to\ show\ the\ behavior\ of\ nsort\ with\ keep\ =\ \[aq]last\[aq]

import\ pandas\ as\ pd
import\ frovedis.dataframe\ as\ fdf

#\ When\ using\ keep=\[aq]last\[aq],\ it\ will\ show\ the\ row\ only\ having\ last\ occurrence\ of\ the\ duplicate\ :
pd_df\ =\ pd.DataFrame({\[aq]population\[aq]:\ [59000000,\ 65000000,\ 434000,\ 434000,\ 
\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ 434000,\ 337000,\ 11300,\ 11300,\ 11300],
\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \[aq]GDP\[aq]:\ [1937894,\ 2583560\ ,\ 12011,\ 4520,\ 12128,
\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ 17036,\ 182,\ 38,\ 311],
\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \[aq]alpha\-2\[aq]:\ ["IT",\ "FR",\ "MT",\ "MV",\ "BN",
\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ "IS",\ "NR",\ "TV",\ "AI"]},
\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ index=["Italy",\ "France",\ "Malta",
\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ "Maldives",\ "Brunei",\ "Iceland",
\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ "Nauru",\ "Tuvalu",\ "Anguilla"])
fd_df\ =\ fdf.DataFrame(pd_df)

#\ to\ display\ frovedis\ dataframe
fd_df.show()

fd_df.nsort(3,\ \[aq]population\[aq],\ keep=\[aq]last\[aq]).show()
\f[]
.fi
.PP
Output
.IP
.nf
\f[C]
index\ \ \ \ \ \ population\ \ \ \ GDP\ \ \ \ \ \ alpha\-2
Italy\ \ \ \ \ \ 59000000\ \ \ \ \ \ 1937894\ \ IT
France\ \ \ \ \ 65000000\ \ \ \ \ \ 2583560\ \ FR
Malta\ \ \ \ \ \ 434000\ \ \ \ \ \ \ \ 12011\ \ \ \ MT
Maldives\ \ \ 434000\ \ \ \ \ \ \ \ 4520\ \ \ \ \ MV
Brunei\ \ \ \ \ 434000\ \ \ \ \ \ \ \ 12128\ \ \ \ BN
Iceland\ \ \ \ 337000\ \ \ \ \ \ \ \ 17036\ \ \ \ IS
Nauru\ \ \ \ \ \ 11300\ \ \ \ \ \ \ \ \ 182\ \ \ \ \ \ NR
Tuvalu\ \ \ \ \ 11300\ \ \ \ \ \ \ \ \ 38\ \ \ \ \ \ \ TV
Anguilla\ \ \ 11300\ \ \ \ \ \ \ \ \ 311\ \ \ \ \ \ AI

index\ \ \ \ \ \ population\ \ \ \ GDP\ \ \ \ \ \ alpha\-2
Anguilla\ \ \ 11300\ \ \ \ \ \ \ \ \ 311\ \ \ \ \ \ AI
Tuvalu\ \ \ \ \ 11300\ \ \ \ \ \ \ \ \ 38\ \ \ \ \ \ \ TV
Nauru\ \ \ \ \ \ 11300\ \ \ \ \ \ \ \ \ 182\ \ \ \ \ \ NR
\f[]
.fi
.PP
For example,
.IP
.nf
\f[C]
#\ example\ to\ show\ the\ behavior\ of\ nsort\ with\ keep\ =\ \[aq]all\[aq]

import\ pandas\ as\ pd
import\ frovedis.dataframe\ as\ fdf

#\ When\ using\ keep=\[aq]all\[aq],\ all\ duplicate\ items\ are\ maintained:
pd_df\ =\ pd.DataFrame({\[aq]population\[aq]:\ [59000000,\ 65000000,\ 434000,\ 434000,\ 
\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ 434000,\ 337000,\ 11300,\ 11300,\ 11300],
\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \[aq]GDP\[aq]:\ [1937894,\ 2583560\ ,\ 12011,\ 4520,\ 12128,
\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ 17036,\ 182,\ 38,\ 311],
\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \[aq]alpha\-2\[aq]:\ ["IT",\ "FR",\ "MT",\ "MV",\ "BN",
\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ "IS",\ "NR",\ "TV",\ "AI"]},
\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ index=["Italy",\ "France",\ "Malta",
\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ "Maldives",\ "Brunei",\ "Iceland",
\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ "Nauru",\ "Tuvalu",\ "Anguilla"])
fd_df\ =\ fdf.DataFrame(pd_df)

#\ to\ display\ frovedis\ dataframe
fd_df.show()

fd_df.nsort(3,\ \[aq]population\[aq],\ keep=\[aq]all\[aq]).show()
\f[]
.fi
.PP
Output
.IP
.nf
\f[C]
index\ \ \ \ \ \ population\ \ \ \ GDP\ \ \ \ \ \ alpha\-2
Italy\ \ \ \ \ \ 59000000\ \ \ \ \ \ 1937894\ \ IT
France\ \ \ \ \ 65000000\ \ \ \ \ \ 2583560\ \ FR
Malta\ \ \ \ \ \ 434000\ \ \ \ \ \ \ \ 12011\ \ \ \ MT
Maldives\ \ \ 434000\ \ \ \ \ \ \ \ 4520\ \ \ \ \ MV
Brunei\ \ \ \ \ 434000\ \ \ \ \ \ \ \ 12128\ \ \ \ BN
Iceland\ \ \ \ 337000\ \ \ \ \ \ \ \ 17036\ \ \ \ IS
Nauru\ \ \ \ \ \ 11300\ \ \ \ \ \ \ \ \ 182\ \ \ \ \ \ NR
Tuvalu\ \ \ \ \ 11300\ \ \ \ \ \ \ \ \ 38\ \ \ \ \ \ \ TV
Anguilla\ \ \ 11300\ \ \ \ \ \ \ \ \ 311\ \ \ \ \ \ AI

index\ \ \ \ \ \ population\ \ \ \ GDP\ \ \ \ \ alpha\-2
Nauru\ \ \ \ \ \ 11300\ \ \ \ \ \ \ \ \ 182\ \ \ \ \ NR
Tuvalu\ \ \ \ \ 11300\ \ \ \ \ \ \ \ \ 38\ \ \ \ \ \ TV
Anguilla\ \ \ 11300\ \ \ \ \ \ \ \ \ 311\ \ \ \ \ AI
\f[]
.fi
.PP
For example,
.IP
.nf
\f[C]
#\ example\ to\ show\ use\ of\ list\ of\ columns\ with\ nsort

import\ pandas\ as\ pd
import\ frovedis.dataframe\ as\ fdf

#\ To\ order\ by\ the\ largest\ values\ in\ column\ “population”\ and\ then\ “GDP”
pd_df\ =\ pd.DataFrame({\[aq]population\[aq]:\ [59000000,\ 65000000,\ 434000,\ 434000,\ 
\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ 434000,\ 337000,\ 11300,\ 11300,\ 11300],
\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \[aq]GDP\[aq]:\ [1937894,\ 2583560\ ,\ 12011,\ 4520,\ 12128,
\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ 17036,\ 182,\ 38,\ 311],
\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \[aq]alpha\-2\[aq]:\ ["IT",\ "FR",\ "MT",\ "MV",\ "BN",
\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ "IS",\ "NR",\ "TV",\ "AI"]},
\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ index=["Italy",\ "France",\ "Malta",
\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ "Maldives",\ "Brunei",\ "Iceland",
\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ "Nauru",\ "Tuvalu",\ "Anguilla"])
fd_df\ =\ fdf.DataFrame(pd_df)

#\ to\ display\ frovedis\ dataframe
fd_df.show()

fd_df.nsort(3,\ [\[aq]population\[aq],\ \[aq]GDP\[aq]]).show()
\f[]
.fi
.PP
Output
.IP
.nf
\f[C]
index\ \ \ \ \ \ population\ \ \ \ GDP\ \ \ \ \ \ alpha\-2
Italy\ \ \ \ \ \ 59000000\ \ \ \ \ \ 1937894\ \ IT
France\ \ \ \ \ 65000000\ \ \ \ \ \ 2583560\ \ FR
Malta\ \ \ \ \ \ 434000\ \ \ \ \ \ \ \ 12011\ \ \ \ MT
Maldives\ \ \ 434000\ \ \ \ \ \ \ \ 4520\ \ \ \ \ MV
Brunei\ \ \ \ \ 434000\ \ \ \ \ \ \ \ 12128\ \ \ \ BN
Iceland\ \ \ \ 337000\ \ \ \ \ \ \ \ 17036\ \ \ \ IS
Nauru\ \ \ \ \ \ 11300\ \ \ \ \ \ \ \ \ 182\ \ \ \ \ \ NR
Tuvalu\ \ \ \ \ 11300\ \ \ \ \ \ \ \ \ 38\ \ \ \ \ \ \ TV
Anguilla\ \ \ 11300\ \ \ \ \ \ \ \ \ 311\ \ \ \ \ \ AI

index\ \ \ \ \ \ population\ \ \ \ GDP\ \ \ \ \ \ alpha\-2
Tuvalu\ \ \ \ \ 11300\ \ \ \ \ \ \ \ \ 38\ \ \ \ \ \ \ TV
Nauru\ \ \ \ \ \ 11300\ \ \ \ \ \ \ \ \ 182\ \ \ \ \ \ NR
Anguilla\ \ \ 11300\ \ \ \ \ \ \ \ \ 311\ \ \ \ \ \ AI
\f[]
.fi
.PP
\f[B]Return Value\f[]
.PD 0
.P
.PD
It returns a Frovedis DataFrame object with \f[B]n\f[] rows ordered by
the specified columns in ascending or descending order.
.SS 10. nlargest(n, columns, keep = \[aq]first\[aq])
.PP
\f[B]Parameters\f[]
.PD 0
.P
.PD
\f[B]\f[I]n\f[]\f[]: It accepts an integer parameter which represents
the number of rows to return.
.PD 0
.P
.PD
\f[B]\f[I]columns\f[]\f[]: It accepts a string type or list of strings
type parameter which represents the column label(s) to order by.
.PD 0
.P
.PD
\f[B]\f[I]keep\f[]\f[]: It accepts a string object parameter.
This parameter is used when there are duplicate values.
(Default: \[aq]first\[aq])
.PD 0
.P
.PD
1.
\f[B]\[aq]first\[aq]\f[] : it prioritizes the first occurrence(s)
.PD 0
.P
.PD
2.
\f[B]\[aq]last\[aq]\f[] : it prioritizes the last occurrence(s)
.PD 0
.P
.PD
3.
\f[B]\[aq]all\[aq]\f[] : it is used to not drop any duplicates, even
when it means selecting more than \f[B]n\f[] items.
.PP
\f[B]Purpose\f[]
.PD 0
.P
.PD
It is used to return the top \f[B]n\f[] rows ordered by the specified
columns in descending order.
The columns that are not specified are returned as well, but not used
for ordering.
.PP
This method is equivalent to DataFrame.sort_values(columns, ascending =
False).head(n), but it is more efficient.
.PP
For example,
.IP
.nf
\f[C]
#\ example\ to\ use\ nlargest\ with\ default\ parameters\ with\ n\ =\ 3\ and\ columns\ =\ \[aq]population\[aq]

import\ pandas\ as\ pd
import\ frovedis.dataframe\ as\ fdf

#\ In\ the\ following\ example,\ we\ will\ use\ nlargest()\ to\ select\ the\ three\ rows\ having\ the\ largest\ values\ in\ column\ “population”.
pd_df\ =\ pd.DataFrame({\[aq]population\[aq]:\ [59000000,\ 65000000,\ 434000,\ 434000,\ 
\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ 434000,\ 337000,\ 11300,\ 11300,\ 11300],
\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \[aq]GDP\[aq]:\ [1937894,\ 2583560\ ,\ 12011,\ 4520,\ 12128,
\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ 17036,\ 182,\ 38,\ 311],
\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \[aq]alpha\-2\[aq]:\ ["IT",\ "FR",\ "MT",\ "MV",\ "BN",
\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ "IS",\ "NR",\ "TV",\ "AI"]},
\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ index=["Italy",\ "France",\ "Malta",
\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ "Maldives",\ "Brunei",\ "Iceland",
\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ "Nauru",\ "Tuvalu",\ "Anguilla"])
fd_df\ =\ fdf.DataFrame(pd_df)

#\ to\ display\ frovedis\ dataframe
fd_df.show()

#\ to\ display\ n\ largest\ rows\ according\ to\ given\ column
fd_df.nlargest(3,\ \[aq]population\[aq]).show()
\f[]
.fi
.PP
Output
.IP
.nf
\f[C]
index\ \ \ \ \ \ \ \ \ \ \ population\ \ \ \ \ \ GDP\ \ \ \ \ alpha\-2
Italy\ \ \ \ \ \ \ \ \ \ \ 59000000\ \ \ \ \ \ \ \ 1937894\ IT
France\ \ \ \ \ \ \ \ \ \ 65000000\ \ \ \ \ \ \ \ 2583560\ FR
Malta\ \ \ \ \ \ \ \ \ \ \ 434000\ \ \ \ \ \ \ \ \ \ 12011\ \ \ MT
Maldives\ \ \ \ \ \ \ \ 434000\ \ \ \ \ \ \ \ \ \ 4520\ \ \ \ MV
Brunei\ \ \ \ \ \ \ \ \ \ 434000\ \ \ \ \ \ \ \ \ \ 12128\ \ \ BN
Iceland\ \ \ \ \ \ \ \ \ 337000\ \ \ \ \ \ \ \ \ \ 17036\ \ \ IS
Nauru\ \ \ \ \ \ \ \ \ \ \ 11300\ \ \ \ \ \ \ \ \ \ \ 182\ \ \ \ \ NR
Tuvalu\ \ \ \ \ \ \ \ \ \ 11300\ \ \ \ \ \ \ \ \ \ \ 38\ \ \ \ \ \ TV
Anguilla\ \ \ \ \ \ \ \ 11300\ \ \ \ \ \ \ \ \ \ \ 311\ \ \ \ \ AI

index\ \ \ \ \ \ \ \ \ \ \ population\ \ \ \ \ \ GDP\ \ \ \ \ alpha\-2
France\ \ \ \ \ \ \ \ \ \ 65000000\ \ \ \ \ \ \ \ 2583560\ FR
Italy\ \ \ \ \ \ \ \ \ \ \ 59000000\ \ \ \ \ \ \ \ 1937894\ IT
Malta\ \ \ \ \ \ \ \ \ \ \ 434000\ \ \ \ \ \ \ \ \ \ 12011\ \ \ MT
\f[]
.fi
.PP
For example,
.IP
.nf
\f[C]
#\ example\ to\ show\ the\ behavior\ of\ nlargest\ with\ keep\ =\ \[aq]last\[aq]

import\ pandas\ as\ pd
import\ frovedis.dataframe\ as\ fdf

#\ When\ using\ keep=\[aq]last\[aq],\ it\ will\ show\ the\ row\ only\ having\ last\ occurrence\ of\ the\ duplicate\ :
pd_df\ =\ pd.DataFrame({\[aq]population\[aq]:\ [59000000,\ 65000000,\ 434000,\ 434000,\ 
\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ 434000,\ 337000,\ 11300,\ 11300,\ 11300],
\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \[aq]GDP\[aq]:\ [1937894,\ 2583560\ ,\ 12011,\ 4520,\ 12128,
\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ 17036,\ 182,\ 38,\ 311],
\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \[aq]alpha\-2\[aq]:\ ["IT",\ "FR",\ "MT",\ "MV",\ "BN",
\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ "IS",\ "NR",\ "TV",\ "AI"]},
\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ index=["Italy",\ "France",\ "Malta",
\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ "Maldives",\ "Brunei",\ "Iceland",
\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ "Nauru",\ "Tuvalu",\ "Anguilla"])
fd_df\ =\ fdf.DataFrame(pd_df)

#\ to\ display\ frovedis\ dataframe
fd_df.show()

fd_df.nlargest(3,\ \[aq]population\[aq],\ keep=\[aq]last\[aq]).show()
\f[]
.fi
.PP
Output
.IP
.nf
\f[C]
index\ \ \ \ \ \ \ \ \ \ \ population\ \ \ \ \ \ GDP\ \ \ \ \ alpha\-2
Italy\ \ \ \ \ \ \ \ \ \ \ 59000000\ \ \ \ \ \ \ \ 1937894\ IT
France\ \ \ \ \ \ \ \ \ \ 65000000\ \ \ \ \ \ \ \ 2583560\ FR
Malta\ \ \ \ \ \ \ \ \ \ \ 434000\ \ \ \ \ \ \ \ \ \ 12011\ \ \ MT
Maldives\ \ \ \ \ \ \ \ 434000\ \ \ \ \ \ \ \ \ \ 4520\ \ \ \ MV
Brunei\ \ \ \ \ \ \ \ \ \ 434000\ \ \ \ \ \ \ \ \ \ 12128\ \ \ BN
Iceland\ \ \ \ \ \ \ \ \ 337000\ \ \ \ \ \ \ \ \ \ 17036\ \ \ IS
Nauru\ \ \ \ \ \ \ \ \ \ \ 11300\ \ \ \ \ \ \ \ \ \ \ 182\ \ \ \ \ NR
Tuvalu\ \ \ \ \ \ \ \ \ \ 11300\ \ \ \ \ \ \ \ \ \ \ 38\ \ \ \ \ \ TV
Anguilla\ \ \ \ \ \ \ \ 11300\ \ \ \ \ \ \ \ \ \ \ 311\ \ \ \ \ AI

index\ \ \ \ \ \ \ \ \ \ \ population\ \ \ \ \ \ GDP\ \ \ \ \ alpha\-2
France\ \ \ \ \ \ \ \ \ \ 65000000\ \ \ \ \ \ \ \ 2583560\ FR
Italy\ \ \ \ \ \ \ \ \ \ \ 59000000\ \ \ \ \ \ \ \ 1937894\ IT
Brunei\ \ \-\ \ \ \ \ \ \ 434000\ \ \ \ \ \ \ \ \ \ 12128\ \ \ BN
\f[]
.fi
.PP
For example,
.IP
.nf
\f[C]
#\ example\ to\ show\ the\ behavior\ of\ nlargest\ with\ keep\ =\ \[aq]all\[aq]

import\ pandas\ as\ pd
import\ frovedis.dataframe\ as\ fdf

#\ When\ using\ keep=\[aq]all\[aq],\ all\ duplicate\ items\ are\ maintained:
pd_df\ =\ pd.DataFrame({\[aq]population\[aq]:\ [59000000,\ 65000000,\ 434000,\ 434000,\ 
\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ 434000,\ 337000,\ 11300,\ 11300,\ 11300],
\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \[aq]GDP\[aq]:\ [1937894,\ 2583560\ ,\ 12011,\ 4520,\ 12128,
\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ 17036,\ 182,\ 38,\ 311],
\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \[aq]alpha\-2\[aq]:\ ["IT",\ "FR",\ "MT",\ "MV",\ "BN",
\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ "IS",\ "NR",\ "TV",\ "AI"]},
\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ index=["Italy",\ "France",\ "Malta",
\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ "Maldives",\ "Brunei",\ "Iceland",
\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ "Nauru",\ "Tuvalu",\ "Anguilla"])
fd_df\ =\ fdf.DataFrame(pd_df)

#\ to\ display\ frovedis\ dataframe
fd_df.show()

fdf.nlargest(3,\ \[aq]population\[aq],\ keep=\[aq]all\[aq]).show()
\f[]
.fi
.PP
Output
.IP
.nf
\f[C]
index\ \ \ \ \ \ \ \ \ \ \ population\ \ \ \ \ \ GDP\ \ \ \ \ alpha\-2
Italy\ \ \ \ \ \ \ \ \ \ \ 59000000\ \ \ \ \ \ \ \ 1937894\ IT
France\ \ \ \ \ \ \ \ \ \ 65000000\ \ \ \ \ \ \ \ 2583560\ FR
Malta\ \ \ \ \ \ \ \ \ \ \ 434000\ \ \ \ \ \ \ \ \ \ 12011\ \ \ MT
Maldives\ \ \ \ \ \ \ \ 434000\ \ \ \ \ \ \ \ \ \ 4520\ \ \ \ MV
Brunei\ \ \ \ \ \ \ \ \ \ 434000\ \ \ \ \ \ \ \ \ \ 12128\ \ \ BN
Iceland\ \ \ \ \ \ \ \ \ 337000\ \ \ \ \ \ \ \ \ \ 17036\ \ \ IS
Nauru\ \ \ \ \ \ \ \ \ \ \ 11300\ \ \ \ \ \ \ \ \ \ \ 182\ \ \ \ \ NR
Tuvalu\ \ \ \ \ \ \ \ \ \ 11300\ \ \ \ \ \ \ \ \ \ \ 38\ \ \ \ \ \ TV
Anguilla\ \ \ \ \ \ \ \ 11300\ \ \ \ \ \ \ \ \ \ \ 311\ \ \ \ \ AI

index\ \ \ \ \ \ \ \ \ \ \ population\ \ \ \ \ \ GDP\ \ \ \ \ alpha\-2
France\ \ \ \ \ \ \ \ \ \ 65000000\ \ \ \ \ \ \ \ 2583560\ FR
Italy\ \ \ \ \ \ \ \ \ \ \ 59000000\ \ \ \ \ \ \ \ 1937894\ IT
Malta\ \ \ \ \ \ \ \ \ \ \ 434000\ \ \ \ \ \ \ \ \ \ 12011\ \ \ MT
Maldives\ \ \ \ \ \ \ \ 434000\ \ \ \ \ \ \ \ \ \ 4520\ \ \ \ MV
Brunei\ \ \ \ \ \ \ \ \ \ 434000\ \ \ \ \ \ \ \ \ \ 12128\ \ \ BN
\f[]
.fi
.PP
For example,
.IP
.nf
\f[C]
#\ example\ to\ show\ use\ of\ list\ of\ columns\ with\ nlargest

import\ pandas\ as\ pd
import\ frovedis.dataframe\ as\ fdf

#\ To\ order\ by\ the\ largest\ values\ in\ column\ “population”\ and\ then\ “GDP”
pd_df\ =\ pd.DataFrame({\[aq]population\[aq]:\ [59000000,\ 65000000,\ 434000,\ 434000,\ 
\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ 434000,\ 337000,\ 11300,\ 11300,\ 11300],
\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \[aq]GDP\[aq]:\ [1937894,\ 2583560\ ,\ 12011,\ 4520,\ 12128,
\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ 17036,\ 182,\ 38,\ 311],
\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \[aq]alpha\-2\[aq]:\ ["IT",\ "FR",\ "MT",\ "MV",\ "BN",
\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ "IS",\ "NR",\ "TV",\ "AI"]},
\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ index=["Italy",\ "France",\ "Malta",
\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ "Maldives",\ "Brunei",\ "Iceland",
\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ "Nauru",\ "Tuvalu",\ "Anguilla"])
fd_df\ =\ fdf.DataFrame(pd_df)

#\ to\ display\ frovedis\ dataframe
fd_df.show()

fd_df.nlargest(3,\ [\[aq]population\[aq],\ \[aq]GDP\[aq]]).show()
\f[]
.fi
.PP
Output
.IP
.nf
\f[C]
index\ \ \ \ \ \ \ \ \ \ \ population\ \ \ \ \ \ GDP\ \ \ \ \ alpha\-2
Italy\ \ \ \ \ \ \ \ \ \ \ 59000000\ \ \ \ \ \ \ \ 1937894\ IT
France\ \ \ \ \ \ \ \ \ \ 65000000\ \ \ \ \ \ \ \ 2583560\ FR
Malta\ \ \ \ \ \ \ \ \ \ \ 434000\ \ \ \ \ \ \ \ \ \ 12011\ \ \ MT
Maldives\ \ \ \ \ \ \ \ 434000\ \ \ \ \ \ \ \ \ \ 4520\ \ \ \ MV
Brunei\ \ \ \ \ \ \ \ \ \ 434000\ \ \ \ \ \ \ \ \ \ 12128\ \ \ BN
Iceland\ \ \ \ \ \ \ \ \ 337000\ \ \ \ \ \ \ \ \ \ 17036\ \ \ IS
Nauru\ \ \ \ \ \ \ \ \ \ \ 11300\ \ \ \ \ \ \ \ \ \ \ 182\ \ \ \ \ NR
Tuvalu\ \ \ \ \ \ \ \ \ \ 11300\ \ \ \ \ \ \ \ \ \ \ 38\ \ \ \ \ \ TV
Anguilla\ \ \ \ \ \ \ \ 11300\ \ \ \ \ \ \ \ \ \ \ 311\ \ \ \ \ AI

index\ \ \ \ \ \ \ \ \ \ \ population\ \ \ \ \ \ GDP\ \ \ \ \ alpha\-2
France\ \ \ \ \ \ \ \ \ \ 65000000\ \ \ \ \ \ \ \ 2583560\ FR
Italy\ \ \ \ \ \ \ \ \ \ \ 59000000\ \ \ \ \ \ \ \ 1937894\ IT
Brunei\ \ \ \ \ \ \ \ \ \ 434000\ \ \ \ \ \ \ \ \ \ 12128\ \ \ BN
\f[]
.fi
.PP
\f[B]Return Value\f[]
.PD 0
.P
.PD
It returns a Frovedis DataFrame object with \f[B]n\f[] rows ordered by
the specified columns in descending order.
.SS 11. nsmallest(n, columns, keep = \[aq]first\[aq])
.PP
\f[B]Parameters\f[]
.PD 0
.P
.PD
\f[B]\f[I]n\f[]\f[]: It accepts an integer type argument that represents
the number of rows to return.
.PD 0
.P
.PD
\f[B]\f[I]columns\f[]\f[]: It accepts a string type or list of strings
type parameter which represents the column label(s) to order by.
.PD 0
.P
.PD
\f[B]\f[I]keep\f[]\f[]: It accepts a string object parameter.
This parameter is used when there are duplicate values.
(Default: \[aq]first\[aq])
.PD 0
.P
.PD
1.
\f[B]\[aq]first\[aq]\f[] : it prioritizes the first occurrence(s).
.PD 0
.P
.PD
2.
\f[B]\[aq]last\[aq]\f[] : it prioritizes the last last occurrence(s).
.PD 0
.P
.PD
3.
\f[B]\[aq]all\[aq]\f[] : it is used to not drop any duplicates, even it
means selecting more than \f[B]n\f[] items.
.PP
\f[B]Purpose\f[]
.PD 0
.P
.PD
It is used to return the top \f[B]n\f[] rows ordered by the specified
columns in ascending order.
.PP
It returns the first n rows with the smallest values in columns, in
ascending order.
The columns that are not specified are returned as well, but not used
for ordering.
.PP
This method is equivalent to DataFrame.sort_values(columns,
ascending=True).head(n), but it is more efficient.
.PP
For example
.IP
.nf
\f[C]
#\ example\ to\ use\ nsmallest\ with\ default\ values\ on\ columns\ =\ \[aq]population\[aq]

import\ pandas\ as\ pd
import\ frovedis.dataframe\ as\ fdf

#\ to\ display\ n\ smallest\ rows\ according\ to\ given\ column
pd_df\ =\ pd.DataFrame({\[aq]population\[aq]:\ [59000000,\ 65000000,\ 434000,
\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ 434000,\ 434000,\ 337000,\ 11300,
\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ 11300,\ 11300],
\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \[aq]GDP\[aq]:\ [1937894,\ 2583560\ ,\ 12011,\ 4520,\ 12128,
\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ 17036,\ 182,\ 38,\ 311],
\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \[aq]alpha\-2\[aq]:\ ["IT",\ "FR",\ "MT",\ "MV",\ "BN",
\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ "IS",\ "NR",\ "TV",\ "AI"]},
\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ index=["Italy",\ "France",\ "Malta",
\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ "Maldives",\ "Brunei",\ "Iceland",
\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ "Nauru",\ "Tuvalu",\ "Anguilla"])
fd_df\ =\ fdf.DataFrame(pd_df)
#\ to\ display\ frovedis\ dataframe
fd_df.show()

fd_df.nsmallest(3,\ \[aq]population\[aq]).show()
\f[]
.fi
.PP
Output
.IP
.nf
\f[C]
index\ \ \ \ \ \ \ \ \ \ \ population\ \ \ \ \ \ GDP\ \ \ \ \ alpha\-2
Italy\ \ \ \ \ \ \ \ \ \ \ 59000000\ \ \ \ \ \ \ \ 1937894\ IT
France\ \ \ \ \ \ \ \ \ \ 65000000\ \ \ \ \ \ \ \ 2583560\ FR
Malta\ \ \ \ \ \ \ \ \ \ \ 434000\ \ \ \ \ \ \ \ \ \ 12011\ \ \ MT
Maldives\ \ \ \ \ \ \ \ 434000\ \ \ \ \ \ \ \ \ \ 4520\ \ \ \ MV
Brunei\ \ \ \ \ \ \ \ \ \ 434000\ \ \ \ \ \ \ \ \ \ 12128\ \ \ BN
Iceland\ \ \ \ \ \ \ \ \ 337000\ \ \ \ \ \ \ \ \ \ 17036\ \ \ IS
Nauru\ \ \ \ \ \ \ \ \ \ \ 11300\ \ \ \ \ \ \ \ \ \ \ 182\ \ \ \ \ NR
Tuvalu\ \ \ \ \ \ \ \ \ \ 11300\ \ \ \ \ \ \ \ \ \ \ 38\ \ \ \ \ \ TV
Anguilla\ \ \ \ \ \ \ \ 11300\ \ \ \ \ \ \ \ \ \ \ 311\ \ \ \ \ AI

index\ \ \ \ \ \ \ \ \ \ \ population\ \ \ \ \ \ GDP\ \ \ \ \ alpha\-2
Nauru\ \ \ \ \ \ \ \ \ \ \ 11300\ \ \ \ \ \ \ \ \ \ \ 182\ \ \ \ \ NR
Tuvalu\ \ \ \ \ \ \ \ \ \ 11300\ \ \ \ \ \ \ \ \ \ \ 38\ \ \ \ \ \ TV
Anguilla\ \ \ \ \ \ \ \ 11300\ \ \ \ \ \ \ \ \ \ \ 311\ \ \ \ \ AI
\f[]
.fi
.PP
For example,
.IP
.nf
\f[C]
#\ example\ to\ use\ nsmallest\ with\ keep\ =\ \[aq]last\[aq]\ parameter

import\ pandas\ as\ pd
import\ frovedis.dataframe\ as\ fdf

#\ When\ using\ keep=\[aq]last\[aq],\ duplicates\ are\ resolved\ in\ reverse\ order:
pd_df\ =\ pd.DataFrame({\[aq]population\[aq]:\ [59000000,\ 65000000,\ 434000,
\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ 434000,\ 434000,\ 337000,\ 11300,
\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ 11300,\ 11300],
\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \[aq]GDP\[aq]:\ [1937894,\ 2583560\ ,\ 12011,\ 4520,\ 12128,
\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ 17036,\ 182,\ 38,\ 311],
\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \[aq]alpha\-2\[aq]:\ ["IT",\ "FR",\ "MT",\ "MV",\ "BN",
\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ "IS",\ "NR",\ "TV",\ "AI"]},
\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ index=["Italy",\ "France",\ "Malta",
\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ "Maldives",\ "Brunei",\ "Iceland",
\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ "Nauru",\ "Tuvalu",\ "Anguilla"])
fd_df\ =\ fdf.DataFrame(pd_df)
#\ to\ display\ frovedis\ dataframe
fd_df.show()

fd_df.nsmallest(3,\ \[aq]population\[aq],\ keep=\[aq]last\[aq]).show()
\f[]
.fi
.PP
Output
.IP
.nf
\f[C]
index\ \ \ \ \ \ \ \ \ \ \ population\ \ \ \ \ \ GDP\ \ \ \ \ alpha\-2
Italy\ \ \ \ \ \ \ \ \ \ \ 59000000\ \ \ \ \ \ \ \ 1937894\ IT
France\ \ \ \ \ \ \ \ \ \ 65000000\ \ \ \ \ \ \ \ 2583560\ FR
Malta\ \ \ \ \ \ \ \ \ \ \ 434000\ \ \ \ \ \ \ \ \ \ 12011\ \ \ MT
Maldives\ \ \ \ \ \ \ \ 434000\ \ \ \ \ \ \ \ \ \ 4520\ \ \ \ MV
Brunei\ \ \ \ \ \ \ \ \ \ 434000\ \ \ \ \ \ \ \ \ \ 12128\ \ \ BN
Iceland\ \ \ \ \ \ \ \ \ 337000\ \ \ \ \ \ \ \ \ \ 17036\ \ \ IS
Nauru\ \ \ \ \ \ \ \ \ \ \ 11300\ \ \ \ \ \ \ \ \ \ \ 182\ \ \ \ \ NR
Tuvalu\ \ \ \ \ \ \ \ \ \ 11300\ \ \ \ \ \ \ \ \ \ \ 38\ \ \ \ \ \ TV
Anguilla\ \ \ \ \ \ \ \ 11300\ \ \ \ \ \ \ \ \ \ \ 311\ \ \ \ \ AI

index\ \ \ \ \ \ \ \ \ \ \ population\ \ \ \ \ \ GDP\ \ \ \ \ alpha\-2
Anguilla\ \ \ \ \ \ \ \ 11300\ \ \ \ \ \ \ \ \ \ \ 311\ \ \ \ \ AI
Tuvalu\ \ \ \ \ \ \ \ \ \ 11300\ \ \ \ \ \ \ \ \ \ \ 38\ \ \ \ \ \ TV
Nauru\ \ \ \ \ \ \ \ \ \ \ 11300\ \ \ \ \ \ \ \ \ \ \ 182\ \ \ \ \ NR
\f[]
.fi
.PP
For example
.IP
.nf
\f[C]
#\ example\ to\ use\ nsmallest\ with\ keep\ =\ \[aq]all\[aq]\ parameter

import\ pandas\ as\ pd
import\ frovedis.dataframe\ as\ fdf

#\ When\ using\ keep=\[aq]all\[aq],\ all\ duplicate\ items\ are\ maintained:
pd_df\ =\ pd.DataFrame({\[aq]population\[aq]:\ [59000000,\ 65000000,\ 434000,
\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ 434000,\ 434000,\ 337000,\ 11300,
\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ 11300,\ 11300],
\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \[aq]GDP\[aq]:\ [1937894,\ 2583560\ ,\ 12011,\ 4520,\ 12128,
\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ 17036,\ 182,\ 38,\ 311],
\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \[aq]alpha\-2\[aq]:\ ["IT",\ "FR",\ "MT",\ "MV",\ "BN",
\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ "IS",\ "NR",\ "TV",\ "AI"]},
\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ index=["Italy",\ "France",\ "Malta",
\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ "Maldives",\ "Brunei",\ "Iceland",
\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ "Nauru",\ "Tuvalu",\ "Anguilla"])
fd_df\ =\ fdf.DataFrame(pd_df)

#\ to\ display\ frovedis\ dataframe
fd_df.show()

fd_df.nsmallest(3,\ \[aq]population\[aq],\ keep=\[aq]all\[aq]).show()
\f[]
.fi
.PP
Output
.IP
.nf
\f[C]
index\ \ \ \ \ \ \ \ \ \ \ population\ \ \ \ \ \ GDP\ \ \ \ \ alpha\-2
Italy\ \ \ \ \ \ \ \ \ \ \ 59000000\ \ \ \ \ \ \ \ 1937894\ IT
France\ \ \ \ \ \ \ \ \ \ 65000000\ \ \ \ \ \ \ \ 2583560\ FR
Malta\ \ \ \ \ \ \ \ \ \ \ 434000\ \ \ \ \ \ \ \ \ \ 12011\ \ \ MT
Maldives\ \ \ \ \ \ \ \ 434000\ \ \ \ \ \ \ \ \ \ 4520\ \ \ \ MV
Brunei\ \ \ \ \ \ \ \ \ \ 434000\ \ \ \ \ \ \ \ \ \ 12128\ \ \ BN
Iceland\ \ \ \ \ \ \ \ \ 337000\ \ \ \ \ \ \ \ \ \ 17036\ \ \ IS
Nauru\ \ \ \ \ \ \ \ \ \ \ 11300\ \ \ \ \ \ \ \ \ \ \ 182\ \ \ \ \ NR
Tuvalu\ \ \ \ \ \ \ \ \ \ 11300\ \ \ \ \ \ \ \ \ \ \ 38\ \ \ \ \ \ TV
Anguilla\ \ \ \ \ \ \ \ 11300\ \ \ \ \ \ \ \ \ \ \ 311\ \ \ \ \ AI

index\ \ \ \ \ \ \ \ \ \ \ population\ \ \ \ \ \ GDP\ \ \ \ \ alpha\-2
Nauru\ \ \ \ \ \ \ \ \ \ \ 11300\ \ \ \ \ \ \ \ \ \ \ 182\ \ \ \ \ NR
Tuvalu\ \ \ \ \ \ \ \ \ \ 11300\ \ \ \ \ \ \ \ \ \ \ 38\ \ \ \ \ \ TV
Anguilla\ \ \ \ \ \ \ \ 11300\ \ \ \ \ \ \ \ \ \ \ 311\ \ \ \ \ AI
\f[]
.fi
.PP
For example,
.IP
.nf
\f[C]
#\ example\ to\ use\ nsmallest\ on\ a\ list\ of\ columns\ names

import\ pandas\ as\ pd
import\ frovedis.dataframe\ as\ fdf

#\ To\ order\ by\ the\ smallest\ values\ in\ column\ “population”\ and\ then\ “GDP”,\ we\ can\ specify\ multiple\ columns\ like\ in\ the\ next\ example.
pd_df\ =\ pd.DataFrame({\[aq]population\[aq]:\ [59000000,\ 65000000,\ 434000,
\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ 434000,\ 434000,\ 337000,\ 11300,
\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ 11300,\ 11300],
\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \[aq]GDP\[aq]:\ [1937894,\ 2583560\ ,\ 12011,\ 4520,\ 12128,
\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ 17036,\ 182,\ 38,\ 311],
\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \[aq]alpha\-2\[aq]:\ ["IT",\ "FR",\ "MT",\ "MV",\ "BN",
\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ "IS",\ "NR",\ "TV",\ "AI"]},
\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ index=["Italy",\ "France",\ "Malta",
\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ "Maldives",\ "Brunei",\ "Iceland",
\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ "Nauru",\ "Tuvalu",\ "Anguilla"])
fd_df\ =\ fdf.DataFrame(pd_df)

#\ to\ display\ frovedis\ dataframe
fd_df.show()

#\ display\ smallest\ 3\ row\ from\ population\ and\ then\ GDP\ columns
fd_df.nsmallest(3,\ [\[aq]population\[aq],\ \[aq]GDP\[aq]])
\f[]
.fi
.PP
Output
.IP
.nf
\f[C]
index\ \ \ \ \ \ \ \ \ \ \ population\ \ \ \ \ \ GDP\ \ \ \ \ alpha\-2
Italy\ \ \ \ \ \ \ \ \ \ \ 59000000\ \ \ \ \ \ \ \ 1937894\ IT
France\ \ \ \ \ \ \ \ \ \ 65000000\ \ \ \ \ \ \ \ 2583560\ FR
Malta\ \ \ \ \ \ \ \ \ \ \ 434000\ \ \ \ \ \ \ \ \ \ 12011\ \ \ MT
Maldives\ \ \ \ \ \ \ \ 434000\ \ \ \ \ \ \ \ \ \ 4520\ \ \ \ MV
Brunei\ \ \ \ \ \ \ \ \ \ 434000\ \ \ \ \ \ \ \ \ \ 12128\ \ \ BN
Iceland\ \ \ \ \ \ \ \ \ 337000\ \ \ \ \ \ \ \ \ \ 17036\ \ \ IS
Nauru\ \ \ \ \ \ \ \ \ \ \ 11300\ \ \ \ \ \ \ \ \ \ \ 182\ \ \ \ \ NR
Tuvalu\ \ \ \ \ \ \ \ \ \ 11300\ \ \ \ \ \ \ \ \ \ \ 38\ \ \ \ \ \ TV
Anguilla\ \ \ \ \ \ \ \ 11300\ \ \ \ \ \ \ \ \ \ \ 311\ \ \ \ \ AI

index\ \ \ \ \ \ \ \ \ \ \ population\ \ \ \ \ \ GDP\ \ \ \ \ alpha\-2
Tuvalu\ \ \ \ \ \ \ \ \ \ 11300\ \ \ \ \ \ \ \ \ \ \ 38\ \ \ \ \ \ TV
Nauru\ \ \ \ \ \ \ \ \ \ \ 11300\ \ \ \ \ \ \ \ \ \ \ 182\ \ \ \ \ NR
Anguilla\ \ \ \ \ \ \ \ 11300\ \ \ \ \ \ \ \ \ \ \ 311\ \ \ \ \ AI
\f[]
.fi
.PP
\f[B]Return Value\f[]
.PD 0
.P
.PD
It returns a Frovedis DataFrame object with \f[B]n\f[] rows ordered by
the specified columns in ascending order.
.SS 12. sort(columns = None, axis = 0, ascending = True, inplace =
False, kind = \[aq]radixsort\[aq], na_position = \[aq]last\[aq],
**kwargs)
.PP
\f[B]Parameters\f[]
.PD 0
.P
.PD
\f[B]\f[I]columns\f[]\f[]: It accepts the name or list of names on which
sorting will be applied.
(Default: None)
.PD 0
.P
.PD
If axis is 0 or \[aq]index\[aq] then this parameter should contain index
levels and/or column labels.
Currently axis = 0 or \[aq]index\[aq] is only supported in Frovedis
DataFrame.
.PD 0
.P
.PD
When it is None (not specified explicitly), it will not perform sorting
and it will raise an exception.
.PD 0
.P
.PD
\f[B]\f[I]axis\f[]\f[]: It accepts an integer or a string object as
parameter.To perform sorting along rows or columns is selected by this
parameter.
(Default: 0)
.PD 0
.P
.PD
If axis is 0 or \[aq]index\[aq], sorting is performed along the row.
Currently axis = 0 or \[aq]index\[aq] is only supported in Frovedis
DataFrame.
.PD 0
.P
.PD
\f[B]\f[I]ascending\f[]\f[]: It accepts a boolean value or a list of
booleans as parameter.
The order of sorting is decided by this parameter.
Need to specify a list of booleans for multiple sort orders.
If this is a list of booleans, then it must match the length of the
\[aq]columns\[aq] parameter.
By default, the order of sorting will be ascending and to change the
order to descending, explicitly pass it as False.
(Default: True)
.PD 0
.P
.PD
\f[B]\f[I]inplace\f[]\f[]: It accepts a boolean value as parameter.
When it is explicitly set to True, it modifies the original object
directly instead of creating a copy of DataFrame object.
(Default: False)
.PP
\f[B]NOTE: Currently, \[aq]inplace\[aq] = True is not supported by this
Frovedis DataFrame method.\f[]
.PP
\f[B]\f[I]kind\f[]\f[]: It accepts a string object as parameter to
select the type of sorting algorithm.
(Default: ‘radixsort')
.PP
\f[B]NOTE: Currently Frovedis supports only \[aq]radixsort\[aq] and
other \[aq]kind\[aq] parameters will be ignored internally with a
warning.\f[]
.PP
\f[B]\f[I]na_position\f[]\f[]: It accepts a string object as parameter.
It decides the position of NaNs after sorting.
When it is set to \[aq]last\[aq], it puts NaNs at the end.
Currently, Frovedis only supports \[aq]na_position\[aq] =
\[aq]last\[aq].
(Default: ‘last')
.PD 0
.P
.PD
\f[B]**\f[I]kwargs\f[]\f[]: It accepts a dictionary object as parameter.
It is used to pass all the other parameters at once in the form of a
dictionary object.
Currently this is not supported.
.PP
\f[B]Purpose\f[]
.PD 0
.P
.PD
It is used to sort the values in the specified column(s) along axis = 0
or axis = \[aq]index\[aq] in the Frovedis DataFrame.
.PP
For example,
.IP
.nf
\f[C]
#\ example\ to\ sort\ a\ column\ with\ other\ default\ parameters

import\ pandas\ as\ pd
import\ frovedis.dataframe\ as\ fdf

pd_df\ =\ pd.DataFrame({
\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \[aq]col1\[aq]:\ [\[aq]A\[aq],\ \[aq]A\[aq],\ \[aq]B\[aq],\ np.nan,\ \[aq]D\[aq],\ \[aq]C\[aq]],
\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \[aq]col2\[aq]:\ [2,\ 1,\ 9,\ 8,\ 7,\ 4],
\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \[aq]col3\[aq]:\ [0,\ 1,\ 9,\ 4,\ 2,\ 3],
\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \[aq]col4\[aq]:\ [\[aq]a\[aq],\ \[aq]B\[aq],\ \[aq]c\[aq],\ \[aq]D\[aq],\ \[aq]e\[aq],\ \[aq]F\[aq]]\ })
#\ create\ a\ frovedis\ dataframe\ from\ pandas\ dataframe
fd_df\ =\ fdf.DataFrame(pd_df)

#\ display\ frovedis\ dataframe
fd_df.show()

#\ Sort\ by\ \[aq]col1\[aq]\ and\ display
fd_df.sort(\[aq]col1\[aq]).show()
\f[]
.fi
.PP
Output
.IP
.nf
\f[C]
index\ \ \ col1\ \ \ \ col2\ \ \ \ col3\ \ \ \ col4
0\ \ \ \ \ \ \ A\ \ \ \ \ \ \ 2\ \ \ \ \ \ \ 0\ \ \ \ \ \ \ a
1\ \ \ \ \ \ \ A\ \ \ \ \ \ \ 1\ \ \ \ \ \ \ 1\ \ \ \ \ \ \ B
2\ \ \ \ \ \ \ B\ \ \ \ \ \ \ 9\ \ \ \ \ \ \ 9\ \ \ \ \ \ \ c
3\ \ \ \ \ \ \ NULL\ \ \ \ 8\ \ \ \ \ \ \ 4\ \ \ \ \ \ \ D
4\ \ \ \ \ \ \ D\ \ \ \ \ \ \ 7\ \ \ \ \ \ \ 2\ \ \ \ \ \ \ e
5\ \ \ \ \ \ \ C\ \ \ \ \ \ \ 4\ \ \ \ \ \ \ 3\ \ \ \ \ \ \ F

index\ \ \ col1\ \ \ \ col2\ \ \ \ col3\ \ \ \ col4
0\ \ \ \ \ \ \ A\ \ \ \ \ \ \ 2\ \ \ \ \ \ \ 0\ \ \ \ \ \ \ a
1\ \ \ \ \ \ \ A\ \ \ \ \ \ \ 1\ \ \ \ \ \ \ 1\ \ \ \ \ \ \ B
2\ \ \ \ \ \ \ B\ \ \ \ \ \ \ 9\ \ \ \ \ \ \ 9\ \ \ \ \ \ \ c
5\ \ \ \ \ \ \ C\ \ \ \ \ \ \ 4\ \ \ \ \ \ \ 3\ \ \ \ \ \ \ F
4\ \ \ \ \ \ \ D\ \ \ \ \ \ \ 7\ \ \ \ \ \ \ 2\ \ \ \ \ \ \ e
3\ \ \ \ \ \ \ NULL\ \ \ \ 8\ \ \ \ \ \ \ 4\ \ \ \ \ \ \ D
\f[]
.fi
.PP
For example,
.IP
.nf
\f[C]
#\ example\ to\ sort\ a\ list\ of\ columns

import\ pandas\ as\ pd
import\ frovedis.dataframe\ as\ fdf

pd_df\ =\ pd.DataFrame({
\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \[aq]col1\[aq]:\ [\[aq]A\[aq],\ \[aq]A\[aq],\ \[aq]B\[aq],\ np.nan,\ \[aq]D\[aq],\ \[aq]C\[aq]],
\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \[aq]col2\[aq]:\ [2,\ 1,\ 9,\ 8,\ 7,\ 4],
\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \[aq]col3\[aq]:\ [0,\ 1,\ 9,\ 4,\ 2,\ 3],
\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \[aq]col4\[aq]:\ [\[aq]a\[aq],\ \[aq]B\[aq],\ \[aq]c\[aq],\ \[aq]D\[aq],\ \[aq]e\[aq],\ \[aq]F\[aq]]\ })
#\ create\ a\ frovedis\ dataframe\ from\ pandas\ dataframe
fd_df\ =\ fdf.DataFrame(pd_df)

#\ display\ frovedis\ dataframe
fd_df.show()\ \ \ \ 

#\ Sort\ by\ multiple\ columns\ and\ display
fd_df.sort([\[aq]col1\[aq],\ \[aq]col2\[aq]]).show()
\f[]
.fi
.PP
Output
.IP
.nf
\f[C]
index\ \ \ col1\ \ \ \ col2\ \ \ \ col3\ \ \ \ col4
0\ \ \ \ \ \ \ A\ \ \ \ \ \ \ 2\ \ \ \ \ \ \ 0\ \ \ \ \ \ \ a
1\ \ \ \ \ \ \ A\ \ \ \ \ \ \ 1\ \ \ \ \ \ \ 1\ \ \ \ \ \ \ B
2\ \ \ \ \ \ \ B\ \ \ \ \ \ \ 9\ \ \ \ \ \ \ 9\ \ \ \ \ \ \ c
3\ \ \ \ \ \ \ NULL\ \ \ \ 8\ \ \ \ \ \ \ 4\ \ \ \ \ \ \ D
4\ \ \ \ \ \ \ D\ \ \ \ \ \ \ 7\ \ \ \ \ \ \ 2\ \ \ \ \ \ \ e
5\ \ \ \ \ \ \ C\ \ \ \ \ \ \ 4\ \ \ \ \ \ \ 3\ \ \ \ \ \ \ F

index\ \ \ col1\ \ \ \ col2\ \ \ \ col3\ \ \ \ col4
1\ \ \ \ \ \ \ A\ \ \ \ \ \ \ 1\ \ \ \ \ \ \ 1\ \ \ \ \ \ \ B
0\ \ \ \ \ \ \ A\ \ \ \ \ \ \ 2\ \ \ \ \ \ \ 0\ \ \ \ \ \ \ a
2\ \ \ \ \ \ \ B\ \ \ \ \ \ \ 9\ \ \ \ \ \ \ 9\ \ \ \ \ \ \ c
5\ \ \ \ \ \ \ C\ \ \ \ \ \ \ 4\ \ \ \ \ \ \ 3\ \ \ \ \ \ \ F
4\ \ \ \ \ \ \ D\ \ \ \ \ \ \ 7\ \ \ \ \ \ \ 2\ \ \ \ \ \ \ e
3\ \ \ \ \ \ \ NULL\ \ \ \ 8\ \ \ \ \ \ \ 4\ \ \ \ \ \ \ D
\f[]
.fi
.PP
NOTE: In the above example, in case of multiple columns sorting,
\[aq]col1\[aq] will be sorted first and the \[aq]col2\[aq] will only be
considered for sorting in case of duplicate entries present in
\[aq]col1\[aq].
.PP
For example,
.IP
.nf
\f[C]
#\ example\ to\ sort\ in\ descending\ order

import\ pandas\ as\ pd
import\ frovedis.dataframe\ as\ fdf

pd_df\ =\ pd.DataFrame({
\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \[aq]col1\[aq]:\ [\[aq]A\[aq],\ \[aq]A\[aq],\ \[aq]B\[aq],\ np.nan,\ \[aq]D\[aq],\ \[aq]C\[aq]],
\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \[aq]col2\[aq]:\ [2,\ 1,\ 9,\ 8,\ 7,\ 4],
\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \[aq]col3\[aq]:\ [0,\ 1,\ 9,\ 4,\ 2,\ 3],
\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \[aq]col4\[aq]:\ [\[aq]a\[aq],\ \[aq]B\[aq],\ \[aq]c\[aq],\ \[aq]D\[aq],\ \[aq]e\[aq],\ \[aq]F\[aq]]\ })
#\ create\ a\ frovedis\ dataframe\ from\ pandas\ dataframe
fd_df\ =\ fdf.DataFrame(pd_df)

#\ display\ frovedis\ dataframe
fd_df.show()

#\ Sort\ in\ descending\ order\ and\ display
fd_df.sort(\[aq]col1\[aq],\ ascending\ =\ False).show()
\f[]
.fi
.PP
Output
.IP
.nf
\f[C]
index\ \ \ col1\ \ \ \ col2\ \ \ \ col3\ \ \ \ col4
0\ \ \ \ \ \ \ A\ \ \ \ \ \ \ 2\ \ \ \ \ \ \ 0\ \ \ \ \ \ \ a
1\ \ \ \ \ \ \ A\ \ \ \ \ \ \ 1\ \ \ \ \ \ \ 1\ \ \ \ \ \ \ B
2\ \ \ \ \ \ \ B\ \ \ \ \ \ \ 9\ \ \ \ \ \ \ 9\ \ \ \ \ \ \ c
3\ \ \ \ \ \ \ NULL\ \ \ \ 8\ \ \ \ \ \ \ 4\ \ \ \ \ \ \ D
4\ \ \ \ \ \ \ D\ \ \ \ \ \ \ 7\ \ \ \ \ \ \ 2\ \ \ \ \ \ \ e
5\ \ \ \ \ \ \ C\ \ \ \ \ \ \ 4\ \ \ \ \ \ \ 3\ \ \ \ \ \ \ F

index\ \ \ col1\ \ \ \ col2\ \ \ \ col3\ \ \ \ col4
3\ \ \ \ \ \ \ NULL\ \ \ \ 8\ \ \ \ \ \ \ 4\ \ \ \ \ \ \ D
4\ \ \ \ \ \ \ D\ \ \ \ \ \ \ 7\ \ \ \ \ \ \ 2\ \ \ \ \ \ \ e
5\ \ \ \ \ \ \ C\ \ \ \ \ \ \ 4\ \ \ \ \ \ \ 3\ \ \ \ \ \ \ F
2\ \ \ \ \ \ \ B\ \ \ \ \ \ \ 9\ \ \ \ \ \ \ 9\ \ \ \ \ \ \ c
0\ \ \ \ \ \ \ A\ \ \ \ \ \ \ 2\ \ \ \ \ \ \ 0\ \ \ \ \ \ \ a
1\ \ \ \ \ \ \ A\ \ \ \ \ \ \ 1\ \ \ \ \ \ \ 1\ \ \ \ \ \ \ B
\f[]
.fi
.PP
\f[B]Return Value\f[]
.PD 0
.P
.PD
It returns a new Frovedis DataFrame with sorted values.
.SS 13. sort_index(axis = 0, ascending = True, inplace = False, kind =
\[aq]quicksort\[aq], na_position = \[aq]last\[aq])
.PP
\f[B]Parameters\f[]
.PD 0
.P
.PD
\f[B]\f[I]axis\f[]\f[]: It accepts an interger or a string object as
parameter.
It is the axis along which the sorting will be performed.
(Default: 0)
.PD 0
.P
.PD
When axis = 0 or axis = \[aq]index\[aq], operation will be performed on
rows.
Currently only axis = 0 or axis = \[aq]index\[aq] is supported.
.PD 0
.P
.PD
\f[B]\f[I]ascending\f[]\f[]: It accepts a boolean value as parameter.
This parameter decides the order to sort the data.
When this parameter is explicitly passed as False, it sorts the data
into descending order.
(Default: True)
.PD 0
.P
.PD
\f[B]\f[I]inplace\f[]\f[]: It accepts a boolean value as paramter.
To modify the original DataFrame object, argument is explicitly passed
as True.
Otherwise operation is performed on a copy of Frovedis DataFrame object.
(Default: False)
.PP
\f[B]NOTE: Currently \[aq]inplace\[aq] = True is not supported by this
method.\f[]
.PP
\f[B]\f[I]kind\f[]\f[]: It accepts a string object as parameter.
This parameter is used to select the sorting algorithms.
(Default: \[aq]quicksort\[aq])
.PD 0
.P
.PD
\f[B]\f[I]na_position\f[]\f[]: It accepts a string object as parameter.
It is used to decide where to puts NaNs i.e at the beginning or at the
end.
(Default: \[aq]last\[aq])
.PD 0
.P
.PD
When na_position = \[aq]last\[aq], it puts NaNs at the end.
Currently only na_position = \[aq]last\[aq] is supported.
.PP
\f[B]Purpose\f[] It is used to sort Frovedis DataFrame according to
index values.
It creates a new sorted DataFrame by the specified label.
.PP
\f[B]NOTE: Currently it only supports \[aq]radixsort\[aq] and other kind
of sorting techniques are ignored internally along with a warning.\f[]
.PP
\f[B]NOTE: Currently Frovedis DataFrame doesn\[aq]t support
MultiIndex\f[]
.PP
For example,
.IP
.nf
\f[C]
#\ example\ to\ sort\ index\ using\ default\ values

import\ pandas\ as\ pd
import\ frovedis.dataframe\ as\ fdf

#\ creating\ a\ pandas\ dataframe
pd_df\ =\ pd.DataFrame([1,\ 2,\ 3,\ 4,\ 5],\ index=[100,\ 29,\ 234,\ 1,\ 150],
\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ columns=[\[aq]A\[aq]])
\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ 
#\ creating\ frovedis\ dataframe\ from\ pandas\ dataframe
fd_df\ =\ fdf.DataFrame(pd_df)

#\ to\ display\ frovedis\ dataframe
fd_df.show()

#\ to\ display\ sorted\ dataframe\ by\ index
fd_df.sort_index().show()
\f[]
.fi
.PP
Output
.IP
.nf
\f[C]
index\ \ \ A
100\ \ \ \ \ 1
29\ \ \ \ \ \ 2
234\ \ \ \ \ 3
1\ \ \ \ \ \ \ 4
150\ \ \ \ \ 5

index\ \ \ A
1\ \ \ \ \ \ \ 4
29\ \ \ \ \ \ 2
100\ \ \ \ \ 1
150\ \ \ \ \ 5
234\ \ \ \ \ 3
\f[]
.fi
.PP
For example,
.IP
.nf
\f[C]
#\ example\ to\ sort_index\ in\ decending\ order

import\ pandas\ as\ pd
import\ frovedis.dataframe\ as\ fdf

#\ creating\ a\ pandas\ dataframe
pd_df\ =\ pd.DataFrame([1,\ 2,\ 3,\ 4,\ 5],\ index=[100,\ 29,\ 234,\ 1,\ 150],
\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ columns=[\[aq]A\[aq]])
\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ 
#\ creating\ frovedis\ dataframe\ from\ pandas\ dataframe
fd_df\ =\ fdf.DataFrame(pd_df)

#\ to\ display\ frovedis\ dataframe
fd_df.show()

#\ To\ sort\ in\ descending\ order,\ use\ ascending=False
fd_df.sort_index(ascending=False)
\f[]
.fi
.PP
Output
.IP
.nf
\f[C]
index\ \ \ A
100\ \ \ \ \ 1
29\ \ \ \ \ \ 2
234\ \ \ \ \ 3
1\ \ \ \ \ \ \ 4
150\ \ \ \ \ 5

index\ \ \ A
234\ \ \ \ \ 3
150\ \ \ \ \ 5
100\ \ \ \ \ 1
29\ \ \ \ \ \ 2
1\ \ \ \ \ \ \ 4
\f[]
.fi
.PP
\f[B]Return Value\f[]
.PD 0
.P
.PD
It returns a new Frovedis DataFrame sorted by the labels.
.SS 14. sort_values(by, axis = 0, ascending = True, inplace = False,
kind = \[aq]radixsort\[aq], na_position = \[aq]last\[aq])
.PP
\f[B]Parameters\f[]
.PD 0
.P
.PD
\f[B]\f[I]by\f[]\f[]: It accepts the name or list of names on which
sorting will be applied.
.PD 0
.P
.PD
If axis is 0 or \[aq]index\[aq], then \[aq]by\[aq] should contain index
levels and/or column labels.
.PP
\f[B]NOTE: Currently axis = 1 or axis = \[aq]columns\[aq] is not
supported.\f[]
.PP
\f[B]\f[I]axis\f[]\f[]: It accepts an integer or a string object as
parameter.
To perform sorting along rows or columns is selected by this parameter.
(Default: 0)
.PD 0
.P
.PD
If axis is 0 or \[aq]index\[aq], sorting is performed along the row.
.PP
\f[B]NOTE: Currently axis = 1 or axis = \[aq]columns\[aq] is not
supported.\f[]
.PP
\f[B]\f[I]ascending\f[]\f[]: It accepts a boolean value or a list of
boolean values as parameter.
The order of sorting is decided by this parameter.
Need to specify a list of booleans for multiple sorting orders.
If this is a list of booleans, the length of the list must match the
length of the \[aq]by\[aq] parameter list.
By default, the order of sorting will be ascending and to change the
order to descending, explicitly pass it as False.
(Default: True)
.PD 0
.P
.PD
\f[B]\f[I]inplace\f[]\f[]: It accepts a boolean value as parameter.
To modify the original DataFrame object, argument is explicitly passed
as True.
Otherwise operation is performed on a copy of Frovedis DataFrame object.
(Default: False)
.PP
\f[B]NOTE: Currently \[aq]inplace\[aq] = True is not supported by this
method.\f[]
.PP
\f[B]\f[I]kind\f[]\f[]: It accepts a string object as parameter.
The type of sorting algorithm is decided from this parameter.
(Default: \[aq]radixsort\[aq])
.PP
\f[B]NOTE: Currently it only supports \[aq]radixsort\[aq] and other kind
of sorting techniques are ignored internally along with a warning.\f[]
.PP
\f[B]\f[I]na_position\f[]\f[]: It accepts a string object as parameter.
It is used to decide where to puts NaNs i.e at the beginning or at the
end.
(Default: \[aq]last\[aq])
.PD 0
.P
.PD
When na_position = \[aq]last\[aq], it puts NaNs at the end.
Currently it only supports na_position = \[aq]last\[aq].
.PP
\f[B]Purpose\f[]
.PD 0
.P
.PD
To sort the DataFrame by the values along axis = 0 or \[aq]index\[aq].
.PP
For example,
.IP
.nf
\f[C]
#\ example\ of\ using\ sort_values\ on\ a\ column\ label

import\ pandas\ as\ pd
import\ frovedis.dataframe\ as\ fdf

#\ creating\ a\ pandas\ dataframe
pd_df\ =\ pd.DataFrame({
\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \[aq]col1\[aq]:\ [\[aq]A\[aq],\ \[aq]A\[aq],\ \[aq]B\[aq],\ np.nan,\ \[aq]D\[aq],\ \[aq]C\[aq]],
\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \[aq]col2\[aq]:\ [2,\ 1,\ 9,\ 8,\ 7,\ 4],
\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \[aq]col3\[aq]:\ [0,\ 1,\ 9,\ 4,\ 2,\ 3],
\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \[aq]col4\[aq]:\ [\[aq]a\[aq],\ \[aq]B\[aq],\ \[aq]c\[aq],\ \[aq]D\[aq],\ \[aq]e\[aq],\ \[aq]F\[aq]]
\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ })
\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ 
#\ creating\ a\ frovedis\ dataframe
fd_df\ =\ fdf.DataFrame(pd_df)

#\ displaying\ the\ frovedis\ dataframe
fd_df.show()

#\ sorting\ \[aq]col1\[aq]\ by\ values\ on\ frovedis\ dataframe
fd_df.sort_values(by=[\[aq]col1\[aq]]).show()\ #Sort\ by\ col1
\f[]
.fi
.PP
Output
.IP
.nf
\f[C]
index\ \ \ col1\ \ \ \ col2\ \ \ \ col3\ \ \ \ col4
0\ \ \ \ \ \ \ A\ \ \ \ \ \ \ 2\ \ \ \ \ \ \ 0\ \ \ \ \ \ \ a
1\ \ \ \ \ \ \ A\ \ \ \ \ \ \ 1\ \ \ \ \ \ \ 1\ \ \ \ \ \ \ B
2\ \ \ \ \ \ \ B\ \ \ \ \ \ \ 9\ \ \ \ \ \ \ 9\ \ \ \ \ \ \ c
3\ \ \ \ \ \ \ NULL\ \ \ \ 8\ \ \ \ \ \ \ 4\ \ \ \ \ \ \ D
4\ \ \ \ \ \ \ D\ \ \ \ \ \ \ 7\ \ \ \ \ \ \ 2\ \ \ \ \ \ \ e
5\ \ \ \ \ \ \ C\ \ \ \ \ \ \ 4\ \ \ \ \ \ \ 3\ \ \ \ \ \ \ F

index\ \ \ col1\ \ \ \ col2\ \ \ \ col3\ \ \ \ col4
0\ \ \ \ \ \ \ A\ \ \ \ \ \ \ 2\ \ \ \ \ \ \ 0\ \ \ \ \ \ \ a
1\ \ \ \ \ \ \ A\ \ \ \ \ \ \ 1\ \ \ \ \ \ \ 1\ \ \ \ \ \ \ B
2\ \ \ \ \ \ \ B\ \ \ \ \ \ \ 9\ \ \ \ \ \ \ 9\ \ \ \ \ \ \ c
5\ \ \ \ \ \ \ C\ \ \ \ \ \ \ 4\ \ \ \ \ \ \ 3\ \ \ \ \ \ \ F
4\ \ \ \ \ \ \ D\ \ \ \ \ \ \ 7\ \ \ \ \ \ \ 2\ \ \ \ \ \ \ e
3\ \ \ \ \ \ \ NULL\ \ \ \ 8\ \ \ \ \ \ \ 4\ \ \ \ \ \ \ D
\f[]
.fi
.PP
For example,
.IP
.nf
\f[C]
#\ example\ of\ using\ sort_values\ with\ parameters\ \[aq]by\[aq]\ and\ \[aq]ascending\[aq]\ as\ list

import\ pandas\ as\ pd
import\ frovedis.dataframe\ as\ fdf

#\ creating\ a\ pandas\ dataframe
pd_df\ =\ pd.DataFrame({
\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \[aq]col1\[aq]:\ [\[aq]A\[aq],\ \[aq]A\[aq],\ \[aq]B\[aq],\ np.nan,\ \[aq]D\[aq],\ \[aq]C\[aq]],
\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \[aq]col2\[aq]:\ [2,\ 1,\ 9,\ 8,\ 7,\ 4],
\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \[aq]col3\[aq]:\ [0,\ 1,\ 9,\ 4,\ 2,\ 3],
\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \[aq]col4\[aq]:\ [\[aq]a\[aq],\ \[aq]B\[aq],\ \[aq]c\[aq],\ \[aq]D\[aq],\ \[aq]e\[aq],\ \[aq]F\[aq]]
\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ })
#\ creating\ a\ frovedis\ dataframe
fd_df\ =\ fdf.DataFrame(pd_df)

#\ displaying\ the\ frovedis\ dataframe
fd_df.show()

#\ Sorting\ multiple\ columns
fd_df.sort_values(by=[\[aq]col1\[aq],\ \[aq]col2\[aq]],\ ascending\ =\ [True,\ True]).show()
\f[]
.fi
.PP
Output
.IP
.nf
\f[C]
index\ \ \ col1\ \ \ \ col2\ \ \ \ col3\ \ \ \ col4
0\ \ \ \ \ \ \ A\ \ \ \ \ \ \ 2\ \ \ \ \ \ \ 0\ \ \ \ \ \ \ a
1\ \ \ \ \ \ \ A\ \ \ \ \ \ \ 1\ \ \ \ \ \ \ 1\ \ \ \ \ \ \ B
2\ \ \ \ \ \ \ B\ \ \ \ \ \ \ 9\ \ \ \ \ \ \ 9\ \ \ \ \ \ \ c
3\ \ \ \ \ \ \ NULL\ \ \ \ 8\ \ \ \ \ \ \ 4\ \ \ \ \ \ \ D
4\ \ \ \ \ \ \ D\ \ \ \ \ \ \ 7\ \ \ \ \ \ \ 2\ \ \ \ \ \ \ e
5\ \ \ \ \ \ \ C\ \ \ \ \ \ \ 4\ \ \ \ \ \ \ 3\ \ \ \ \ \ \ F

index\ \ \ col1\ \ \ \ col2\ \ \ \ col3\ \ \ \ col4
1\ \ \ \ \ \ \ A\ \ \ \ \ \ \ 1\ \ \ \ \ \ \ 1\ \ \ \ \ \ \ B
0\ \ \ \ \ \ \ A\ \ \ \ \ \ \ 2\ \ \ \ \ \ \ 0\ \ \ \ \ \ \ a
2\ \ \ \ \ \ \ B\ \ \ \ \ \ \ 9\ \ \ \ \ \ \ 9\ \ \ \ \ \ \ c
5\ \ \ \ \ \ \ C\ \ \ \ \ \ \ 4\ \ \ \ \ \ \ 3\ \ \ \ \ \ \ F
4\ \ \ \ \ \ \ D\ \ \ \ \ \ \ 7\ \ \ \ \ \ \ 2\ \ \ \ \ \ \ e
3\ \ \ \ \ \ \ NULL\ \ \ \ 8\ \ \ \ \ \ \ 4\ \ \ \ \ \ \ D
\f[]
.fi
.PP
For example,
.IP
.nf
\f[C]
#\ example\ with\ parameter\ ascending\ =\ False

import\ pandas\ as\ pd
import\ frovedis.dataframe\ as\ fdf

#\ creating\ a\ pandas\ dataframe
pd_df\ =\ pd.DataFrame({
\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \[aq]col1\[aq]:\ [\[aq]A\[aq],\ \[aq]A\[aq],\ \[aq]B\[aq],\ np.nan,\ \[aq]D\[aq],\ \[aq]C\[aq]],
\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \[aq]col2\[aq]:\ [2,\ 1,\ 9,\ 8,\ 7,\ 4],
\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \[aq]col3\[aq]:\ [0,\ 1,\ 9,\ 4,\ 2,\ 3],
\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \[aq]col4\[aq]:\ [\[aq]a\[aq],\ \[aq]B\[aq],\ \[aq]c\[aq],\ \[aq]D\[aq],\ \[aq]e\[aq],\ \[aq]F\[aq]]
\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ })
\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ 
#\ creating\ a\ frovedis\ dataframe
fd_df\ =\ fdf.DataFrame(pd_df)

#\ displaying\ the\ frovedis\ dataframe
fd_df.show()

#\ Sort\ in\ descending\ order
fd_df.sort_values(by=\[aq]col1\[aq],\ ascending=False).show()
\f[]
.fi
.PP
Output
.IP
.nf
\f[C]
index\ \ \ col1\ \ \ \ col2\ \ \ \ col3\ \ \ \ col4
0\ \ \ \ \ \ \ A\ \ \ \ \ \ \ 2\ \ \ \ \ \ \ 0\ \ \ \ \ \ \ a
1\ \ \ \ \ \ \ A\ \ \ \ \ \ \ 1\ \ \ \ \ \ \ 1\ \ \ \ \ \ \ B
2\ \ \ \ \ \ \ B\ \ \ \ \ \ \ 9\ \ \ \ \ \ \ 9\ \ \ \ \ \ \ c
3\ \ \ \ \ \ \ NULL\ \ \ \ 8\ \ \ \ \ \ \ 4\ \ \ \ \ \ \ D
4\ \ \ \ \ \ \ D\ \ \ \ \ \ \ 7\ \ \ \ \ \ \ 2\ \ \ \ \ \ \ e
5\ \ \ \ \ \ \ C\ \ \ \ \ \ \ 4\ \ \ \ \ \ \ 3\ \ \ \ \ \ \ F

index\ \ \ col1\ \ \ \ col2\ \ \ \ col3\ \ \ \ col4
3\ \ \ \ \ \ \ NULL\ \ \ \ 8\ \ \ \ \ \ \ 4\ \ \ \ \ \ \ D
4\ \ \ \ \ \ \ D\ \ \ \ \ \ \ 7\ \ \ \ \ \ \ 2\ \ \ \ \ \ \ e
5\ \ \ \ \ \ \ C\ \ \ \ \ \ \ 4\ \ \ \ \ \ \ 3\ \ \ \ \ \ \ F
2\ \ \ \ \ \ \ B\ \ \ \ \ \ \ 9\ \ \ \ \ \ \ 9\ \ \ \ \ \ \ c
0\ \ \ \ \ \ \ A\ \ \ \ \ \ \ 2\ \ \ \ \ \ \ 0\ \ \ \ \ \ \ a
1\ \ \ \ \ \ \ A\ \ \ \ \ \ \ 1\ \ \ \ \ \ \ 1\ \ \ \ \ \ \ B
\f[]
.fi
.PP
\f[B]Return Value\f[]
.PD 0
.P
.PD
It returns a new Frovedis DataFrame with sorted values.
.SS 15. to_dict(orient = "dict", into = dict)
.PP
\f[B]Parameters\f[]
.PD 0
.P
.PD
\f[B]\f[I]orient\f[]\f[]: It accepts a string object as parameter.
It is used to determine the type of the values of the dictionary.
(Default: \[aq]dict\[aq])
.PD 0
.P
.PD
1.
\f[I]\[aq]dict\[aq]\f[] : dict like {column \-> {index \-> value}}
.PD 0
.P
.PD
2.
\f[I]\[aq]list\[aq]\f[] : dict like {column \-> [values]}
\f[B]\f[I]into\f[]\f[]: This parameter is used for mapping in the return
value.
(Default: dict)
.PD 0
.P
.PD
NOTE: Currently it only supports OrderedDict as return type.
.PP
\f[B]Purpose\f[]
.PD 0
.P
.PD
It is used to convert the Frovedis DataFrame to a dictionary.
.PP
For example,
.IP
.nf
\f[C]
#\ example\ of\ using\ to_dict\ with\ default\ values

import\ pandas\ as\ pd
import\ frovedis.dataframe\ as\ fdf

#\ a\ pandas\ dataframe
pd_df\ =\ pd.DataFrame({\[aq]col1\[aq]:\ [1,\ 2],
\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \[aq]col2\[aq]:\ [0.5,\ 0.75]},
\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ index=[\[aq]row1\[aq],\ \[aq]row2\[aq]])
#\ a\ frovedis\ dataframe
fd_df\ =\ fdf.DataFrame(pd_df)

#\ to\ display\ frovedis\ dataframe
fd_df.show()

#\ to\ display\ converted\ object\ using\ to_dict
print(fd_df.to_dict())
\f[]
.fi
.PP
Output
.IP
.nf
\f[C]
index\ \ \ col1\ \ \ \ col2
row1\ \ \ \ 1\ \ \ \ \ \ \ 0.5
row2\ \ \ \ 2\ \ \ \ \ \ \ 0.75

OrderedDict([(\[aq]col1\[aq],\ {\[aq]row1\[aq]:\ 1,\ \[aq]row2\[aq]:\ 2}),\ (\[aq]col2\[aq],\ {\[aq]row1\[aq]:\ 0.5,\ \[aq]row2\[aq]:\ 0.75})])
\f[]
.fi
.PP
For example,
.IP
.nf
\f[C]
#\ example\ of\ using\ to_dict\ with\ orient\ =\ \[aq]list\[aq]

import\ pandas\ as\ pd
import\ frovedis.dataframe\ as\ fdf

#\ a\ pandas\ dataframe
pd_df\ =\ pd.DataFrame({\[aq]col1\[aq]:\ [1,\ 2],
\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \[aq]col2\[aq]:\ [0.5,\ 0.75]},
\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ index=[\[aq]row1\[aq],\ \[aq]row2\[aq]])
#\ a\ frovedis\ dataframe
fd_df\ =\ fdf.DataFrame(pd_df)

#\ to\ display\ frovedis\ dataframe
fd_df.show()

#\ to\ display\ converted\ object\ using\ to_dict
print(fd_df.to_dict(orient\ =\ \[aq]list\[aq]))
\f[]
.fi
.PP
Output
.IP
.nf
\f[C]
index\ \ \ col1\ \ \ \ col2
row1\ \ \ \ 1\ \ \ \ \ \ \ 0.5
row2\ \ \ \ 2\ \ \ \ \ \ \ 0.75

OrderedDict([(\[aq]index\[aq],\ array([\[aq]row1\[aq],\ \[aq]row2\[aq]],\ dtype=\[aq]<U4\[aq])),\ (\[aq]col1\[aq],\ array([1,\ 2])),\ (\[aq]col2\[aq],\ array([0.5\ ,\ 0.75]))])
\f[]
.fi
.PP
\f[B]Return Value\f[]
.PD 0
.P
.PD
It returns a dictionary representing the Frovedis DataFrame.
The resulting transformation depends on the \[aq]orient\[aq] parameter.
.SS 16. to_frovedis_colmajor_matrix(t_cols, dtype = np.float32)
.PP
\f[B]Parameters\f[]
.PD 0
.P
.PD
\f[B]\f[I]t_cols\f[]\f[]: It accepts a list of string type argument
where each of the member of the list is the name of the column labels.
.PD 0
.P
.PD
\f[B]\f[I]dtype\f[]\f[]: It accepts a dtype type argument which is the
type of the resultant values.
.PD 0
.P
.PD
Currently only float32 and float64 types are supported.
(Default: np.float32)
.PP
\f[B]Purpose\f[]
.PD 0
.P
.PD
This method converts a frovedis dataframe to FrovedisColmajorMatrix.
.PP
For example,
.IP
.nf
\f[C]
#\ example\ to\ use\ to_frovedis_colmajor_matrix

import\ frovedis.dataframe\ as\ fdf

#\ read_csv\ demo
df\ =\ fdf.read_csv("./input/numbers.csv",\ names=[\[aq]one\[aq],\ \[aq]two\[aq],\ \[aq]three\[aq],\ \[aq]four\[aq]])
df.show()

col_mat\ =\ df.to_frovedis_colmajor_matrix([\[aq]one\[aq],\ \[aq]two\[aq]])\ #\ default\ dtype\ =\ np.float32

#\ display\ type\ of\ col_mat
print(type(col_mat))

#\ display\ col_mat
col_mat.debug_print()
\f[]
.fi
.PP
Output
.IP
.nf
\f[C]
index\ \ \ one\ \ \ \ \ two\ \ \ \ \ three\ \ \ four
0\ \ \ \ \ \ \ 10\ \ \ \ \ \ 10.23\ \ \ F\ \ \ \ \ \ \ 0
1\ \ \ \ \ \ \ 12\ \ \ \ \ \ 12.2\ \ \ \ F\ \ \ \ \ \ \ 0
2\ \ \ \ \ \ \ 13\ \ \ \ \ \ 34.8999\ D\ \ \ \ \ \ \ 1
3\ \ \ \ \ \ \ 15\ \ \ \ \ \ 100.12\ \ A\ \ \ \ \ \ \ 2

<class\ \[aq]frovedis.matrix.dense.FrovedisColmajorMatrix\[aq]>

matrix:
num_row\ =\ 4,\ num_col\ =\ 2
node\ 0
node\ =\ 0,\ local_num_row\ =\ 4,\ local_num_col\ =\ 2,\ val\ =\ 10\ 12\ 13\ 15\ 10.23\ 12.2\ 34.9\ 100.12
\f[]
.fi
.PP
\f[B]Return Value\f[]
.PD 0
.P
.PD
It returns a FrovedisColmajorMatrix instance after converting the
original Frovedis DataFrame.
.SS 17. to_frovedis_crs_matrix(t_cols, cat_cols, dtype = np.float32,
need_info = False)
.PP
\f[B]Parameters\f[]
.PD 0
.P
.PD
\f[B]\f[I]t_cols\f[]\f[]: It accepts a list of string type argument
where each of the member of the list is the name of the column labels.
.PD 0
.P
.PD
\f[B]\f[I]cat_cols\f[]\f[]: It accepts a list of strings as parameter
where strings are the column names.
It stands for categorical columns.
It represents how the repetitive values are distributed in the specified
column.
It adds number of columns corresponding to number of distinct values in
the specified column to the matrix.
And values corresponding to the value of the specicified column is set
to 1 and remaining values are set to 0.
.PD 0
.P
.PD
\f[B]\f[I]dtype\f[]\f[]: It accepts a dtype type argument which is the
type of the resultant values.
.PD 0
.P
.PD
Currently only float32 and float64 types are supported.
(Default: np.float32)
.PD 0
.P
.PD
\f[B]\f[I]need_info\f[]\f[]: It accepts a boolean value as parameter.
When this is explicitly set to True, it returns an additional value of
type \[aq]df_to_sparse_info\[aq].
(Default: False)
.PP
\f[B]Purpose\f[]
.PD 0
.P
.PD
It converts a Frovedis DataFrame object to FrovedisCRSMatrix instance.
.PP
For example,
.IP
.nf
\f[C]
#\ example\ to\ use\ to_frovedis_crs_matrix

import\ frovedis.dataframe\ as\ fdf
import\ numpy\ as\ np

#\ read_csv\ demo
df\ =\ fdf.read_csv("./input/numbers.csv",\ names\ =\ [\[aq]one\[aq],\ \[aq]two\[aq],\ \[aq]three\[aq],\ \[aq]four\[aq]])
df.show()

crs_mat,info\ =\ df.to_frovedis_crs_matrix([\[aq]one\[aq],\ \[aq]two\[aq],\ \[aq]four\[aq]],
\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ [\[aq]three\[aq]],\ need_info\ =\ True)\ #\ default\ dtype\ =\ float32

#\ display\ type\ of\ crs_mat
print(type(crs_mat))

#\ display\ crs_mat\ on\ console
crs_mat.debug_print()

#\ converting\ crs_mat\ to\ display\ it\ in\ better\ form
mat_t\ =\ crs_mat.to_scipy_matrix().todense()

#\ display\ matrix
print(mat_t)
\f[]
.fi
.PP
Output
.IP
.nf
\f[C]
index\ \ \ one\ \ \ \ \ two\ \ \ \ \ three\ \ \ four
0\ \ \ \ \ \ \ 10\ \ \ \ \ \ 10.23\ \ \ F\ \ \ \ \ \ \ 0
1\ \ \ \ \ \ \ 12\ \ \ \ \ \ 12.2\ \ \ \ F\ \ \ \ \ \ \ 0
2\ \ \ \ \ \ \ 13\ \ \ \ \ \ 34.8999\ D\ \ \ \ \ \ \ 1
3\ \ \ \ \ \ \ 15\ \ \ \ \ \ 100.12\ \ A\ \ \ \ \ \ \ 2

Active\ Elements:\ \ 12

<class\ \[aq]frovedis.matrix.crs.FrovedisCRSMatrix\[aq]>

matrix:
num_row\ =\ 4,\ num_col\ =\ 5
node\ 0
local_num_row\ =\ 4,\ local_num_col\ =\ 5
val\ :\ 10\ 10.23\ 1\ 12\ 12.2\ 1\ 13\ 34.9\ 1\ 15\ 100.12\ 1
idx\ :\ 0\ 1\ 2\ 0\ 1\ 2\ 0\ 1\ 3\ 0\ 1\ 4
off\ :\ 0\ 3\ 6\ 9\ 12

[[\ 10.\ \ \ \ 10.23\ \ \ 0.\ \ \ \ \ 0.\ \ \ \ \ 1.\ \ ]
\ [\ 12.\ \ \ \ 12.2\ \ \ \ 0.\ \ \ \ \ 0.\ \ \ \ \ 1.\ \ ]
\ [\ 13.\ \ \ \ 34.9\ \ \ \ 0.\ \ \ \ \ 1.\ \ \ \ \ 0.\ \ ]
\ [\ 15.\ \ \ 100.12\ \ \ 1.\ \ \ \ \ 0.\ \ \ \ \ 0.\ \ ]]
\f[]
.fi
.PP
\f[B]Return Value\f[]
.PD 0
.P
.PD
It returns a FrovedisCRSMatrix instance after converting the original
Frovedis DataFrame.
.SS 18. to_frovedis_crs_matrix_using_info(info, dtype = np.float32)
.PP
\f[B]Parameters\f[]
.PD 0
.P
.PD
\f[B]\f[I]info\f[]\f[]: It accepts an instance of
\[aq]df_to_sparse_info\[aq] type.
.PD 0
.P
.PD
\f[B]\f[I]dtype\f[]\f[]: It accepts a dtype type argument which is the
type of the resultant values.
.PD 0
.P
.PD
Currently only float32 and float64 types are supported.
(Default: np.float32)
.PP
\f[B]Purpose\f[]
.PD 0
.P
.PD
It converts a frovedis dataframe to FrovedisCRSMatrix provided an info
object of df_to_sparse_info class.
.PP
For example,
.IP
.nf
\f[C]
#\ example\ to\ use\ to_frovedis_crs_matrix_using_info

import\ frovedis.dataframe\ as\ fdf

#\ read_csv\ demo
df\ =\ fdf.read_csv("./input/numbers.csv",\ names=[\[aq]one\[aq],\ \[aq]two\[aq],\ \[aq]three\[aq],\ \[aq]four\[aq]])
df.show()

crs_mat,info\ =\ df.to_frovedis_crs_matrix([\[aq]one\[aq],\ \[aq]two\[aq],\ \[aq]four\[aq]],
\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ [\[aq]four\[aq]],\ need_info=True)\ #\ default\ dtype\ =\ np.float32
print(type(info))

crs_mat2\ =\ df.to_frovedis_crs_matrix_using_info(info)
print(type(crs_mat2))
crs_mat2.debug_print()
\f[]
.fi
.PP
Output
.IP
.nf
\f[C]
index\ \ \ one\ \ \ \ \ two\ \ \ \ \ three\ \ \ four
0\ \ \ \ \ \ \ 10\ \ \ \ \ \ 10.23\ \ \ F\ \ \ \ \ \ \ 0
1\ \ \ \ \ \ \ 12\ \ \ \ \ \ 12.2\ \ \ \ F\ \ \ \ \ \ \ 0
2\ \ \ \ \ \ \ 13\ \ \ \ \ \ 34.8999\ D\ \ \ \ \ \ \ 1
3\ \ \ \ \ \ \ 15\ \ \ \ \ \ 100.12\ \ A\ \ \ \ \ \ \ 2

<class\ \[aq]frovedis.dataframe.info.df_to_sparse_info\[aq]>

<class\ \[aq]frovedis.matrix.crs.FrovedisCRSMatrix\[aq]>

Active\ Elements:\ \ 12
matrix:
num_row\ =\ 4,\ num_col\ =\ 5
node\ 0
local_num_row\ =\ 4,\ local_num_col\ =\ 5
val\ :\ 10\ 10.23\ 1\ 12\ 12.2\ 1\ 13\ 34.9\ 1\ 15\ 100.12\ 1
idx\ :\ 0\ 1\ 2\ 0\ 1\ 2\ 0\ 1\ 3\ 0\ 1\ 4
off\ :\ 0\ 3\ 6\ 9\ 12
\f[]
.fi
.PP
\f[B]Return Value\f[]
.PD 0
.P
.PD
It returns a FrovedisCRSMatrix after converting Frovedis DataFrame.
.SS 19. to_frovedis_rowmajor_matrix(t_cols, dtype = np.float32)
.PP
\f[B]Parameters\f[]
.PD 0
.P
.PD
\f[B]\f[I]t_cols\f[]\f[]: It accepts a list of string type argument
where each of the member of the list is the name of the column labels.
.PD 0
.P
.PD
\f[B]\f[I]dtype\f[]\f[]: It accepts a dtype type argument which is the
type of the resultant values.
.PD 0
.P
.PD
Currently only float32 and float64 types are supported.
(Default: np.float32)
.PP
\f[B]Purpose\f[]
.PD 0
.P
.PD
This method is used to convert a Frovedis DataFrame into
FrovedisRowmajorMatrix instance.
.PP
For example,
.IP
.nf
\f[C]
#\ example\ to\ convert\ frovedis\ dataframe\ into\ frovedis\ row\ major\ matrix

import\ frovedis.dataframe\ as\ fdf
import\ numpy\ as\ np

#\ read_csv\ demo\ to\ get\ values
df\ =\ fdf.read_csv("./input/numbers.csv",\ names\ =\ [\[aq]one\[aq],\ \[aq]two\[aq],\ \[aq]three\[aq],\ \[aq]four\[aq]])

#\ display\ frovedis\ dataframe
df.show()

row_mat\ =\ df.to_frovedis_rowmajor_matrix([\[aq]one\[aq],\ \[aq]two\[aq]],\ dtype\ =\ np.float64)

#\ display\ row_mat\ (row\ major\ matrix)
row_mat.debug_print()

#\ display\ type\ of\ row_mat
print(type(row_mat))
\f[]
.fi
.PP
Output
.IP
.nf
\f[C]
index\ \ \ one\ \ \ \ \ two\ \ \ \ \ three\ \ \ four
0\ \ \ \ \ \ \ 10\ \ \ \ \ \ 10.23\ \ \ F\ \ \ \ \ \ \ 0
1\ \ \ \ \ \ \ 12\ \ \ \ \ \ 12.2\ \ \ \ F\ \ \ \ \ \ \ 0
2\ \ \ \ \ \ \ 13\ \ \ \ \ \ 34.8999\ D\ \ \ \ \ \ \ 1
3\ \ \ \ \ \ \ 15\ \ \ \ \ \ 100.12\ \ A\ \ \ \ \ \ \ 2

<class\ \[aq]frovedis.matrix.dense.FrovedisRowmajorMatrix\[aq]>

matrix:
num_row\ =\ 4,\ num_col\ =\ 2
node\ 0
node\ =\ 0,\ local_num_row\ =\ 4,\ local_num_col\ =\ 2,\ val\ =\ 10\ 10.23\ 12\ 12.2\ 13\ 34.9\ 15\ 100.12
\f[]
.fi
.PP
\f[B]Return Value\f[]
.PD 0
.P
.PD
It returns a FrovedisRowmajorMatrix instance after suitable conversion.
.SS 20. to_numpy(dtype = None, copy = False, na_value = None)
.PP
\f[B]Parameters\f[]
.PD 0
.P
.PD
\f[B]\f[I]dtype\f[]\f[] : It accepts the dtype parameter which decides
the datatype of numpy ndarray.
(Default: None)
.PD 0
.P
.PD
When it is None (not specified explicitly), it will be set as double
(float64).
.PD 0
.P
.PD
\f[B]\f[I]copy\f[]\f[] : This is an unused parameter.
(Default: False)
.PD 0
.P
.PD
\f[B]\f[I]na_value\f[]\f[] : This is an unused parameter.
(Default: None)
.PP
\f[B]Purpose\f[]
.PD 0
.P
.PD
This method is used to convert a frovedis dataframe into a numpy array.
.PP
The parameters: "copy" and "na_value" are simply kept in to make the
interface uniform to the pandas DataFrame.to_numpy().
.PD 0
.P
.PD
This is not used anywhere within the frovedis implementation.
.PP
For example,
.IP
.nf
\f[C]
#\ example\ to\ convert\ a\ frovedis\ dataframe\ into\ numpy

import\ pandas\ as\ pd
import\ frovedis.dataframe\ as\ fdf

#\ a\ python\ dict
peopleDF\ =\ {
\ \ \ \ \ \ \ \ \ \ \ \ \[aq]Ename\[aq]\ :\ [\[aq]Michael\[aq],\ \[aq]Andy\[aq],\ \[aq]Tanaka\[aq],\ \[aq]Raul\[aq],\ \[aq]Yuta\[aq]],
\ \ \ \ \ \ \ \ \ \ \ \ \[aq]Age\[aq]\ :\ [29,\ 30,\ 27,\ 19,\ 31],
\ \ \ \ \ \ \ \ \ \ \ \ \[aq]Country\[aq]\ :\ [\[aq]USA\[aq],\ \[aq]England\[aq],\ \[aq]Japan\[aq],\ \[aq]France\[aq],\ \[aq]Japan\[aq]],
\ \ \ \ \ \ \ \ \ \ \ \ \[aq]isMale\[aq]:\ [False,\ False,\ False,\ False,\ True]
\ \ \ \ \ \ \ \ \ \ \ }

#\ a\ pandas\ dataframe\ object\ from\ dict
pd_df\ =\ pd.DataFrame(peopleDF)
#\ to\ create\ a\ frovedis\ dataframe\ object
fd_df\ =\ fdf.DataFrame(pd_df)

#\ below\ will\ display\ a\ Frovedis\ dataframe\ type
print(type(fd_df))

#\ display\ frovedis\ dataframe
fd_df.show()

#\ below\ will\ display\ a\ numpy\ array\ type
print(type(fd_df.to_numpy()))

#\ below\ will\ display\ a\ numpy\ array\ type
print(fd_df.to_numpy())
\f[]
.fi
.PP
Output
.IP
.nf
\f[C]
<class\ \[aq]frovedis.dataframe.df.DataFrame\[aq]>

index\ \ \ Ename\ \ \ Age\ \ \ \ \ Country\ isMale
0\ \ \ \ \ \ \ Michael\ 29\ \ \ \ \ \ USA\ \ \ \ \ 0
1\ \ \ \ \ \ \ Andy\ \ \ \ 30\ \ \ \ \ \ England\ 0
2\ \ \ \ \ \ \ Tanaka\ \ 27\ \ \ \ \ \ Japan\ \ \ 0
3\ \ \ \ \ \ \ Raul\ \ \ \ 19\ \ \ \ \ \ France\ \ 0
4\ \ \ \ \ \ \ Yuta\ \ \ \ 31\ \ \ \ \ \ Japan\ \ \ 1

<<class\ \[aq]numpy.ndarray\[aq]>

[[\[aq]Michael\[aq]\ \[aq]29\[aq]\ \[aq]USA\[aq]\ \[aq]0\[aq]]
\ [\[aq]Andy\[aq]\ \[aq]30\[aq]\ \[aq]England\[aq]\ \[aq]0\[aq]]
\ [\[aq]Tanaka\[aq]\ \[aq]27\[aq]\ \[aq]Japan\[aq]\ \[aq]0\[aq]]
\ [\[aq]Raul\[aq]\ \[aq]19\[aq]\ \[aq]France\[aq]\ \[aq]0\[aq]]
\ [\[aq]Yuta\[aq]\ \[aq]31\[aq]\ \[aq]Japan\[aq]\ \[aq]1\[aq]]]
\f[]
.fi
.PP
\f[B]Return Value\f[]
.PD 0
.P
.PD
It returns a numpy ndarray that represents a Frovedis DataFrame.
It has shape (nRows , nCols).
.SS 21. to_pandas_dataframe()
.PP
\f[B]Purpose\f[]
.PD 0
.P
.PD
It converts a Frovedis DataFrame instance into a pandas dataframe
instance.
.PP
For example,
.IP
.nf
\f[C]
#\ example\ to\ convert\ frovedis\ dataframe\ to\ pandas\ dataframe

import\ pandas\ as\ pd
import\ frovedis.dataframe\ as\ fdf

#\ a\ python\ dictionary
peopleDF\ =\ {
\ \ \ \ \ \ \ \ \ \ \ \ \[aq]Ename\[aq]\ :\ [\[aq]Michael\[aq],\ \[aq]Andy\[aq],\ \[aq]Tanaka\[aq],\ \[aq]Raul\[aq],\ \[aq]Yuta\[aq]],
\ \ \ \ \ \ \ \ \ \ \ \ \[aq]Age\[aq]\ :\ [29,\ 30,\ 27,\ 19,\ 31],
\ \ \ \ \ \ \ \ \ \ \ \ \[aq]Country\[aq]\ :\ [\[aq]USA\[aq],\ \[aq]England\[aq],\ \[aq]Japan\[aq],\ \[aq]France\[aq],\ \[aq]Japan\[aq]],
\ \ \ \ \ \ \ \ \ \ \ \ \[aq]isMale\[aq]:\ [False,\ False,\ False,\ False,\ True]
\ \ \ \ \ \ \ \ \ \ \ }
#\ creating\ a\ pandas\ dataframe\ from\ python\ dict
pd_df\ =\ pd.DataFrame(peopleDF)

#\ creating\ a\ Frovedis\ dataframe\ from\ pandas\ dataframe
fd_df\ =\ fdf.DataFrame(pd_df)

#\ below\ will\ display\ a\ Frovedis\ dataframe\ type
print(type(fd_df))

#\ below\ will\ display\ a\ Frovedis\ dataframe
fd_df.show()

#\ below\ will\ display\ a\ Pandas\ dataframe\ type\ after\ conversion
print(type(fd_df.to_pandas_dataframe()))

#\ below\ will\ display\ a\ Pandas\ dataframe\ after\ conversion
print(fd_df.to_pandas_dataframe())
\f[]
.fi
.PP
Output
.IP
.nf
\f[C]
<class\ \[aq]frovedis.dataframe.df.DataFrame\[aq]>

index\ \ \ Ename\ \ \ Age\ \ \ \ \ Country\ isMale
0\ \ \ \ \ \ \ Michael\ 29\ \ \ \ \ \ USA\ \ \ \ \ 0
1\ \ \ \ \ \ \ Andy\ \ \ \ 30\ \ \ \ \ \ England\ 0
2\ \ \ \ \ \ \ Tanaka\ \ 27\ \ \ \ \ \ Japan\ \ \ 0
3\ \ \ \ \ \ \ Raul\ \ \ \ 19\ \ \ \ \ \ France\ \ 0
4\ \ \ \ \ \ \ Yuta\ \ \ \ 31\ \ \ \ \ \ Japan\ \ \ 1\ \ \ 

<class\ \[aq]pandas.core.frame.DataFrame\[aq]>

index\ \ Ename\ \ Age\ \ Country\ \ isMale
0\ \ \ \ \ \ Michael\ \ \ 29\ \ \ \ \ \ USA\ \ \ False
1\ \ \ \ \ \ \ \ \ Andy\ \ \ 30\ \ England\ \ \ False
2\ \ \ \ \ \ \ Tanaka\ \ \ 27\ \ \ \ Japan\ \ \ False
3\ \ \ \ \ \ \ \ \ Raul\ \ \ 19\ \ \ France\ \ \ False
4\ \ \ \ \ \ \ \ \ Yuta\ \ \ 31\ \ \ \ Japan\ \ \ \ True\ \ 
\f[]
.fi
.PP
\f[B]Return Value\f[]
.PD 0
.P
.PD
It returns a pandas dataframe instance after suitable conversion.
.SH SEE ALSO
.PP
DataFrame_Introduction, DataFrame_ConversionAndSorting,
DataFrame_SelectionAndCombinations, DataFrame_BinaryOperators
